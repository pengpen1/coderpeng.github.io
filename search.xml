<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>字体包的压缩方案</title>
      <link href="/2024/09/09/%E5%85%B6%E4%BB%96-%E5%AD%97%E4%BD%93%E5%8C%85%E7%9A%84%E5%8E%8B%E7%BC%A9%E6%96%B9%E6%A1%88/"/>
      <url>/2024/09/09/%E5%85%B6%E4%BB%96-%E5%AD%97%E4%BD%93%E5%8C%85%E7%9A%84%E5%8E%8B%E7%BC%A9%E6%96%B9%E6%A1%88/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p><strong>概要：</strong>本文主要是分享下字体包的压缩方案。</p><h3 id="方案1-常用字符-font-spider"><a href="#方案1-常用字符-font-spider" class="headerlink" title="方案1~常用字符+font-spider"></a>方案1~常用字符+font-spider</h3><p>font-spider是一个智能 WebFont 压缩工具，它能自动分析出页面使用的 WebFont 并进行按需压缩</p><p>1.先安装全局依赖：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install font-spider -g</span><br></pre></td></tr></table></figure><p>2.然后创建一个随意命名的文件夹，放入需要压缩的字体文件，然后新建个<code>font.css</code>（命名无需固定，自己替换就行）文件，内容就是引用你需要压缩的字体包：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@font-face</span> &#123;</span><br><span class="line">    <span class="attribute">font-family</span>: <span class="string">&#x27;AlibabaPuHuiTi-2-35-Thin&#x27;</span>;</span><br><span class="line">    <span class="attribute">src</span>: <span class="built_in">url</span>(<span class="string">&#x27;./AlibabaPuHuiTi-2-35-Thin.ttf&#x27;</span>);</span><br><span class="line">    <span class="attribute">font-weight</span>: normal;</span><br><span class="line">    <span class="attribute">font-style</span>: normal;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.thin</span> &#123;</span><br><span class="line">    <span class="attribute">font-family</span>: <span class="string">&#x27;AlibabaPuHuiTi-2-35-Thin&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@font-face</span> &#123;</span><br><span class="line">    <span class="attribute">font-family</span>: <span class="string">&#x27;AlibabaPuHuiTi-2-45-Light&#x27;</span>;</span><br><span class="line">    <span class="attribute">src</span>: <span class="built_in">url</span>(<span class="string">&#x27;./AlibabaPuHuiTi-2-45-Light.ttf&#x27;</span>);</span><br><span class="line">    <span class="attribute">font-weight</span>: normal;</span><br><span class="line">    <span class="attribute">font-style</span>: normal;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.light</span> &#123;</span><br><span class="line">    <span class="attribute">font-family</span>: <span class="string">&#x27;AlibabaPuHuiTi-2-45-Light&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@font-face</span> &#123;</span><br><span class="line">    <span class="attribute">font-family</span>: <span class="string">&#x27;AlibabaPuHuiTi-2-55-Regular&#x27;</span>;</span><br><span class="line">    <span class="attribute">src</span>: <span class="built_in">url</span>(<span class="string">&#x27;./AlibabaPuHuiTi-2-55-Regular.ttf&#x27;</span>);</span><br><span class="line">    <span class="attribute">font-weight</span>: normal;</span><br><span class="line">    <span class="attribute">font-style</span>: normal;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.regular</span> &#123;</span><br><span class="line">    <span class="attribute">font-family</span>: <span class="string">&#x27;AlibabaPuHuiTi-2-55-Regular&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@font-face</span> &#123;</span><br><span class="line">    <span class="attribute">font-family</span>: <span class="string">&#x27;AlibabaPuHuiTi-2-65-Medium&#x27;</span>;</span><br><span class="line">    <span class="attribute">src</span>: <span class="built_in">url</span>(<span class="string">&#x27;./AlibabaPuHuiTi-2-65-Medium.ttf&#x27;</span>);</span><br><span class="line">    <span class="attribute">font-weight</span>: normal;</span><br><span class="line">    <span class="attribute">font-style</span>: normal;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.medium</span> &#123;</span><br><span class="line">    <span class="attribute">font-family</span>: <span class="string">&#x27;AlibabaPuHuiTi-2-65-Medium&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.再新建一个<code>Index.html</code>文件，在对应的类下，写入会用到这个类对应字体的字符，不想整理用了哪些字符的话，可以直接用3500个常用中文、大小写英文、常用符号：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;./font.css&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- thin --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;thin&quot;</span>&gt;</span></span><br><span class="line">        123456789/*-+=._-？?`~--$%@^&amp;*()（）￥#，,.&gt;》《&#123;&#125;|:&quot;&#x27;“”qwertyuiopasdfghjklzxcvbnmQWERTYUIOPASDFGHJKLZXCVBNM啊阿埃挨哎唉哀皑癌蔼矮艾碍爱隘鞍氨安俺按暗岸胺案肮昂盎凹敖熬翱袄傲奥懊澳芭捌扒叭吧笆八疤巴拔跋靶把耙坝霸罢爸白柏百摆佰败拜稗斑班搬扳般颁板版扮拌伴瓣半办绊邦帮梆榜膀绑棒磅蚌镑傍谤苞胞包褒剥薄雹保堡饱宝抱报暴豹鲍爆杯碑悲卑北辈背贝钡倍狈备惫焙被奔苯本笨崩绷甭泵蹦迸逼鼻比鄙笔彼碧蓖蔽毕毙毖币庇痹闭敝弊必辟壁臂避陛鞭边编贬扁便变卞辨辩辫遍标彪膘表鳖憋别瘪彬斌濒滨宾摈兵冰柄丙秉饼炳病并玻菠播拨钵波博勃搏铂箔伯帛舶脖膊渤泊驳捕卜哺补埠不布步簿部怖擦猜裁材才财睬踩采彩菜蔡餐参蚕残惭惨灿苍舱仓沧藏操糙槽曹草厕策侧册测层蹭插叉茬茶查碴搽察岔差诧拆柴豺搀掺蝉馋谗缠铲产阐颤昌猖场尝常长偿肠厂敞畅唱倡超抄钞朝嘲潮巢吵炒车扯撤掣彻澈郴臣辰尘晨忱沉陈趁衬撑称城橙成呈乘程惩澄诚承逞骋秤吃痴持匙池迟弛驰耻齿侈尺赤翅斥炽充冲虫崇宠抽酬畴踌稠愁筹仇绸瞅丑臭初出橱厨躇锄雏滁除楚础储矗搐触处揣川穿椽传船喘串疮窗幢床闯创吹炊捶锤垂春椿醇唇淳纯蠢戳绰疵茨磁雌辞慈瓷词此刺赐次聪葱囱匆从丛凑粗醋簇促蹿篡窜摧崔催脆瘁粹淬翠村存寸磋撮搓措挫错搭达答瘩打大呆歹傣戴带殆代贷袋待逮怠耽担丹单郸掸胆旦氮但惮淡诞弹蛋当挡党荡档刀捣蹈倒岛祷导到稻悼道盗德得的蹬灯登等瞪凳邓堤低滴迪敌笛狄涤翟嫡抵底地蒂第帝弟递缔颠掂滇碘点典靛垫电佃甸店惦奠淀殿碉叼雕凋刁掉吊钓调跌爹碟蝶迭谍叠丁盯叮钉顶鼎锭定订丢东冬董懂动栋侗恫冻洞兜抖斗陡豆逗痘都督毒犊独读堵睹赌杜镀肚度渡妒端短锻段断缎堆兑队对墩吨蹲敦顿囤钝盾遁掇哆多夺垛躲朵跺舵剁惰堕蛾峨鹅俄额讹娥恶厄扼遏鄂饿恩而儿耳尔饵洱二贰发罚筏伐乏阀法珐藩帆番翻樊矾钒繁凡烦反返范贩犯饭泛坊芳方肪房防妨仿访纺放菲非啡飞肥匪诽吠肺废沸费芬酚吩氛分纷坟焚汾粉奋份忿愤粪丰封枫蜂峰锋风疯烽逢冯缝讽奉凤佛否夫敷肤孵扶拂辐幅氟符伏俘服浮涪福袱弗甫抚辅俯釜斧脯腑府腐赴副覆赋复傅付阜父腹负富讣附妇缚咐噶嘎该改概钙盖溉干甘杆柑竿肝赶感秆敢赣冈刚钢缸肛纲岗港杠篙皋高膏羔糕搞镐稿告哥歌搁戈鸽胳疙割革葛格蛤阁隔铬个各给根跟耕更庚羹埂耿梗工攻功恭龚供躬公宫弓巩汞拱贡共钩勾沟苟狗垢构购够辜菇咕箍估沽孤姑鼓古蛊骨谷股故顾固雇刮瓜剐寡挂褂乖拐怪棺关官冠观管馆罐惯灌贯光广逛瑰规圭硅归龟闺轨鬼诡癸桂柜跪贵刽辊滚棍锅郭国果裹过哈骸孩海氦亥害骇酣憨邯韩含涵寒函喊罕翰撼捍旱憾悍焊汗汉夯杭航壕嚎豪毫郝好耗号浩呵喝荷菏核禾和何合盒貉阂河涸赫褐鹤贺嘿黑痕很狠恨哼亨横衡恒轰哄烘虹鸿洪宏弘红喉侯猴吼厚候后呼乎忽瑚壶葫胡蝴狐糊湖弧虎唬护互沪户花哗华猾滑画划化话槐徊怀淮坏欢环桓还缓换患唤痪豢焕涣宦幻荒慌黄磺蝗簧皇凰惶煌晃幌恍谎灰挥辉徽恢蛔回毁悔慧卉惠晦贿秽会烩汇讳诲绘荤昏婚魂浑混豁活伙火获或惑霍货祸击圾基机畸稽积箕肌饥迹激讥鸡姬绩缉吉极棘辑籍集及急疾汲即嫉级挤几脊己蓟技冀季伎祭剂悸济寄寂计记既忌际妓继纪嘉枷夹佳家加荚颊贾甲钾假稼价架驾嫁歼监坚尖笺间煎兼肩艰奸缄茧检柬碱碱拣捡简俭剪减荐槛鉴践贱见键箭件健舰剑饯渐溅涧建僵姜将浆江疆蒋桨奖讲匠酱降蕉椒礁焦胶交郊浇骄娇嚼搅铰矫侥脚狡角饺缴绞剿教酵轿较叫窖揭接皆秸街阶截劫节桔杰捷睫竭洁结解姐戒藉芥界借介疥诫届巾筋斤金今津襟紧锦仅谨进靳晋禁近烬浸尽劲荆兢茎睛晶鲸京惊精粳经井警景颈静境敬镜径痉靖竟竞净炯窘揪究纠玖韭久灸九酒厩救旧臼舅咎就疚鞠拘狙疽居驹菊局咀矩举沮聚拒据巨具距踞锯俱句惧炬剧捐鹃娟倦眷卷绢撅攫抉掘倔爵觉决诀绝均菌钧军君峻俊竣浚郡骏喀咖卡咯开揩楷凯慨刊堪勘坎砍看康慷糠扛抗亢炕考拷烤靠坷苛柯棵磕颗科壳咳可渴克刻客课肯啃垦恳坑吭空恐孔控抠口扣寇枯哭窟苦酷库裤夸垮挎跨胯块筷侩快宽款匡筐狂框矿眶旷况亏盔岿窥葵奎魁傀馈愧溃坤昆捆困括扩廓阔垃拉喇蜡腊辣啦莱来赖蓝婪栏拦篮阑兰澜谰揽览懒缆烂滥琅榔狼廊郎朗浪捞劳牢老佬姥酪烙涝勒乐雷镭蕾磊累儡垒擂肋类泪棱楞冷厘梨犁黎篱狸离漓理李里鲤礼莉荔吏栗丽厉励砾历利僳例俐痢立粒沥隶力璃哩俩联莲连镰廉怜涟帘敛脸链恋炼练粮凉梁粱良两辆量晾亮谅撩聊僚疗燎寥辽潦了撂镣廖料列裂烈劣猎琳林磷霖临邻鳞淋凛赁吝拎玲菱零龄铃伶羚凌灵陵岭领另令溜琉榴硫馏留刘瘤流柳六龙聋咙笼窿隆垄拢陇楼娄搂篓漏陋芦卢颅庐炉掳卤虏鲁麓碌露路赂鹿潞禄录陆戮驴吕铝侣旅履屡缕虑氯律率滤绿峦挛孪滦卵乱掠略抡轮伦仑沦纶论萝螺罗逻锣箩骡裸落洛骆络妈麻玛码蚂马骂嘛吗埋买麦卖迈脉瞒馒蛮满蔓曼慢漫谩芒茫盲氓忙莽猫茅锚毛矛铆卯茂冒帽貌贸么玫枚梅酶霉煤没眉媒镁每美昧寐妹媚门闷们萌蒙檬盟锰猛梦孟眯醚靡糜迷谜弥米秘觅泌蜜密幂棉眠绵冕免勉娩缅面苗描瞄藐秒渺庙妙蔑灭民抿皿敏悯闽明螟鸣铭名命谬摸摹蘑模膜磨摩魔抹末莫墨默沫漠寞陌谋牟某拇牡亩姆母墓暮幕募慕木目睦牧穆拿哪呐钠那娜纳氖乃奶耐奈南男难囊挠脑恼闹淖呢馁内嫩能妮霓倪泥尼拟你匿腻逆溺蔫拈年碾撵捻念娘酿鸟尿捏聂孽啮镊镍涅您柠狞凝宁拧泞牛扭钮纽脓浓农弄奴努怒女暖虐疟挪懦糯诺哦欧鸥殴藕呕偶沤啪趴爬帕怕琶拍排牌徘湃派攀潘盘磐盼畔判叛乓庞旁耪胖抛咆刨炮袍跑泡呸胚培裴赔陪配佩沛喷盆砰抨烹澎彭蓬棚硼篷膨朋鹏捧碰坯砒霹批披劈琵毗啤脾疲皮匹痞僻屁譬篇偏片骗飘漂瓢票撇瞥拼频贫品聘乒坪苹萍平凭瓶评屏坡泼颇婆破魄迫粕剖扑铺仆莆葡菩蒲埔朴圃普浦谱曝瀑期欺栖戚妻七凄漆柒沏其棋奇歧畦崎脐齐旗祈祁骑起岂乞企启契砌器气迄弃汽泣讫掐洽牵扦钎铅千迁签仟谦乾黔钱钳前潜遣浅谴堑嵌欠歉枪呛腔羌墙蔷强抢橇锹敲悄桥瞧乔侨巧鞘撬翘峭俏窍切茄且怯窃钦侵亲秦琴勤芹擒禽寝沁青轻氢倾卿清擎晴氰情顷请庆琼穷秋丘邱球求囚酋泅趋区蛆曲躯屈驱渠取娶龋趣去圈颧权醛泉全痊拳犬券劝缺炔瘸却鹊榷确雀裙群然燃冉染瓤壤攘嚷让饶扰绕惹热壬仁人忍韧任认刃妊纫扔仍日戎茸蓉荣融熔溶容绒冗揉柔肉茹蠕儒孺如辱乳汝入褥软阮蕊瑞锐闰润若弱撒洒萨腮鳃塞赛三叁伞散桑嗓丧搔骚扫嫂瑟色涩森僧莎砂杀刹沙纱傻啥煞筛晒珊苫杉山删煽衫闪陕擅赡膳善汕扇缮墒伤商赏晌上尚裳梢捎稍烧芍勺韶少哨邵绍奢赊蛇舌舍赦摄射慑涉社设砷申呻伸身深娠绅神沈审婶甚肾慎渗声生甥牲升绳省盛剩胜圣师失狮施湿诗尸虱十石拾时什食蚀实识史矢使屎驶始式示士世柿事拭誓逝势是嗜噬适仕侍释饰氏市恃室视试收手首守寿授售受瘦兽蔬枢梳殊抒输叔舒淑疏书赎孰熟薯暑曙署蜀黍鼠属术述树束戍竖墅庶数漱恕刷耍摔衰甩帅栓拴霜双爽谁水睡税吮瞬顺舜说硕朔烁斯撕嘶思私司丝死肆寺嗣四伺似饲巳松耸怂颂送宋讼诵搜艘擞嗽苏酥俗素速粟僳塑溯宿诉肃酸蒜算虽隋随绥髓碎岁穗遂隧祟孙损笋蓑梭唆缩琐索锁所塌他它她塔獭挞蹋踏胎苔抬台泰酞太态汰坍摊贪瘫滩坛檀痰潭谭谈坦毯袒碳探叹炭汤塘搪堂棠膛唐糖倘躺淌趟烫掏涛滔绦萄桃逃淘陶讨套特藤腾疼誊梯剔踢锑提题蹄啼体替嚏惕涕剃屉天添填田甜恬舔腆挑条迢眺跳贴铁帖厅听烃汀廷停亭庭艇通桐酮瞳同铜彤童桶捅筒统痛偷投头透凸秃突图徒途涂屠土吐兔湍团推颓腿蜕褪退吞屯臀拖托脱鸵陀驮驼椭妥拓唾挖哇蛙洼娃瓦袜歪外豌弯湾玩顽丸烷完碗挽晚皖惋宛婉万腕汪王亡枉网往旺望忘妄威巍微危韦违桅围唯惟为潍维苇萎委伟伪尾纬未蔚味畏胃喂魏位渭谓尉慰卫瘟温蚊文闻纹吻稳紊问嗡翁瓮挝蜗涡窝我斡卧握沃巫呜钨乌污诬屋无芜梧吾吴毋武五捂午舞伍侮坞戊雾晤物勿务悟误昔熙析西硒矽晰嘻吸锡牺稀息希悉膝夕惜熄烯溪汐犀檄袭席习媳喜铣洗系隙戏细瞎虾匣霞辖暇峡侠狭下厦夏吓掀锨先仙鲜纤咸贤衔舷闲涎弦嫌显险现献县腺馅羡宪陷限线相厢镶香箱襄湘乡翔祥详想响享项巷橡像向象萧硝霄削哮嚣销消宵淆晓小孝校肖啸笑效楔些歇蝎鞋协挟携邪斜胁谐写械卸蟹懈泄泻谢屑薪芯锌欣辛新忻心信衅星腥猩惺兴刑型形邢行醒幸杏性姓兄凶胸匈汹雄熊休修羞朽嗅锈秀袖绣墟戌需虚嘘须徐许蓄酗叙旭序畜恤絮婿绪续轩喧宣悬旋玄选癣眩绚靴薛学穴雪血勋熏循旬询寻驯巡殉汛训讯逊迅压押鸦鸭呀丫芽牙蚜崖衙涯雅哑亚讶焉咽阉烟淹盐严研蜒岩延言颜阎炎沿奄掩眼衍演艳堰燕厌砚雁唁彦焰宴谚验殃央鸯秧杨扬佯疡羊洋阳氧仰痒养样漾邀腰妖瑶摇尧遥窑谣姚咬舀药要耀椰噎耶爷野冶也页掖业叶曳腋夜液一壹医揖铱依伊衣颐夷遗移仪胰疑沂宜姨彝椅蚁倚已乙矣以艺抑易邑屹亿役臆逸肄疫亦裔意毅忆义益溢诣议谊译异翼翌绎茵荫因殷音阴姻吟银淫寅饮尹引隐印英樱婴鹰应缨莹萤营荧蝇迎赢盈影颖硬映哟拥佣臃痈庸雍踊蛹咏泳涌永恿勇用幽优悠忧尤由邮铀犹油游酉有友右佑釉诱又幼迂淤于盂榆虞愚舆余俞逾鱼愉渝渔隅予娱雨与屿禹宇语羽玉域芋郁吁遇喻峪御愈欲狱育誉浴寓裕预豫驭鸳渊冤元垣袁原援辕园员圆猿源缘远苑愿怨院曰约越跃钥岳粤月悦阅耘云郧匀陨允运蕴酝晕韵孕匝砸杂栽哉灾宰载再在咱攒暂赞赃脏葬遭糟凿藻枣早澡蚤躁噪造皂灶燥责择则泽贼怎增憎曾赠扎喳渣札轧铡闸眨栅榨咋乍炸诈摘斋宅窄债寨瞻毡詹粘沾盏斩辗崭展蘸栈占战站湛绽樟章彰漳张掌涨杖丈帐账仗胀瘴障招昭找沼赵照罩兆肇召遮折哲蛰辙者锗蔗这浙珍斟真甄砧臻贞针侦枕疹诊震振镇阵蒸挣睁征狰争怔整拯正政帧症郑证芝枝支吱蜘知肢脂汁之织职直植殖执值侄址指止趾只旨纸志挚掷至致置帜峙制智秩稚质炙痔滞治窒中盅忠钟衷终种肿重仲众舟周州洲诌粥轴肘帚咒皱宙昼骤珠株蛛朱猪诸诛逐竹烛煮拄瞩嘱主著柱助蛀贮铸筑住注祝驻抓爪拽专砖转撰赚篆桩庄装妆撞壮状椎锥追赘坠缀谆准捉拙卓桌琢茁酌啄着灼浊兹咨资姿滋淄孜紫仔籽滓子自渍字鬃棕踪宗综总纵邹走奏揍租足卒族祖诅阻组钻纂嘴醉最罪尊遵昨左佐柞做作坐座</span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- light --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;light&quot;</span>&gt;</span></span><br><span class="line">              同上</span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- regular --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;regular&quot;</span>&gt;</span></span><br><span class="line">              同上</span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- medium --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;medium&quot;</span>&gt;</span></span><br><span class="line">              同上</span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>下面三个div中的内容我就没复制进去了，和第一个一样就这些常用字符即可</p><p>4.运行font-spider，命令行cd进入该文件夹，运行下面命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">font-spider index.html</span><br></pre></td></tr></table></figure><p>运行完之后会生成<code>.font-spider</code>文件夹，里面保存的是字体包源文件，外面的字体文件是经过压缩后的，文件大小从之前的<code>8MB</code>压缩到现在的<code>900kb</code>，可以有效的解决现网字体包加载慢的问题</p><p><img src="https://cdn.jsdelivr.net/gh/pengpen1/blog-images/%E5%8E%8B%E7%BC%A9.png"></p>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 其他 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《弗里德曼的生活经济学》有感</title>
      <link href="/2024/08/27/%E5%85%B6%E4%BB%96-%E3%80%8A%E5%BC%97%E9%87%8C%E5%BE%B7%E6%9B%BC%E7%9A%84%E7%94%9F%E6%B4%BB%E7%BB%8F%E6%B5%8E%E5%AD%A6%E3%80%8B%E6%9C%89%E6%84%9F/"/>
      <url>/2024/08/27/%E5%85%B6%E4%BB%96-%E3%80%8A%E5%BC%97%E9%87%8C%E5%BE%B7%E6%9B%BC%E7%9A%84%E7%94%9F%E6%B4%BB%E7%BB%8F%E6%B5%8E%E5%AD%A6%E3%80%8B%E6%9C%89%E6%84%9F/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p><strong>概要：</strong>本文主要是记录下笔者拜读 《弗里德曼的生活经济学》后的感悟。</p><h3 id="核心与基础"><a href="#核心与基础" class="headerlink" title="核心与基础"></a>核心与基础</h3><p>书中核心观点是：经济学是<strong>理解人们行为的办法</strong>，它源自这样一种假设：人人不仅有自己的目标，而且还会主动选择正确的方式以实现这些目标。</p><p><strong>理性是经济学的基础</strong>，人们只要大部分的行为是理性的，那么就能通过过去以及现在去预测未来的行为。</p><h3 id="选择与价值"><a href="#选择与价值" class="headerlink" title="选择与价值"></a>选择与价值</h3><p>对于是否购买一个商品，我们要先了解自身所处的环境，清楚自身的经济实力，明确自己的需求，这样才知道该不该买。不同的收入对应着不同的消费，人的欲望是永远无法满足的，多权衡利弊，用有限的经济，有限的时间，做最有意义的事。</p><p>没有任何事物（包括生命）具有无限的价值。我们所拥有的东西永远不可能达到富足的程度，因此，我们必须在不同估价的事物之间进行交易—–包括人们的生命、爱卿和最不起眼的快感。比如我们熬夜刷视频，从概率意义上来说，这是在用一点点生命做代价与获得部分快乐做交易。</p><p>经济价值是由个人所体会出的对自己的价值，往往通过他们的行为展现出来。</p><p>所有人的行为都是经过选择的。</p><p>人们的经验源自于先入为主。</p><p>边际价值的递减规律具有普遍性，但并非总是如此，比如游戏中需要集齐碎片来兑换的武器，最后一片的边际价值就要比前几片高得多。在均衡条件下，价格等级（边际）价值。当我们购买商品时，若增加一个单位的商品的价值低于其价格，这意外着这笔钱在白白扔掉，例如：我很喜欢葡萄，但是买多了，当天吃不完，第二天就坏掉了，只能扔掉。</p><h3 id="价格理论"><a href="#价格理论" class="headerlink" title="价格理论"></a>价格理论</h3><p>经济学既是一种思考问题的方法，也是将这种方法应用于社会实践的一种思路。其核心思想就是价格理论——解释价格如何与经济活动相协调。之所以要搞明白该理论，第一个原因就是为了理解为什么你所生存的这个世界中，数以百万计的人齐心协力工作，却不必有人专门协调管理。第二个原因是，没有弄懂价格理论是经济学错误最常见的核心问题。</p><p>看待一个件事是否有利，要看全面，比如假设我们所在城市通过一条法律，要求全体房东在驱除租户前必须提前6个月通知，即使是短期租约也要照办。显然这条法律是有益于租客的，但是并不是说就对我们租客有利，如果是支付同样的租金，却能得到更好的优惠，那一定是有利的，但是因为法律改变了房东的经营成本，也改变了租约对租户的吸引力。供需双方的条件都发生了变化，你很难期望市场租金保持不变，我们就没理由期望该法律给租户带来什么利益，甚至有理由认为，这样做反而会伤害他们。</p><p>我们思考一个问题，没有宝石，我们照样可以很好的生活，可为什么宝石的价格比作为生命之源的水要昂贵得多？如果你的回答是物品的稀缺性而不是有用性决定了价格，那么请问，我用橘黄色默认写的签名要比张杰的亲笔签名稀缺的多，可为什么我的签名一文不值？</p><p>提供给消费者的产品价值、生产成本以及价格之前的关系可以回答上面这个问题：<strong>价格等于生产成本，也等于产品对使用者的价值，因此生产成本和产品价值必须相等</strong>。</p><p>边际价值、无差异曲线（帮助理解价值，表示当消费者获得同样的效用时的消费组合曲线，其斜率一般为负值）、预算线（帮助理解价格的含义，消费者在其他消费固定不变的情况下，将某种物品折算成另一物品的比率）、机会成本（为了得到或者生产该物品而必须放弃的其他东西，如住所的居住的机会成本就有税款、维修费、存款利息）</p><p>商品价格和数量是由需求曲线和供给曲线的交点决定的，需求量等于供给量时的价格。商品量（加上需求曲线和供给曲线）决定边际价值和边际成本。</p><h3 id="推论"><a href="#推论" class="headerlink" title="推论"></a>推论</h3><p>假如现在有两条消息，房价上涨10%，报纸价格减少10%，我们可以得出什么结论？有种观点为：在某种商品上花的钱越多，受该商品价格变化的影响越大，以此为依据，我们可以得出日子会更难过些。也可以换个问法：在今年购买与去年同样的东西要花多少钱？如果答案是增加开支10%，那似乎有理由认为，平均物价已经上涨了10%。</p><p>但是，上述观点并不十分准确，如果我的钱足够多，那么我可能会重新购买这些商品，但是实际上，价格发生的变化，让过去能带来最佳感受的商品现在不会产生同样的效果。如果食品价格上涨，计算机价格下降，那少买点食物，再买台计算机也许会让我感觉更不错。所以，上述观点（在今年购买与去年同样的东西要花多少钱）高估了通货膨胀率，忽略了消费者通过调整第二年的消费模式，从而适应新的价格模式而得到的收益。</p><h3 id="外贸"><a href="#外贸" class="headerlink" title="外贸"></a>外贸</h3><p>外贸的核心之一在于比较优势（生产成本相当更低），出口本国具有比较优势的商品，进口别国有比较优势的商品。</p><p>汇率是由什么决定的？供给量和需求量，当供给量少于需求量，就好升值，反之则贬值。</p><h3 id="套利"><a href="#套利" class="headerlink" title="套利"></a>套利</h3><p>套利是一种投资策略，通常指在某种实物资产或金融资产（在两个或更多个的市场）拥有两个价格的情况下，以较低的价格买进，较高的价格卖出，从而获取低风险的收益。</p><p>但是，有利大家都会图，慢慢趋于均衡，所以想通过套利赚取利益洞察力必不可少。</p><h3 id="均衡"><a href="#均衡" class="headerlink" title="均衡"></a>均衡</h3><p>为了更好的理解均衡，我们用现实生活中的案例来举例子，你是否想过，给自己带上“坏脾气”的面具，让自己显得脾气暴躁，这种策略带来的威慑力大部分时候可以让别人对你顺从，大部分时间，都可以享受着策略带来的好处。</p><p>如果没有人采用这种策略  ，这种策略就具有优势——也会导致越来越多的人采用这种“好斗型”策略，这样便引起更多的争吵，进而发展成争斗，最终的结果是风险将不断增大，收益逐渐下降，从而达到一种均衡：采取使用“好斗型”策略的一方遭受的损失正好与采取放弃策略的一方获得的收益对等。</p><p>又比如，如果社会上绝大多数人都是诚实的，人们就不会特别关心某个人的行为到底是否诚实，这样，采取欺骗方式的人将大获其利。越来越多的人采取欺骗策略时，别人的戒心也会越来越大，越来越警惕——如“中国人不骗中国人”。当两种做法得到同样报酬时，就将达到伪善与诚实之间的均衡。</p><p>至此，我想你已经理解了什么是均衡，为什么会形成均衡。所以知道为什么坏人是消灭不干净了的吧，当交往不是建立在自愿的基础上时，做坏人，其强悍性格会带来好处；当交往建立在自愿的基础上时，做好人会带来好处。</p><h3 id="未来"><a href="#未来" class="headerlink" title="未来"></a>未来</h3><p>每年甚至每天，钱的价值都在发生变化，思考一个问题，现在得到了两份合同，一份合同以年薪60万雇佣十年，一份，第一年给50w，随后的9年里，每年上涨2w。两方都是10年为期限，选择哪方好些呢？为了方便比较，我们都用今天的现值来比较，假设我今年以10%的利率借入1000美元，明年就要归还1100美元。相当于明年的1100美元等于今天1000元的现值，也就是1100&#x2F;1.1。以此类推，第n年的现值为￥&#x2F;(1.1的n-1次方)。</p><p>计算完后，第一份合同的现值为：4,055,414.29元，第二份合同的现值为：3,883,121.43元，所以从现值角度来说第一份更合适。</p><h3 id="现在"><a href="#现在" class="headerlink" title="现在"></a>现在</h3><p>我们或多或少都有过提前消费的经历，提前消费是通过将未来的消费能力转换为当前的消费来实现效用最大化的行为。借贷市场和利率在这种转换中起到核心作用，它们为效用转换定价，并通过时间价值理论解释了为什么人们会选择提前消费。最终，提前消费虽然能带来即时的效用，但未来的偿还和利息会削减未来的消费能力，形成了效用的相互转换与权衡。</p><p>当效用的损失与马上消费所得的收益达到平衡时，这种消费转换就会停止，停止的点即为平衡点。比如利率为10%，如果现在的1000块钱少于明年1100块钱的价值，那将收入留下一部分，即把消费从今年转到明年。这种交换的目的就是为了达到价值上的均衡。</p><h3 id="疑问"><a href="#疑问" class="headerlink" title="疑问"></a><strong>疑问</strong></h3><p><strong>1.为什么无差异曲线是曲线，预算线是直线？</strong></p><p>无差异曲线表示消费者在消费两个商品时，能带来相同效用的不同组合。无差异曲线是曲线，主要原因在于<strong>边际替代率递减（MRS）</strong>的原则：当消费者在保持相同效用水平的情况下，从一种商品转向另一种商品时，随着他拥有越来越多的第二种商品，愿意放弃的第一种商品的数量会减少。这意味着无差异曲线是向右下方倾斜并且凸向原点的。其斜率表示了边际替代率，即消费者在保持相同效用的情况下，在两种商品之间进行替代时的权衡关系。</p><p>预算线是直线，因为它表示两种商品的固定价格之间的替代关系。假设商品X和商品Y的价格分别为PX和PY，并且消费者的收入为I，那么预算线的方程式可以写成：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PX*X+PY*Y=I</span><br></pre></td></tr></table></figure><p>这是一个线性方程，斜率的意义：表示在不改变总支出的情况下，消费者每多消费一单位商品X，必须减少消费多少单位的商品Y。由于价格是固定的，斜率也是固定的，因此预算线是一条直线。</p><p><strong>2.如果你刚买了套房，一个月后价格上涨了，你是难受还是高兴？价格下降是难受是高兴？</strong></p><p>其实答案都是高兴，因为房子已经属于你了，无论是卖掉现有换更大的房（货币换房，应对降，预算线和无差异曲线的相切点往上移），还是更小的房（房换货币，应对涨，预算线和无差异曲线的相切点往上移），所形成的无差异曲线都在原来之上，当然新预算线也一定会通过没变化之前的相切点，也就是继续居住现有的房子。</p><p><strong>3.如何画出无差异曲线？</strong></p><p>地形图上的“等高线”是如何画出的？地形图上深蓝-&gt;蓝-&gt;浅蓝-&gt;白-&gt;绿-&gt;浅绿-&gt;黄-&gt;浅橙-&gt;橙-&gt;棕-&gt;紫代表不同的海拔，颜色类似则代表海拔类似。无差异曲线族就是“效用地形图”，一条无差异曲线对应处于“同一海拔”（同一效用水平）的所有商品组合。所以无差异曲线存在无数条，每种可能的商品组合都在某一条无差异曲线上，如果我们将所有这些曲线都画出来，那么图应该是纯黑一片了。</p><ul><li>在同一条无差异曲线上，所有点都代表相同的效用水平，消费者对这些组合的偏好程度是一样的。</li><li>越高位置的无差异曲线代表更高的效用水平，因此，消费者会更喜欢位于更高无差异曲线上的任意组合。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/pengpen1/blog-images/20240902094035.png"></p><p><strong>4.为什么边际价值曲线和需求曲线一模一样？各自代表了什么含义？</strong></p><p>因为x轴都是数量，y轴都是价格，所以看着一模一样</p><p>需求曲线是一条表示人们在某一价格时所购商品数量的曲线</p><p>边际价值曲线表示的是商品价值随着商品数量增加的变化曲线</p><p><strong>5.为什么现值的计算是除以（1+n）,而不是乘以（1-n）?</strong></p><p><img src="https://cdn.jsdelivr.net/gh/pengpen1/blog-images/20240912162354.png"></p><p>现值是反映未来钱在今天的价值，要考虑了利息的复利效应。</p><p><strong>6.如何将经济学应用到生活中？</strong></p><p>如果学习到的知识不能应用到生活，那就毫无意义。</p><p>我们上述讨论经济学时，都是以相当静止的世界来举例，没有考虑时间因素以及经济因素，不用担心消费者会节约钱以防不测时的情况。</p><p>将经济学应用到生活中，可以帮助我们预测和计算一些消费结果。比如，我有5000块的闲钱，想买一辆自行车，又想买几个喜欢的游戏，此时就可以在脑海中，形成无差异曲线，列出等效组合并进行比较，例如：如果4000预算给自行车，1000预算给游戏，我会感觉怎么样。再想其他的等效组合，然后互相比较。最后，确定了如何选择之后，就可以去消费啦。</p><p>又比如，我有100块钱的零花钱，在考虑是否买苹果，一个苹果一块钱。此时脑海中就可以形成边际价值曲线。如果这100块钱我都不买苹果，拿去买其他零食，我会感觉怎么样，如果买一个苹果呢？如果买两个呢？将这些商品组合进行比较，最后得到让我们感觉最好的消费组合。</p><p>个人消费着除了持续的收入之外还拥有几种金融工具（包括内部贴现率、效用函数、存款的利率、贷款的利率）帮助我们组成一个可以满足一生消费的模式，这哥模式可以使效用现值最大化。不断做出消费调整，获得比成本更多的效用，对于那些开始高收入后来低收入的人（如职业运动员、程序员等），他们应该先存钱后消费，或先按利息借出，后享受本金和利息。</p><p>当然上述所有的一切都是从理性的角度来分析的，如果你的人生观是尽量享受今天的生活，不管将来如何，都会减少储蓄的增长率，甚至是增加借贷。</p><h3 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h3><p>地图和方向会使我们活得更透彻。这里的地图可以理解为规则，方向可以理解为你想成为什么样的人，你的目标的什么。</p><p>了解经济运转规则，让我们知道世界经济是如何运作的，不用拘于眼前的柴米油盐，人生的方向，指引我们前行，不在迷茫。</p>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 其他 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自行车维修日记</title>
      <link href="/2024/08/21/%E5%85%B6%E4%BB%96-%E8%87%AA%E8%A1%8C%E8%BD%A6%E7%BB%B4%E4%BF%AE%E6%97%A5%E8%AE%B0/"/>
      <url>/2024/08/21/%E5%85%B6%E4%BB%96-%E8%87%AA%E8%A1%8C%E8%BD%A6%E7%BB%B4%E4%BF%AE%E6%97%A5%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p><strong>概要：</strong> 本文主要是记录一下我自行车出故障以及如何解决的。</p><h2 id="一、维修日记"><a href="#一、维修日记" class="headerlink" title="一、维修日记"></a>一、维修日记</h2><h3 id="爆胎"><a href="#爆胎" class="headerlink" title="爆胎"></a>爆胎</h3><p>公路车一个月不爆个几次胎，都不叫公路车了，作为一个骑行爱好者，补胎换胎是最基本的技能。笔者今年端午骑车去西岭雪山，就爆了两次胎。</p><img src="https://cdn.jsdelivr.net/gh/pengpen1/blog-images/%E8%BD%A61.jpg"  width="100%" height="600" style="object-fit: cover;" /><p><strong>修复步骤</strong></p><p>1.先把档位弄到最低档，减少链条张力（针对后轮出问题），如果是一个人的话，就将自行车倒放，有同伴的话，让同伴帮忙扶着</p><p>2.如果是快拆轮组直接，将将出问题的轮子卸下来，用卸胎棒将外胎卸下，随后是内胎，然后检查是什么原因引起的爆胎，玻璃、铁丝、细石都有可能，仔细检查并清理干净</p><p><img src="https://cdn.jsdelivr.net/gh/pengpen1/blog-images/%E7%BB%B4%E4%BF%AE1.jpg"></p><p>3.取出新内胎，冲一点点气，刚好鼓起来就行，然后外胎装好，并卡到边上，一边在里，一边在外，然后将内胎从洞口穿过，从外胎卡外面那边将内胎塞进去，并将外胎也塞进去，可能有点绕，装外胎这是最难的，别着急，一点一点的捋，如果发现太紧了，就从洞口那开始向上慢慢挤压。安装外胎要注意方向，记不住就对比前轮外胎，或者提前拍照。大气别直接一口气打完，打个40或者50的胎压先停下，检查内外胎有没有异样，之后再继续打气</p><img src="https://cdn.jsdelivr.net/gh/pengpen1/blog-images/%E7%BB%B4%E4%BF%AE2.jpg"  width="100%" height="600" style="object-fit: cover;" /><p>4.安装好外胎后，将轮组归位，检查检查变速，外套有没有装反，打气口螺帽有没有拧上，都没问题，你就成功换好胎啦</p><h3 id="待更新…"><a href="#待更新…" class="headerlink" title="待更新…"></a>待更新…</h3><h2 id="二、其他知识"><a href="#二、其他知识" class="headerlink" title="二、其他知识"></a>二、其他知识</h2><h3 id="如何选择内胎"><a href="#如何选择内胎" class="headerlink" title="如何选择内胎"></a>如何选择内胎</h3><p>1.确定型号，现在公路车一般都是法嘴，标准的轮圈型号都是700c，车圈宽度25到32不等，在法制体系中，第一个数字是标称直径，单位毫米，C是法国出的一个规格，简单的可以理解成为mm这个单位</p><p>2.例如：700*25&#x2F;32c，表示这个内胎是适合直径为700毫米，宽度25~32毫米的车圈</p><h3 id="长途骑行的准备"><a href="#长途骑行的准备" class="headerlink" title="长途骑行的准备"></a>长途骑行的准备</h3><p>骑长途最主要的是做好规划，对你每天骑行距离有个清晰的认知，提前定好酒店，预估可能出现的坏情况，比如下雨耽搁了几小时还能骑到规定地点吗？</p><p>做好规划后，我们带上，换洗衣服，备用内胎，便携打气筒，撬胎棒，防晒霜这些就可以出发啦</p><h2 id="三、结语"><a href="#三、结语" class="headerlink" title="三、结语"></a>三、结语</h2><p>对于每一个碳基生命来说，我们的资源，我们的时间都是有限的，我们生活的意义不是结婚生子，传宗接代，更不是买房买车，不要束缚自己，这些都是工具，生活的意义是需要你自己来定义，需要你尽可能体验盛大的生命后去定义。我们要做的就是，用有限的资源和时间，尽可能多的去享受生活，去体验盛大的生命！</p>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 其他 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>主机维修日记</title>
      <link href="/2024/08/14/%E5%85%B6%E4%BB%96-%E4%B8%BB%E6%9C%BA%E7%BB%B4%E4%BF%AE%E6%97%A5%E8%AE%B0/"/>
      <url>/2024/08/14/%E5%85%B6%E4%BB%96-%E4%B8%BB%E6%9C%BA%E7%BB%B4%E4%BF%AE%E6%97%A5%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p><strong>概要：</strong>本文主要是记录一下我电脑出的故障以及如何解决的。</p><h2 id="一、维修日记"><a href="#一、维修日记" class="headerlink" title="一、维修日记"></a>一、维修日记</h2><h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>我是在一次很正常的重启中突然出现这个问题的，主机亮灯，显示器黑屏(有信号连接，可以听到开启动画声音)，键鼠正常亮灯，主板故障灯中的AVG亮了会儿白灯。</p><p>时间：2024&#x2F;8&#x2F;11</p><img src="https://cdn.jsdelivr.net/gh/pengpen1/blog-images/AVG%E7%81%AF.jpg"  width="100%" height="600" style="object-fit: cover;" /><h3 id="主机配置"><a href="#主机配置" class="headerlink" title="主机配置"></a>主机配置</h3><ul><li>cpu：i5 12400F</li><li>主板：微星PRO H610M-E D4</li><li>显卡：影驰 RTX4060金属大师OC 8C</li><li>电源：先马 500w</li><li>内存：宇瞻 3200HZ *2 (共16G)</li></ul><h3 id="操作日志"><a href="#操作日志" class="headerlink" title="操作日志"></a>操作日志</h3><p><strong>day1</strong></p><p>1.尝试重启了几次，无效果，处于黑屏状态，但是可以听到开机启动的声音</p><p>2.插拔了显卡以及显示器电源线，把机械硬盘下了，还是处于黑屏状态</p><p>3.取下显卡，内存条，用酒精擦拭接口后重新安装，仍然处于黑屏状态</p><p><strong>day2</strong></p><p>1.开机时，按Del键，成功进入BIOS界面，随后按F10保存设置，然后回车进行重启，仍然处于黑屏状态，同样可以听到开机启动的声音</p><p><img src="https://cdn.jsdelivr.net/gh/pengpen1/blog-images/BIOS.jpg"></p><p><strong>day3</strong></p><p>1.交换单内存开机，其中一个(sn尾号0775)位于右侧插槽时主板自检未通过，DRAM灯显示黄灯，并且常亮</p><p>2.使用sn尾号为0776的内存单独插入右侧卡槽，主板自检未通过，当前判断为右层侧卡槽有问题</p><p>3.两个内存都插入插入，DRAM依然常亮，可能是我把插槽搞坏了或者插拔字数过多导致主板开启了硬件保护机制，因为两个内存不能同时出问题，所以出问题的在于插槽或者准备或者链接线</p><img src="https://cdn.jsdelivr.net/gh/pengpen1/blog-images/DRAM%E7%81%AF.jpg"  width="100%" height="600" style="object-fit: cover;" /><p><strong>day4</strong></p><p>1.新购入了1.4版本的DP线，待测试</p><p><strong>day5</strong></p><p>1.将主机和显卡分开（因为拆除了显卡固定挡板，分开防止金手指出问题），包装好带去维修店</p><img src="https://cdn.jsdelivr.net/gh/pengpen1/blog-images/%E4%B8%BB%E6%9C%BA.jpg"  width="100%" height="600" style="object-fit: cover;" /><p>2.到店后，老板先是检查了电源线接口是否插好，检查结果为，内存盘的电源线没插紧，这就解释了day3出的问题</p><img src="https://cdn.jsdelivr.net/gh/pengpen1/blog-images/%E7%BA%BF.jpg"  width="100%" height="600" style="object-fit: cover;" /><p>3.取下原本的固态硬盘，将一张新的固态硬盘插入，并尝试开机，这一步是为了排查固态硬盘是否有问题以及显卡是否和驱动有兼容问题，如果新固态能正常开机，且安装完驱动后系统没出现异常，则证明为驱动兼容问题，反之则是显卡本身出了问题。幸好，换了固态后的测试结果为正常运行。但是这里并不能排查原本的固态是否有问题，于是用检测U盘检测坏道后进行重装系统，再次开机，正常亮屏。</p><p><strong>总结</strong></p><p>1.主板电源线松动导致主板内存自检未通过，DRAM灯显示黄灯</p><p>2.显卡和驱动存在兼容问题，导致开机黑屏</p><h2 id="二、其他知识"><a href="#二、其他知识" class="headerlink" title="二、其他知识"></a>二、其他知识</h2><h3 id="如何修复金手指氧化"><a href="#如何修复金手指氧化" class="headerlink" title="如何修复金手指氧化"></a>如何修复金手指氧化</h3><p>1.可以用橡皮擦，但是别把电容搞坏了</p><p>2.不要用75%浓度的酒精擦拭金手指，因为含有很多水，99%浓度的可行</p><h3 id="DP1-2和DP1-4区别"><a href="#DP1-2和DP1-4区别" class="headerlink" title="DP1.2和DP1.4区别"></a>DP1.2和DP1.4区别</h3><p>1、输出分辨率不同：DP线1.4支持4K，60-240H在，最高支持8K，60Hz；DP线1.2最高支持4K，60-100Hz。</p><p>2、带宽不同：DP线1.4最高支持带宽是32.4gbps；DP线1.2最高支持带宽是21.6gbps。</p><p>3、技术不同：DP线1.4支持10 bit图像传送，HDR动态图像传送，能够更好的反映出真实环境的视觉效果。支持开启G-SYNC和Freeync技术，能够解决因高频率刷新而产生的撕裂和卡断问题。</p><h3 id="开机不停重启（不显示界面）"><a href="#开机不停重启（不显示界面）" class="headerlink" title="开机不停重启（不显示界面）"></a>开机不停重启（不显示界面）</h3><p>1、内存条松动（取下来擦金手指重新插上）</p><p>2、主板坏了需要更换（这个直接排除法就是找一块同样的主板换上看是否能开机，一般情况下自己都只有一台电脑，所以需要把内存条及显卡等硬件换到另外一台电脑上看是否能开机）</p><p>3、显卡问题（取下显卡擦金手指，把显卡换到另外一台电脑上看是否能正常开机，换一块新显卡到老电脑上看是否能开机）</p><p>4、电源问题（拿一个新电源看是否能正常开机）<br>这里提一下，遇到这种不显示的情况肯定不是硬盘问题！硬盘问题是能显示可以进bios的。<br>99%也不是CPU问题，一般CPU不会坏，只有性能不够用了。除非你自己超频超坏的，正常用突然无法开机是绝大多数不是CPU坏了。不可能是电池没电了。电池没电了是无法记忆BIOS设置，至少是能显示的。</p><h3 id="社工库"><a href="#社工库" class="headerlink" title="社工库"></a>社工库</h3><p>与本文无关，只此记录一二，AISGK、落日社工库、星盾、Helloworld 花花社工库。</p><h3 id="网口指示灯"><a href="#网口指示灯" class="headerlink" title="网口指示灯"></a>网口指示灯</h3><p>网口指示灯可以告诉我们：网线是否已连接 &#x2F; 该WAN和LAN端口上是否有数据活动 &#x2F; 网口是否在工作 &#x2F; 此时网络连接的速度 &#x2F; 是否有东西影响了网络连接的速度……</p><img src="https://cdn.jsdelivr.net/gh/pengpen1/blog-images/%E7%BD%91%E5%8D%A1%E6%8F%90%E7%A4%BA%E7%81%AF.jpg"  width="100%" height="600" style="object-fit: cover;" /><p>1.无光：</p><p>在网卡或路由器网口上看到无光，意义是不言自明的，没有建立起网络连接。要么是网线没有插好，水晶头断线或网线断线，要么是端口没有电。</p><p>在这种情况下，你应该尝试用第二条可以正常使用的网线来测试连接，观察网络端口上的灯的颜色是否发生变化。</p><p>如果这不起作用，那么可能是主板&#x2F;路由器的问题，但在此之前，请重新启动一次计算机或者路由器再试试。</p><p>注意：有些主板在速度低于10Mbps时不显示灯光；如果你的主板是这种情况，那么你的以太网端口就没有问题了。</p><p>2.常亮灯：</p><p>网口上的实心灯表示电缆已正确插入，并与计算机建立了连接，可以进行通信。</p><p>3.闪烁的灯：</p><p>如果你的以太网端口上的灯闪烁，表明数据正在通过网线传输。如上图，左侧的黄灯就一直在闪烁。</p><p>当有一个活跃的连接，并且正在发送或接收数据包时，该灯会闪烁。因此，如果你看到灯在闪烁，这是正常的，表明网络连接良好。</p><p>4.不同颜色灯的含义（不同主板或有不同需要）：</p><p>绿色：实际上是网口上最常见的颜色。它表示连接良好，并且数据包正在以平均速度传输或接收。具体速率可能因品牌而异，但通常在快速以太网的10&#x2F;100Mbps范围内或千兆以太网的100Mbps范围内。</p><p>黄色：这种颜色出现在网口上，表示连接速度较慢。连接仍然建立，数据包正在以比可能的速度更慢的速度传输或接收。如果您的主板上是支持千兆的网卡，但路由器仅支持100Mbps，则LED灯将变为黄色而不是绿色。</p><p>橙色：这种颜色出现在真正高级的以太网口上，用于指示1到10Gbps的连接。这是最高可能的连接速度，仅在最昂贵的主板网络设备上可用。</p><p>红色：以太网口上的红色灯表示没有连接。当连接在连接的设备之间暂停或禁用，或者网络连接存在其他问题时，就会发生这种情况。在任何情况下，如果您看到红色灯，请运行Windows故障排除程序以修复此错误，重新启动计算机，并检查问题是否仍然存在。</p><p><img src="https://cdn.jsdelivr.net/gh/pengpen1/blog-images/20240814103114.png"></p><p>例如：上图为微星主板，左侧黄灯闪烁，橙灯常亮，我们可以得出，当前链接正常，为千兆网口</p><h3 id="计算机组成"><a href="#计算机组成" class="headerlink" title="计算机组成"></a>计算机组成</h3><p>计算机是由<strong>硬件系统（hardware system）</strong>和<strong>软件系统（software system）</strong>两部分组成的。</p><p><strong>硬件单元分类</strong>：传统计算机系统的硬件单元通常包括以下部分：</p><ul><li><strong>输入单元</strong>：用于接收用户输入的数据和指令（如键盘、鼠标等）。</li><li><strong>输出单元</strong>：用于向用户显示处理结果（如显示器、打印机等）。</li><li><strong>算术逻辑单元（ALU）</strong>：执行基本的算术运算和逻辑运算。</li><li><strong>控制单元（CU）</strong>：负责解释指令并控制其他单元的操作。</li><li><strong>记忆单元（存储器）</strong>：存储数据和程序（包括RAM、ROM等）。</li></ul><p>算术逻辑单元（ALU）和控制单元（CU）组成了CPU（Central Processing Unit，CPU），是计算机的核心部件，负责执行指令和处理数据。</p><h3 id="硬件系统"><a href="#硬件系统" class="headerlink" title="硬件系统"></a>硬件系统</h3><p><strong>电源</strong></p><p>电源（Power Supply Unit，PSU）是电脑中不可或缺的组件，其主要功能是将交流电（通常是220V）转换为计算机所需的各种直流电压，如5V、12V、3.3V等。这些电压为主板、CPU、显卡、硬盘和其他硬件设备提供电力。电源的质量和性能直接影响其他设备的工作稳定性。如果电源输出的电压不稳定或功率不足，可能会导致设备故障、性能下降，甚至硬件损坏，从而影响整机的稳定性。</p><p><strong>主板</strong><br>主板是电脑中各个部件工作的基础平台，它将电脑的各个部件紧密连接在一起，通过主板进行数据传输和通信。主板的工作稳定性对于整个电脑系统的稳定性至关重要。</p><p><strong>CPU</strong><br>CPU即中央处理器，是计算机的运算核心和控制核心。它负责解释计算机指令并处理软件中的数据。CPU由运算器、控制器、寄存器、高速缓存以及数据总线、控制总线和状态总线组成。CPU的性能是决定电脑整体性能的关键因素，因此很多用户以CPU的性能来评估电脑的档次。</p><p><strong>内存</strong><br>内存，又称内部存储器或随机存储器（RAM），主要用于临时存储当前运行的程序和数据。内存的种类包括DDR、DDR2、DDR3、DDR4等，不同的内存类型有着不同的性能和技术规格。内存的特点是速度快、体积小，有电时能够存储数据，但在断电后会自动清空。</p><p><strong>硬盘</strong><br>硬盘是电脑的外部存储器，负责长期存储数据。机械硬盘由金属或玻璃磁片制成，能够在开机和关机状态下保持数据。硬盘的容量已经达到TB级，常见尺寸有3.5英寸、2.5英寸等，接口包括IDE、SATA、SCSI等。固态硬盘（SSD）采用固态电子存储芯片，具有更快的读写速度。移动硬盘则强调便携性，通常基于标准硬盘或微型硬盘，使用USB、IEEE1394等接口进行数据传输。</p><p><strong>声卡</strong><br>声卡是多媒体电脑的重要硬件设备，它将数字音频信号转换为模拟信号，并输出到音箱或耳机上。</p><p><strong>显卡</strong><br>显卡负责处理计算机的图形和图像数据，将其转换为显示器可以显示的信号。显卡与显示器合作输出图形和文字，是“人机对话”的重要设备之一。</p><p><strong>网卡</strong><br>网卡是用于连接计算机与局域网或互联网的接口设备，负责实现数据链路层的物理连接、帧的发送与接收、数据编码和解码等功能。网卡在整合型主板中常常与声卡、显卡一起集成。</p><p><strong>调制解调器</strong><br>调制解调器（Modem）将数字信号转换为电话线传输的模拟信号，常用于通过电话线上网。随着宽带技术的普及，内置式调制解调器已经逐渐被淘汰。</p><p><strong>光驱</strong><br>光驱用于读取和写入光盘内容，包括CD-ROM、DVD-ROM、COMBO和DVD-RAM等类型。光驱的速度和功能随着技术的进步不断提升。</p><p><strong>显示器</strong><br>显示器是电脑的重要输出设备，将电脑处理后的结果显示出来。显示器的种类包括CRT、LCD、LED等，接口有VGA、DVI、HDMI、DP等。</p><p><strong>键盘</strong><br>键盘是主要的输入设备，用于输入文字、数字和控制命令。常见的键盘类型包括有线和无线键盘，通常有104或105个键。</p><p><strong>鼠标</strong><br>鼠标是常见的电脑输入设备，用户可以通过移动鼠标来控制屏幕上的指针。鼠标接口包括PS&#x2F;2和USB两种，主要分为光电鼠标和机械鼠标（已被淘汰）。</p><p><strong>音响</strong><br>音响通过音频线连接到电脑或功率放大器，将音频信号转换为声波输出。音箱的配置有2.0、2.1、5.1、7.1等不同的音频系统。</p><h3 id="系统软件"><a href="#系统软件" class="headerlink" title="系统软件"></a>系统软件</h3><p>系统软件由一组用于控制计算机系统和管理其资源的程序组成，其主要功能包括启动计算机、存储、加载和执行应用程序，对文件进行排序和检索，将程序语言翻译成机器语言等。它为应用软件和用户提供了一个与硬件交互的接口，是用户与计算机的桥梁。</p><p><strong>1.操作系统（OS）</strong></p><p><strong>操作系统的核心作用</strong>：<br>操作系统是管理、控制和监督计算机软硬件资源协调运行的程序系统。它直接运行在计算机硬件上，是系统软件的核心。操作系统的主要目的是方便用户使用计算机，并有效管理计算机资源。</p><p><strong>操作系统的功能模块</strong>：</p><ol><li><strong>处理器管理</strong>：负责CPU时间的分配，特别是在多任务环境中，使多个程序能够同时运行。</li><li><strong>作业管理</strong>：提供用户界面，调度和控制所有进入系统的作业，以便高效地利用系统资源。</li><li><strong>存储器管理</strong>：为程序及其数据分配存储空间，确保它们不互相干扰。</li><li><strong>设备管理</strong>：管理计算机外围设备的分配和使用，处理设备请求（如中断）。</li><li><strong>文件管理</strong>：负责文件的存储、检索、共享和保护，提供文件操作的便利。</li></ol><p><strong>操作系统的类型</strong>：</p><ul><li><strong>分批处理操作系统</strong>：在这种系统中，作业以批次形式提交，系统依次处理。</li><li><strong>分时操作系统</strong>：允许多个用户通过终端同时使用计算机，每个用户享有计算机处理时间的片段。</li><li><strong>实时操作系统</strong>：用于对时间敏感的应用程序，要求快速处理和响应外部事件。</li><li><strong>单用户和多用户操作系统</strong>：根据同时管理用户数的多少分类。</li><li><strong>网络操作系统</strong>：适用于计算机网络环境的操作系统。</li></ul><p><strong>现代操作系统实例：</strong></p><ul><li><strong>Microsoft Windows</strong>：从单用户单任务的DOS发展到如今的多用户多任务系统，如Windows XP、Windows 7、Windows 10等，是当前广泛使用的操作系统。</li><li><strong>Linux</strong>：开源操作系统，程序员可以自由修改，因其灵活性和可定制性，成为Windows的有力竞争对手。</li></ul><p><strong>2. 语言处理系统（翻译程序）</strong></p><p><strong>计算机语言</strong>：<br>人和计算机交流信息使用的语言称为计算机语言，通常分为机器语言、汇编语言和高级语言三类。机器语言由二进制代码组成，是计算机能够直接理解的语言，而汇编语言和高级语言更接近人类的自然语言，但需要翻译程序将其转换为机器语言以便计算机执行。</p><p><strong>翻译程序</strong>：<br>翻译程序是用于将高级语言源代码转换为计算机可执行代码的工具，主要分为两类：<strong>解释程序</strong>和<strong>编译程序</strong>。</p><ul><li><strong>解释</strong>：解释程序逐条翻译和执行源代码，如早期的BASIC语言。解释程序不会生成可执行文件，因此每次执行源代码都需要重新解释，运行速度较慢。</li><li><strong>编译</strong>：编译程序将源代码翻译成目标代码（通常为.OBJ文件），然后使用连接程序生成可执行文件（通常为.EXE文件）。编译后的程序可以反复执行，运行速度快，常见的高级语言如C、FORTRAN、PASCAL等都使用编译程序。</li></ul><p><strong>3. 服务程序</strong></p><p><strong>服务程序</strong>：<br>服务程序提供常用的服务性功能，帮助用户开发程序和使用计算机。典型的服务程序包括诊断程序、调试程序和编辑程序等，这些工具使得程序开发和系统维护更加便利。</p><p><strong>4. 数据库管理系统（DBMS）</strong><br>数据库是按照一定关系存储的数据集合，可以为多种应用共享。数据库管理系统（DBMS）是用于建立、管理和操作数据库的系统软件。DBMS的主要功能包括创建、删除、维护数据库，并对其中的数据进行检索、修改、统计、排序和合并等操作。DBMS极大地提高了数据管理和操作的效率，是现代计算机应用中不可或缺的部分。</p><p><strong>5.应用软件</strong><br>应用软件是为了解决各类实际问题而设计的程序系统。根据其服务对象，可以分为<strong>通用软件</strong>和<strong>专用软件</strong>两类。通用软件满足广泛用户的共性需求，如文字处理软件、电子表格软件等；专用软件则针对特定行业或任务，如医疗管理系统、财务软件等。</p><h3 id="注册表"><a href="#注册表" class="headerlink" title="注册表"></a>注册表</h3><p>我们重装系统一般都是只删除C盘中的内容，D盘里面的软件文件之类的都会保留。在此基础上，重装系统后，我们的软件图标这些都会消失不见，这是因为注册表的丢失。</p><p>大部分Windows应用程序在安装时，会将一些重要的信息写入系统的注册表中，比如软件的安装路径、配置文件位置、依赖的库等。这些信息保存在C盘的注册表里。当重装系统时，注册表会被重置，原来写入注册表的信息也就丢失了。没有这些信息，系统无法识别和启动这些已经安装在D盘的软件。</p><p>解决办法，重装软件，有些不依赖注册表的可以不用重装。</p>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 其他 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BFC解决弹性盒子宽度响应式问题</title>
      <link href="/2024/08/06/css-BFC%E8%A7%A3%E5%86%B3%E5%BC%B9%E6%80%A7%E7%9B%92%E5%AD%90%E5%AE%BD%E5%BA%A6%E5%93%8D%E5%BA%94%E5%BC%8F%E9%97%AE%E9%A2%98/"/>
      <url>/2024/08/06/css-BFC%E8%A7%A3%E5%86%B3%E5%BC%B9%E6%80%A7%E7%9B%92%E5%AD%90%E5%AE%BD%E5%BA%A6%E5%93%8D%E5%BA%94%E5%BC%8F%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p><strong>概要：</strong>我们在用弹性盒子布局的时候，可能会遇到宽度并不响应的问题，本篇文章就是探讨这个问题的解决方案。</p><h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>下面是初始状态，下面黑色区域是对照组</p><p><img src="https://cdn.jsdelivr.net/gh/pengpen1/blog-images/20240806111146.png"></p><p>当我折叠并打开一次侧边菜单后，子项目2，出现了意外变化，宽度并没有响应式更新：<br><img src="https://cdn.jsdelivr.net/gh/pengpen1/blog-images/20240806111416.png"></p><p> <img src="https://cdn.jsdelivr.net/gh/pengpen1/blog-images/20240806111534.png"></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.content</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>; <span class="comment">/* 确保父容器宽度为100% */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.system-wrap</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">360px</span>;</span><br><span class="line">  <span class="attribute">min-width</span>: <span class="number">360px</span>; <span class="comment">/* 保持最小宽度 */</span></span><br><span class="line">  <span class="attribute">max-width</span>: <span class="number">360px</span>; <span class="comment">/* 保持最大宽度 */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.pagetable-wrap</span> &#123;</span><br><span class="line">  <span class="attribute">flex</span>: <span class="number">1</span>;</span><br><span class="line">  <span class="attribute">margin-left</span>: <span class="number">12px</span>;</span><br><span class="line">  <span class="attribute">transition</span>: width <span class="number">0.3s</span>; <span class="comment">/* 添加过渡效果，确保宽度变化时有平滑过渡 */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面是原始css代码，这代码用在对照组上面是正常响应式的，所以问题应该出在子项目2里面的内容里，但是并未找出问题所在，猜测是浏览器没正确刷新布局的原因。</p><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>给子项目2，上述代码中的<code>.pagetable-wrap</code>增加<code>overflow: hidden</code><strong>触发触发 BFC（块级格式化上下文）</strong>就可以解决宽度没有响应式更新的问题了，触发 BFC，这意味着该元素将创建一个独立的布局区域，其内部的元素布局不会影响外部的元素和布局。</p><h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><p>利用BFC我们可以解决一些意料之外的宽度响应式更新问题。</p>]]></content>
      
      
      <categories>
          
          <category> css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>请求中的MIME类型</title>
      <link href="/2024/07/25/%E5%85%B6%E4%BB%96-%E8%AF%B7%E6%B1%82%E4%B8%AD%E7%9A%84MIME%E7%B1%BB%E5%9E%8B/"/>
      <url>/2024/07/25/%E5%85%B6%E4%BB%96-%E8%AF%B7%E6%B1%82%E4%B8%AD%E7%9A%84MIME%E7%B1%BB%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p><strong>概要：</strong>在这篇记录中，我们将探讨一下请求中的MIME类型。</p><p>大家在平常与后端同事的联调过程中一定遇到过明明接口一字不差，类似也是一样的，可就是跑不通，这种情况通常我们会先检查传参是否缺少必填项或者格式问题，然后检查网络和代理，如果还是有问题，我们可能就会陷入僵局，比如下面这种情况：</p><p>本地环境（代理正确）</p><p><img src="https://cdn.jsdelivr.net/gh/pengpen1/blog-images/20240725150808.png"></p><p>服务器直连</p><p><img src="https://cdn.jsdelivr.net/gh/pengpen1/blog-images/20240725150733.png"></p><p>那么问题出在哪呢？其实是因为请求载体类型有问题，后端同事没有用axios默认的JSON格式为请求载体类型，而是用的<code>application/x-www-form-urlencoded</code>类型，这种类型常用于 HTML 表单数据提交，数据被编码成 <code>key1=value1&amp;key2=value2</code> 的格式，特殊字符被 URL 编码，比如空格变成 <code>+</code> 号，特殊字符变成 <code>%xx</code> 格式。</p><p><img src="https://cdn.jsdelivr.net/gh/pengpen1/blog-images/20240725151146.png"></p><p>知道了上面那个问题的原因后，我们再一起了解一下其他的MIME类型吧。</p><ol><li><code>text/plain</code></li></ol><ul><li><strong>用途</strong>：用于纯文本数据，没有特殊格式或编码。</li><li><strong>示例</strong>：文件扩展名 <code>.txt</code></li></ul><ol start="2"><li><code>text/html</code></li></ol><ul><li><strong>用途</strong>：用于 HTML 文档。</li><li><strong>示例</strong>：文件扩展名 <code>.html</code></li></ul><ol start="3"><li><code>application/json</code></li></ol><ul><li><strong>用途</strong>：用于 JSON 格式的数据，通常用于 AJAX 请求和响应。</li><li><strong>示例</strong>：文件扩展名 <code>.json</code></li></ul><ol start="4"><li><code>application/xml</code></li></ol><ul><li><strong>用途</strong>：用于 XML 数据。</li><li><strong>示例</strong>：文件扩展名 <code>.xml</code></li></ul><ol start="5"><li><code>application/javascript</code></li></ol><ul><li><strong>用途</strong>：用于 JavaScript 代码。</li><li><strong>示例</strong>：文件扩展名 <code>.js</code></li></ul><ol start="6"><li><code>text/css</code></li></ol><ul><li><strong>用途</strong>：用于 CSS 样式表。</li><li><strong>示例</strong>：文件扩展名 <code>.css</code></li></ul><ol start="7"><li><code>application/octet-stream</code></li></ol><ul><li><strong>用途</strong>：用于二进制数据，可以用于任意文件下载。</li><li><strong>示例</strong>：通常用于文件下载，扩展名不限。</li></ul><ol start="8"><li><code>multipart/form-data</code></li></ol><ul><li><strong>用途</strong>：用于提交包含文件上传的表单数据。与<code>application/x-www-form-urlencoded</code>的区别是该表单数据会被分割成多个部分，每部分都有自己的 Content-Disposition 和 Content-Type，每个部分包含一个表单字段的数据，文件数据可以直接作为其中的一部分发送。</li><li><strong>示例</strong>：在 HTML 表单中使用 <code>enctype=&quot;multipart/form-data&quot;</code>。</li></ul><ol start="9"><li><code>image/jpeg</code>, <code>image/png</code>, <code>image/gif</code></li></ol><ul><li><strong>用途</strong>：用于图像数据。</li><li><strong>示例</strong>：文件扩展名 <code>.jpeg</code>、<code>.jpg</code>、<code>.png</code>、<code>.gif</code></li></ul><ol start="10"><li><code>audio/mpeg</code>, <code>audio/ogg</code></li></ol><ul><li><strong>用途</strong>：用于音频文件。</li><li><strong>示例</strong>：文件扩展名 <code>.mp3</code>、<code>.ogg</code></li></ul><ol start="11"><li><code>video/mp4</code>, <code>video/ogg</code></li></ol><ul><li><strong>用途</strong>：用于视频文件。</li><li><strong>示例</strong>：文件扩展名 <code>.mp4</code>、<code>.ogv</code></li></ul><ol start="12"><li><code>application/pdf</code></li></ol><ul><li><strong>用途</strong>：用于 PDF 文档。</li><li><strong>示例</strong>：文件扩展名 <code>.pdf</code></li></ul><ol start="13"><li><code>application/zip</code>, <code>application/gzip</code></li></ol><ul><li><strong>用途</strong>：用于压缩文件。</li><li><strong>示例</strong>：文件扩展名 <code>.zip</code>、<code>.gz</code></li></ul><ol start="14"><li><code>text/csv</code></li></ol><ul><li><strong>用途</strong>：用于 CSV 格式的数据。</li><li><strong>示例</strong>：文件扩展名 <code>.csv</code></li></ul><p>那如何将js类型转换成<code>application/x-www-form-urlencoded</code>类型呢？我们可以使用qs库，或者自己写个工具函数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> qs <span class="keyword">from</span> <span class="string">&#x27;qs&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建 Axios 实例</span></span><br><span class="line"><span class="keyword">const</span> instance = axios.<span class="title function_">create</span>(&#123;</span><br><span class="line">  <span class="attr">baseURL</span>: <span class="string">&#x27;https://your-api-base-url.com&#x27;</span>,</span><br><span class="line">  <span class="attr">headers</span>: &#123;</span><br><span class="line">    <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/x-www-form-urlencoded&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">transformRequest</span>: [<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> qs.<span class="title function_">stringify</span>(data);</span><br><span class="line">  &#125;]</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 Axios 实例发送请求</span></span><br><span class="line">instance.<span class="title function_">post</span>(<span class="string">&#x27;/api/endpoint&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">key1</span>: <span class="string">&#x27;value1&#x27;</span>,</span><br><span class="line">  <span class="attr">key2</span>: <span class="string">&#x27;value2&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line">.<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(response.<span class="property">data</span>);</span><br><span class="line">&#125;)</span><br><span class="line">.<span class="title function_">catch</span>(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">error</span>(error);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><code>qs</code> 库可以将 JavaScript 对象序列化为 URL 编码的字符串格式，也可以手写工具函数实现这一目的：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 手写序列化函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">serialize</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> str = [];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> obj) &#123;</span><br><span class="line">    <span class="keyword">if</span> (obj.<span class="title function_">hasOwnProperty</span>(key)) &#123;</span><br><span class="line">      str.<span class="title function_">push</span>(<span class="built_in">encodeURIComponent</span>(key) + <span class="string">&quot;=&quot;</span> + <span class="built_in">encodeURIComponent</span>(obj[key]));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> str.<span class="title function_">join</span>(<span class="string">&quot;&amp;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建 Axios 实例</span></span><br><span class="line"><span class="keyword">const</span> instance = axios.<span class="title function_">create</span>(&#123;</span><br><span class="line">  <span class="attr">baseURL</span>: <span class="string">&#x27;https://your-api-base-url.com&#x27;</span>,</span><br><span class="line">  <span class="attr">headers</span>: &#123;</span><br><span class="line">    <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/x-www-form-urlencoded&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">transformRequest</span>: [<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">serialize</span>(data);</span><br><span class="line">  &#125;]</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 脚手架 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>夏洛克演绎法</title>
      <link href="/2024/07/25/%E5%85%B6%E4%BB%96-%E5%A4%8F%E6%B4%9B%E5%85%8B%E6%BC%94%E7%BB%8E%E6%B3%95/"/>
      <url>/2024/07/25/%E5%85%B6%E4%BB%96-%E5%A4%8F%E6%B4%9B%E5%85%8B%E6%BC%94%E7%BB%8E%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p><strong>概要：</strong>本文无关技术，是笔者对《神探夏洛克》中的演绎法比较感兴趣，略微研究一二。</p><p>夏洛克探案的特点是以细致入微的观察+海量知识储备+推理，用到了演绎、归纳、回溯等推理类型。</p><p>如果我们要学习夏洛克的演绎法，首先得从<strong>海量知识储备</strong>下手，比如剧中提到福尔摩斯曾研究了140种各个类别的烟灰，还写了一本《论各种烟灰的辨认》。</p><p>然后学习如何<strong>观察</strong>，在具体运用时，观察与分析、判断等思维过程也往往是紧密联系在一起的。我们需要搞明白两个问题：</p><p> 1、究竟该观察什么（观察的目的性，体貌特征、性格、经历、职业、现实处境、当前意图）？——只有明确了这一点，才能集中注意力！ </p><p>2、如何才能在各种现象中去发现可疑与线索？——这就取决于观察者本身的观察技巧与知识储备了！</p><p>对目标对象的观察主要分为三个方面：</p><p>1、一般性观察，亦即基本体貌特征观察：如观察对象的身高、面像、发型、体态、习惯性动作、服饰等。</p><p>2、身份背景与当前意图观察：通过与目标交谈或者观察其此时的行为。观察者只有对要观察的对象领域有一定了解，才有可能从旁人看起来平常的地方看出不平常之处。介绍个训练计划，一个月为一个训练阶段，地点：一般在车站、机场、大型商场等各色人出没较多的场所。方式：每次按工人（其中又可具体分工厂工人、水电维修、电信线路维护、清洁工、搬运工人等，具体根据个人需要而定）、农民、军人、警察、公务员、商人、专业人士（律师、会计师、记者、广告策划人）、业务人员等标准，选取1–2名作为“模特”，将其体貌特征（身高、面像、发型、体态）、衣着、与人讲话或静思、休息时神态、习惯性动作一一记录下来，描写应尽量准确传神。当每类被记录的人都不少于二十个，记录下来的“模特”总数达到一千个以上，这时就可以进行归纳分析工作了！按照上边或自定的类别，把各类人在与人交谈、走路、购物、休息时的神态分类列成一个表，这样就能对不同身份、背景人员在不同场合下的外表、装扮、神态获得一定规律性的认识！借这张表与观察记录过上千人的神情举止的经验，往后再在外边与人接触，要观察判断出对方的职业、此刻估计比起福尔摩斯来也差不了多远了！  </p><p>3、安全性观察：也就是目标人员是否对自己或他人具有危险性所作的观察，类观察的目的就是及早发现可能的危险以利于作出防范！结合一般近身袭击所采用的方式以及袭击者在采取这种行动时在生理与心理上必然产生的一系列变化，此类观察的核心就是四看：看眼神与面色（袭击时，一般肾上腺素会加速分泌）、看手（看不到手，或者手攥得很紧）、看脚步（接近你时却步履异常凝重）、看腰部、腋下与小腿（主要是藏武器的地方）</p><p>最后是学习推理，凡是异乎寻常的事物，一般都不是什么阻碍，反而是一种线索。</p><p>1、归纳法（归纳推理）：从已知条件出发，以经验为依据，寻找基本规律，归纳得出结论。</p><p>2、演绎法（演绎推理）：以客观规律为依据，从该事物的已知部分，理得到未知部分的思维方法。又称三段论法，大前提（A&#x3D;B）+小前提（B&#x3D;C），推出结论（A&#x3D;C）。</p><p>3、回溯法（回溯推理）：通过从已知的结果或现象出发，逆向推导其原因或过程的一种推理方法。先前假定的观点，必须能够向前一层层地回溯推理，看到某物的时候，一步步地往下推理接下来会发生什么的能力，和看到某物的时候，推理出所有产生出这种结果的各个步骤的能力，是完全不同性质的东西。</p><p>最后以剧中一句话进行结尾，当你排除一切不可能的，剩下的，不管多难以置信，那都是事实。</p><p><img src="https://cdn.jsdelivr.net/gh/pengpen1/blog-images/20240725133829.png"></p>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>批量上传方案</title>
      <link href="/2024/07/22/vue-%E6%89%B9%E9%87%8F%E4%B8%8A%E4%BC%A0%E6%96%B9%E6%A1%88/"/>
      <url>/2024/07/22/vue-%E6%89%B9%E9%87%8F%E4%B8%8A%E4%BC%A0%E6%96%B9%E6%A1%88/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p><strong>概要：</strong>在这篇记录中，我们将学习如何利用element-ui的上传组件实现批量上传。</p><h3 id="思路1：多少文件调用多少次接口"><a href="#思路1：多少文件调用多少次接口" class="headerlink" title="思路1：多少文件调用多少次接口"></a>思路1：多少文件调用多少次接口</h3><p>这个使用<code>element-ui</code>自动的功能就能实现，但是缺点是批量上传多少个文件就会同时发起多少个请求，而且浏览器对并发请求是有一定的限制，一般是不能超过6个，就算浏览器不限制，我们也不能确定后端能否处理好这么多并发请求，所以这个方案不是最优解。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;el-upload</span><br><span class="line">  class=&quot;upload-demo&quot;</span><br><span class="line">  drag</span><br><span class="line">  action=&quot;https://jsonplaceholder.typicode.com/posts/&quot;</span><br><span class="line">  multiple&gt;</span><br><span class="line">  &lt;i class=&quot;el-icon-upload&quot;&gt;&lt;/i&gt;</span><br><span class="line">  &lt;div class=&quot;el-upload__text&quot;&gt;将文件拖到此处，或&lt;em&gt;点击上传&lt;/em&gt;&lt;/div&gt;</span><br><span class="line">  &lt;div class=&quot;el-upload__tip&quot; slot=&quot;tip&quot;&gt;只能上传jpg/png文件，且不超过500kb&lt;/div&gt;</span><br><span class="line">&lt;/el-upload&gt;</span><br></pre></td></tr></table></figure><h3 id="思路2：维护数组，一次调用"><a href="#思路2：维护数组，一次调用" class="headerlink" title="思路2：维护数组，一次调用"></a>思路2：维护数组，一次调用</h3><p>首先我们得知道一些关于el-upload的基本的知识：</p><ol><li>如果批量选中文件，默认情况下每个文件会依次经历<code>on-change</code>以及<code>before-upload</code>再次<code>on-change</code></li><li>element内部维护的fileList，是不会重置的</li><li>我们需要手动在</li></ol><p>我们用一个数组来保存需要上传的文件，然后用户在点击上传按钮后，再将文件通过一个接口传递给后端。这个方案有个不好的地方就是需要加个按钮。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> uploadRef = <span class="title function_">ref</span>(<span class="literal">null</span>);</span><br><span class="line"><span class="keyword">const</span> uploadFileList = <span class="title function_">ref</span>([]);</span><br><span class="line"><span class="keyword">const</span> uploadProps = <span class="title function_">reactive</span>(&#123;</span><br><span class="line">  <span class="attr">drag</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">uploadDisabled</span>: <span class="literal">true</span>, <span class="comment">//上传按钮</span></span><br><span class="line">  <span class="string">&quot;auto-upload&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">accept</span>: <span class="string">&quot;.docx,.pdf,.ppt,.pptx,.xlsx,.xls,.jpg,.png,.bmp=,.jpeg&quot;</span>,</span><br><span class="line">  <span class="attr">multiple</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="comment">// action: &quot;/fontGateway/&quot; + REQUEST_URL.WATER + &quot;v1/WatermarkAddTask&quot;, // 单个自动上传可用这个</span></span><br><span class="line">  <span class="attr">action</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">  <span class="string">&quot;before-upload&quot;</span>: <span class="function">(<span class="params">file</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(file);</span><br><span class="line">    <span class="comment">// 上传前的操作</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;on-change&quot;</span>: <span class="function">(<span class="params">file, fileList</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(file, fileList);</span><br><span class="line">    uploadFileList.<span class="property">value</span> = fileList;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;before-remove&quot;</span>: <span class="function">(<span class="params">file, fileList</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(file, fileList);</span><br><span class="line">    uploadFileList.<span class="property">value</span> = fileList;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;on-success&quot;</span>: <span class="function">(<span class="params">response, file, fileList</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (response.<span class="property">code</span> === <span class="number">200</span>) &#123;</span><br><span class="line">      <span class="title function_">searchHandle</span>();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="title class_">FMessage</span>.<span class="title function_">error</span>(response.<span class="property">msg</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    uploadRef.<span class="property">value</span>.<span class="title function_">clearFiles</span>();</span><br><span class="line">    uploadFileList.<span class="property">value</span> = [];</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;on-error&quot;</span>: <span class="function">(<span class="params">erron, file, fileList</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title class_">FMessage</span>.<span class="title function_">error</span>(erron);</span><br><span class="line">    uploadRef.<span class="property">value</span>.<span class="title function_">clearFiles</span>();</span><br><span class="line">    uploadFileList.<span class="property">value</span> = [];</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">const</span> uploadDisabled = <span class="title function_">computed</span>(<span class="function">() =&gt;</span> uploadFileList.<span class="property">value</span>.<span class="property">length</span> === <span class="number">0</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">clickUploadHandler</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;clickUploadHandler&quot;</span>, uploadFileList.<span class="property">value</span>);</span><br><span class="line">  <span class="keyword">const</span> result = <span class="keyword">await</span> <span class="title function_">uploadData</span>(uploadFileList.<span class="property">value</span>);</span><br><span class="line">  <span class="keyword">if</span> (result) &#123;</span><br><span class="line">    <span class="title function_">searchHandle</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  uploadRef.<span class="property">value</span>.<span class="title function_">clearFiles</span>();</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这里维护的数组其实就是<code>element-ui</code>内部的fileList，用户点击上传按钮就会调用<code>clickUploadHandler</code>的函数，并将带有所有需要上传文件的数组传递给接口。</p><p>通过创建formData，并将所以文件叠加在<code>file</code>字段上，传递给后端，实现一个接口上传多个文件的功能。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">uploadData</span> = <span class="keyword">async</span> (<span class="params">fileList</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> formData = <span class="keyword">new</span> <span class="title class_">FormData</span>();</span><br><span class="line">  fileList.<span class="title function_">forEach</span>(<span class="function">(<span class="params">file</span>) =&gt;</span> &#123;</span><br><span class="line">    formData.<span class="title function_">append</span>(<span class="string">&quot;file&quot;</span>, file.<span class="property">raw</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> options = &#123;</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&quot;post&quot;</span>,</span><br><span class="line">    <span class="attr">url</span>: <span class="variable constant_">REQUEST_URL</span>.<span class="property">WATER</span> + <span class="string">&quot;v1/WatermarkAddTask&quot;</span>,</span><br><span class="line">    <span class="attr">headers</span>: &#123;</span><br><span class="line">      <span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;multipart/form-data&quot;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">data</span>: formData,</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> axios.<span class="title function_">request</span>(options).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (res.<span class="property">data</span>.<span class="property">code</span> === <span class="number">200</span> || res.<span class="property">data</span>.<span class="property">success</span> === <span class="literal">true</span>) &#123;</span><br><span class="line">      <span class="title class_">FMessage</span>.<span class="title function_">success</span>(res.<span class="property">data</span>.<span class="property">msg</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title class_">FMessage</span>.<span class="title function_">error</span>(res.<span class="property">data</span>.<span class="property">msg</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/pengpen1/blog-images/81855918194d8a26502c1ecca4650de.png"></p><p>上面是后端代码的截图，他们获取的就算formdata中的Files，文件集合。</p><h3 id="思路3：维护数组，延迟调用"><a href="#思路3：维护数组，延迟调用" class="headerlink" title="思路3：维护数组，延迟调用"></a>思路3：维护数组，延迟调用</h3><p>这里通过维护一个上传数组，根据顺序依次延迟2秒进行上传，成功上传后清空该数组。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 上传文件相关</span></span><br><span class="line"><span class="keyword">const</span> uploadRef = <span class="title function_">ref</span>(<span class="literal">null</span>);</span><br><span class="line"><span class="keyword">const</span> uploadFileIndex = <span class="title function_">ref</span>(<span class="number">0</span>); <span class="comment">// 在采用方案1时需要</span></span><br><span class="line"><span class="keyword">const</span> uploadFileList = <span class="title function_">ref</span>([]); <span class="comment">// 方案2，1都需要</span></span><br><span class="line"><span class="keyword">const</span> uploadProps = <span class="title function_">reactive</span>(&#123;</span><br><span class="line">  <span class="attr">drag</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">uploadDisabled</span>: <span class="literal">true</span>, <span class="comment">//上传按钮</span></span><br><span class="line">  <span class="string">&quot;auto-upload&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">accept</span>: <span class="string">&quot;.docx,.pdf,.ppt,.pptx,.xlsx,.xls,.jpg,.png,.bmp=,.jpeg&quot;</span>,</span><br><span class="line">  <span class="attr">multiple</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="string">&quot;show-file-list&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">action</span>: <span class="string">&quot;/fontGateway/&quot;</span> + <span class="variable constant_">REQUEST_URL</span>.<span class="property">WATER</span> + <span class="string">&quot;v1/WatermarkAddTask&quot;</span>, <span class="comment">// 方案1：采用自动上传，可用这个</span></span><br><span class="line">  <span class="comment">// action: &quot;&quot;, // 方案2：手动维护上传数组，通过按钮进行上传操作</span></span><br><span class="line">  <span class="string">&quot;before-upload&quot;</span>: <span class="keyword">async</span> (file) =&gt; &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;2222222&quot;</span>, uploadFileList.<span class="property">value</span>);</span><br><span class="line">    <span class="comment">//  方案2：手动维护上传数组</span></span><br><span class="line">    <span class="comment">// return true;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 方案1</span></span><br><span class="line">    <span class="keyword">const</span> index =</span><br><span class="line">      uploadFileList.<span class="property">value</span>.<span class="title function_">findIndex</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> item.<span class="property">uid</span> === file.<span class="property">uid</span>;</span><br><span class="line">      &#125;) + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(file);</span><br><span class="line">        uploadFileIndex.<span class="property">value</span> = index;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">resolve</span>();</span><br><span class="line">      &#125;, index * <span class="number">2000</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;on-change&quot;</span>: <span class="function">(<span class="params">file, fileList</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(file, fileList);</span><br><span class="line">    <span class="comment">// 方案2：手动维护上传数组，通过按钮进行上传操作</span></span><br><span class="line">    <span class="comment">// uploadFileList.value = fileList;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 方案1</span></span><br><span class="line">    uploadFileList.<span class="property">value</span>.<span class="title function_">splice</span>(<span class="number">0</span>);</span><br><span class="line">    uploadFileList.<span class="property">value</span>.<span class="title function_">push</span>(...fileList);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;before-remove&quot;</span>: <span class="function">(<span class="params">file, fileList</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(file, fileList);</span><br><span class="line">    <span class="comment">// 方案2：手动维护上传数组，通过按钮进行上传操作</span></span><br><span class="line">    <span class="comment">// uploadFileList.value = fileList;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;on-success&quot;</span>: <span class="function">(<span class="params">response, file, fileList</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 方案2：手动维护上传数组，通过按钮进行上传操作</span></span><br><span class="line">    <span class="comment">//   if (response.code === 200) &#123;</span></span><br><span class="line">    <span class="comment">//     searchHandle();</span></span><br><span class="line">    <span class="comment">//   &#125; else &#123;</span></span><br><span class="line">    <span class="comment">//     FMessage.error(response.msg);</span></span><br><span class="line">    <span class="comment">//   &#125;</span></span><br><span class="line">    <span class="comment">//   uploadRef.value.clearFiles();</span></span><br><span class="line">    <span class="comment">//   uploadFileList.value = [];</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 方案1：自动上传</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(</span><br><span class="line">      file,</span><br><span class="line">      fileList,</span><br><span class="line">      uploadFileIndex.<span class="property">value</span> &gt;= uploadFileList.<span class="property">value</span>.<span class="property">length</span></span><br><span class="line">    );</span><br><span class="line">    <span class="keyword">if</span> (uploadFileIndex.<span class="property">value</span> &gt;= uploadFileList.<span class="property">value</span>.<span class="property">length</span>) &#123;</span><br><span class="line">      <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        uploadFileList.<span class="property">value</span>.<span class="title function_">splice</span>(<span class="number">0</span>);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(uploadFileIndex.<span class="property">value</span>);</span><br><span class="line">    <span class="keyword">if</span> (response.<span class="property">code</span> === <span class="number">200</span>) &#123;</span><br><span class="line">      <span class="title function_">searchHandle</span>();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="title class_">FMessage</span>.<span class="title function_">error</span>(response.<span class="property">msg</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;on-error&quot;</span>: <span class="function">(<span class="params">erron, file, fileList</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title class_">FMessage</span>.<span class="title function_">error</span>(erron);</span><br><span class="line">    <span class="comment">// 方案2：手动维护上传数组，通过按钮进行上传操作</span></span><br><span class="line">    <span class="comment">// uploadRef.value.clearFiles();</span></span><br><span class="line">    <span class="comment">// uploadFileList.value = [];</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 方案1</span></span><br><span class="line">    <span class="comment">// uploadRef.value.clearFiles();</span></span><br><span class="line">    <span class="comment">// uploadFileList.value = [];</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// httpRequest: (param) =&gt; &#123;</span></span><br><span class="line">  <span class="comment">// 方案2.2：改写httpRequest,这里为了方便维护，采用同步fileList的方案</span></span><br><span class="line">  <span class="comment">//   debugger;</span></span><br><span class="line">  <span class="comment">//   fileList.value.push(param.file); // 一般情况下是在这里创建FormData对象，但我们需要上传多个文件，为避免发送多次请求，因此在这里只进行文件的获取，param可以拿到文件上传的所有信息</span></span><br><span class="line">  <span class="comment">// &#125;,</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="需求补充，完整代码"><a href="#需求补充，完整代码" class="headerlink" title="需求补充，完整代码"></a>需求补充，完整代码</h3><p>上面方案的代码是有问题的，因为没有清空<code>fileList</code>中的数据，导致上传列表一直在叠加，并未清空。</p><p>在下面这个方案中，我们直接将<code>fileList</code>作为上传列表，并在上传成功之前展示在列表中展示正在上传的状态。</p><p>另外，这个上传组件中的接口，需要我们手动加上token。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 上传文件相关</span></span><br><span class="line"><span class="keyword">const</span> uploadRef = <span class="title function_">ref</span>(<span class="literal">null</span>);</span><br><span class="line"><span class="keyword">const</span> uploadFileIndex = <span class="title function_">ref</span>(<span class="number">0</span>); <span class="comment">// 在采用方案1时需要</span></span><br><span class="line"><span class="keyword">const</span> uploadFileList = <span class="title function_">ref</span>([]); <span class="comment">// 方案2，1都需要,方案2时就是文件数组，方案1时可以理解为上传队列，成功和失败都会从队列中移除，根据队列中的索引决定演示器的设置</span></span><br><span class="line"><span class="keyword">const</span> uploadProps = <span class="title function_">reactive</span>(&#123;</span><br><span class="line">  <span class="attr">drag</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">uploadDisabled</span>: <span class="literal">true</span>, <span class="comment">//上传按钮</span></span><br><span class="line">  <span class="attr">headers</span>: &#123;</span><br><span class="line">    <span class="title class_">Authorization</span>: store.<span class="property">getters</span>.<span class="property">getToken</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;auto-upload&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">accept</span>: <span class="string">&quot;.docx,.pdf,.ppt,.pptx,.xlsx,.xls,.jpg,.png,.bmp=,.jpeg&quot;</span>,</span><br><span class="line">  <span class="attr">multiple</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="string">&quot;show-file-list&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">action</span>: <span class="string">&quot;/fontGateway/&quot;</span> + <span class="variable constant_">REQUEST_URL</span>.<span class="property">WATER</span> + <span class="string">&quot;v1/WatermarkAddTask&quot;</span>, <span class="comment">// 方案1：采用自动上传，可用这个</span></span><br><span class="line">  <span class="string">&quot;before-upload&quot;</span>: <span class="keyword">async</span> (file) =&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 方案1</span></span><br><span class="line">    <span class="title function_">updateTableData</span>();</span><br><span class="line">    <span class="keyword">const</span> index =</span><br><span class="line">      uploadFileList.<span class="property">value</span>.<span class="title function_">findIndex</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> item.<span class="property">uid</span> === file.<span class="property">uid</span>;</span><br><span class="line">      &#125;) + <span class="number">1</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&quot;index&quot;</span>, index * <span class="number">2000</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(file);</span><br><span class="line">        uploadFileIndex.<span class="property">value</span> = index;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">resolve</span>();</span><br><span class="line">      &#125;, index * <span class="number">2000</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;on-change&quot;</span>: <span class="function">(<span class="params">file, fileList</span>) =&gt;</span> &#123;</span><br><span class="line">    uploadFileList.<span class="property">value</span> = fileList;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;before-remove&quot;</span>: <span class="function">(<span class="params">file, fileList</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(file, fileList);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;on-success&quot;</span>: <span class="keyword">async</span> (response, file, fileList) =&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> index = uploadFileList.<span class="property">value</span>.<span class="title function_">findIndex</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> item.<span class="property">uid</span> === file.<span class="property">uid</span>;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (index || index === <span class="number">0</span>) &#123;</span><br><span class="line">      uploadFileList.<span class="property">value</span>.<span class="title function_">splice</span>(index, <span class="number">1</span>);</span><br><span class="line">      fileList.<span class="title function_">splice</span>(index, <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (response.<span class="property">code</span> === <span class="number">200</span>) &#123;</span><br><span class="line">      <span class="keyword">await</span> <span class="title function_">searchHandle</span>();</span><br><span class="line">      <span class="title function_">updateTableData</span>();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="title class_">FMessage</span>.<span class="title function_">error</span>(response.<span class="property">msg</span>);</span><br><span class="line">      <span class="title function_">updateTableData</span>();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;on-error&quot;</span>: <span class="function">(<span class="params">erron, file, fileList</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title class_">FMessage</span>.<span class="title function_">error</span>(erron);</span><br><span class="line">    <span class="keyword">const</span> index = uploadFileList.<span class="property">value</span>.<span class="title function_">findIndex</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> item.<span class="property">uid</span> === file.<span class="property">uid</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">if</span> (index || index === <span class="number">0</span>) &#123;</span><br><span class="line">      uploadFileList.<span class="property">value</span>.<span class="title function_">splice</span>(index, <span class="number">1</span>);</span><br><span class="line">      fileList.<span class="title function_">splice</span>(index, <span class="number">1</span>);</span><br><span class="line">      <span class="title function_">updateTableData</span>();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">const</span> uploadDisabled = <span class="title function_">computed</span>(<span class="function">() =&gt;</span> uploadFileList.<span class="property">value</span>.<span class="property">length</span> === <span class="number">0</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">clickUploadHandler</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;clickUploadHandler&quot;</span>, uploadFileList.<span class="property">value</span>);</span><br><span class="line">  <span class="keyword">const</span> result = <span class="keyword">await</span> <span class="title function_">uploadData</span>(uploadFileList.<span class="property">value</span>);</span><br><span class="line">  <span class="keyword">if</span> (result) &#123;</span><br><span class="line">    <span class="title function_">searchHandle</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  uploadRef.<span class="property">value</span>.<span class="title function_">clearFiles</span>();</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 根据 uploadFileList 更新列表数据</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">updateTableData</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(</span><br><span class="line">    <span class="string">&quot;updateTableData&quot;</span>,</span><br><span class="line">    uploadFileList.<span class="property">value</span>,</span><br><span class="line">    tableData.<span class="property">value</span>,</span><br><span class="line">    paginationProps.<span class="property">pageSize</span></span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 情况1，待上传数组的长度 + 当前列表的长度 &lt;= 每页显示的条数</span></span><br><span class="line">  <span class="keyword">if</span> (</span><br><span class="line">    uploadFileList.<span class="property">value</span>.<span class="property">length</span> + tableData.<span class="property">value</span>.<span class="property">length</span> &lt;=</span><br><span class="line">    paginationProps.<span class="property">pageSize</span></span><br><span class="line">  ) &#123;</span><br><span class="line">    tableData.<span class="property">value</span> = [</span><br><span class="line">      ...<span class="title function_">formatUploadList</span>(uploadFileList.<span class="property">value</span>),</span><br><span class="line">      ...tableData.<span class="property">value</span>,</span><br><span class="line">    ];</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 情况2，待上传数组的长度 + 当前列表的长度 &gt; 每页显示的条数</span></span><br><span class="line">    <span class="comment">// 情况2.1，待上传数组的长度 &gt;= 每页显示的条数</span></span><br><span class="line">    <span class="keyword">if</span> (uploadFileList.<span class="property">value</span>.<span class="property">length</span> &gt;= paginationProps.<span class="property">pageSize</span>) &#123;</span><br><span class="line">      tableData.<span class="property">value</span> = [</span><br><span class="line">        ...<span class="title function_">formatUploadList</span>(</span><br><span class="line">          uploadFileList.<span class="property">value</span>.<span class="title function_">slice</span>(<span class="number">0</span>, paginationProps.<span class="property">pageSize</span>)</span><br><span class="line">        ),</span><br><span class="line">      ];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 情况2.2，待上传数组的长度 &lt; 每页显示的条数</span></span><br><span class="line">      tableData.<span class="property">value</span> = [</span><br><span class="line">        ...<span class="title function_">formatUploadList</span>(uploadFileList.<span class="property">value</span>),</span><br><span class="line">        ...tableData.<span class="property">value</span>.<span class="title function_">slice</span>(</span><br><span class="line">          <span class="number">0</span>,</span><br><span class="line">          paginationProps.<span class="property">pageSize</span> - uploadFileList.<span class="property">value</span>.<span class="property">length</span></span><br><span class="line">        ),</span><br><span class="line">      ];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 格式化上传列表的数据：状态-&gt;待确认</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">formatUploadList</span> = (<span class="params">fileList</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (!fileList) <span class="keyword">return</span> [];</span><br><span class="line">  <span class="keyword">return</span> fileList.<span class="title function_">map</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> type = item.<span class="property">name</span>.<span class="title function_">split</span>(<span class="string">&quot;.&quot;</span>)[<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">fileName</span>: item.<span class="property">name</span>,</span><br><span class="line">      <span class="attr">fileFormat</span>: <span class="variable constant_">FILE_TYPE_MAP</span>[type].<span class="property">value</span>,</span><br><span class="line">      <span class="attr">fileFormatName</span>: type,</span><br><span class="line">      <span class="attr">taskStatus</span>: <span class="number">1</span>,</span><br><span class="line">      <span class="attr">watermarkStrategyId</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">      <span class="attr">watermarkContent</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">      <span class="attr">isEditState</span>: <span class="literal">false</span>,</span><br><span class="line">      <span class="attr">isEditStrategy</span>: <span class="literal">false</span>,</span><br><span class="line">      <span class="comment">// 按钮权限</span></span><br><span class="line">      <span class="attr">isDeleteHide</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">isRetryHide</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">isDownHide</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">isStartHide</span>: <span class="literal">true</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>实现方式多种多样，需求也是多种多样，我们要扩展自己的思路，以应对将来的各种需求。</p>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>破解office</title>
      <link href="/2024/07/13/%E5%85%B6%E4%BB%96-%E7%A0%B4%E8%A7%A3office/"/>
      <url>/2024/07/13/%E5%85%B6%E4%BB%96-%E7%A0%B4%E8%A7%A3office/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p><strong>概要：</strong>在这篇记录中，我们将探讨如何破解office。仅用于学习，请勿用于非法用途！</p><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>Key Management Service(简称:KMS)KMS激活会维持180天，原理：由于Windows VL都是为批量激活而诞生，所以在一个激活单位中肯定会有很多台配置相等的计算机，并用一个服务器建立起一个局域网(LAN)，而KMS正好利用这一点，它要求局域网中必须有一台KMS服务器，KMS服务器的作用是给局域网中的所有计算机的操作系统定周期(一般是180天)提供一个随机的激活ID(不同于产品激活密钥)，然后计算机里面的KMS服务就会自动将系统激活，实现正常的系统软件服务与操作。所以计算机必须保持与KMS服务器的定期连接，以便KMS激活服务的自动检查实现激活的自动续期，这样就实现了限制于公司域内的激活范围，避免了对于外界计算机的非法授权，当非法激活者离开公司域后，由于客户端KMS服务不能连接位于域内的KMS激活服务器，让它提供一个新的序列号，超过180天以后就会因为激活ID过期而重新回到试用版本状态，而合法授权者则能够定期获得ID更新，保持一直正确的激活状态。</p><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><p>1.官网下载 Office Deployment Tool <a href="https://www.microsoft.com/en-us/download/details.aspx?id=49117">https://www.microsoft.com/en-us/download/details.aspx?id=49117</a><br>2.配置config文件 <a href="https://config.office.com/deploymentsettings">https://config.office.com/deploymentsettings</a> ，版本推荐2021标准版，然后根据需要选择软件，并导出 xml </p><p><img src="https://cdn.jsdelivr.net/gh/pengpen1/blog-images/20240713184528.png">3.安装 </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cd c:\office（你安装文件夹目录） </span><br><span class="line">// 下载</span><br><span class="line">setup.exe /download config.xml </span><br><span class="line">// 自动安装</span><br><span class="line">setup.exe /configure config.xml </span><br></pre></td></tr></table></figure><p>4.激活 </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd C:\Program Files\Microsoft Office\Office16 </span><br><span class="line">cscript ospp.vbs /sethst:kms.03k.org （当前kms地址失效的话，可以尝试替换备选地址）</span><br><span class="line">cscript ospp.vbs /act </span><br></pre></td></tr></table></figure><p>5.备选的KMS kms.03k.org kms.chinancce.com kms.luody.info kms.lotro.cc kms.luochenzhimu.com kms8.MSGuides.com kms9.MSGuides.com</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>原理就是通过cscript（Windows Script Host）将ospp.vbs（管理 Office 产品的激活的脚步文件）中的kms服务器地址参数改为指定地址。然后通过&#x2F;act参数执行激活程序。注意，此方法仅用于学习，请勿用于非法用途！</p><p>放张成功后的截图：</p><p><img src="https://cdn.jsdelivr.net/gh/pengpen1/blog-images/70ac79602bf4a5f0e631ad29a140d43.png"></p>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>mall-front</title>
      <link href="/2024/06/28/%E9%A1%B9%E7%9B%AE-mall-front/"/>
      <url>/2024/06/28/%E9%A1%B9%E7%9B%AE-mall-front/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p><strong>概要：</strong>私人商城项目的前台页面，三端兼容，基于vue3、element-plus、typeScript、tailwindcss实现。</p><h3 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h3><p>项目最好安装扩展<code>Tailwind CSS IntelliSense</code>、<code>Prettier - Code formatter</code></p><h4 id="集成tailwindcss"><a href="#集成tailwindcss" class="headerlink" title="集成tailwindcss"></a>集成tailwindcss</h4><p>安装 Tailwind CSS 及其依赖。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -D tailwindcss postcss autoprefixer</span><br></pre></td></tr></table></figure><p>运行以下命令生成 <code>tailwind.config.js</code> 和 <code>postcss.config.js</code> 文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx tailwindcss init -p</span><br></pre></td></tr></table></figure><p>这将创建两个配置文件：</p><ul><li><code>tailwind.config.js</code></li><li><code>postcss.config.js</code></li></ul><p>编辑 <code>tailwind.config.js</code> 文件，将 <code>content</code> 部分修改为包含你的 Vue 文件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** <span class="doctag">@type</span> &#123;<span class="type">import(&#x27;tailwindcss&#x27;).Config</span>&#125; */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="attr">content</span>: [<span class="string">&quot;./index.html&quot;</span>, <span class="string">&quot;./src/**/*.&#123;vue,js,ts,jsx,tsx&#125;&quot;</span>],</span><br><span class="line">    <span class="attr">theme</span>: &#123;</span><br><span class="line">        <span class="attr">extend</span>: &#123;&#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">plugins</span>: [],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建或编辑 <code>src/assets/tailwind.css</code> 文件，添加以下内容：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@tailwind</span> base;</span><br><span class="line"><span class="keyword">@tailwind</span> components;</span><br><span class="line"><span class="keyword">@tailwind</span> utilities;</span><br></pre></td></tr></table></figure><p>编辑 <code>src/main.ts</code> 文件，添加对 Tailwind CSS 的引入：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./assets/tailwind.css&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">createApp</span>(<span class="title class_">App</span>).<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure><p>安装<code>prettier-plugin-tailwindcss</code>，可以帮助我们对class进行排序，规则提取自Tailwind 。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -D prettier prettier-plugin-tailwindcss</span><br></pre></td></tr></table></figure><p>然后我们来测试小集成成功没，随便加些class</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="selector-tag">p</span> class=&quot;text-red-<span class="number">500</span> underline&quot;&gt;test tailwindcss&lt;/<span class="selector-tag">p</span>&gt;</span><br></pre></td></tr></table></figure><p>安装了上面说的扩展后，鼠标悬浮还能看到具体的css的代码</p><p><img src="https://cdn.jsdelivr.net/gh/pengpen1/blog-images/20240628161530.png"></p><p><img src="https://cdn.jsdelivr.net/gh/pengpen1/blog-images/20240628161737.png"></p><h4 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h4><p>安装 ESLint 和 Prettier 以确保代码风格一致，并检测潜在的错误：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install -D eslint @typescript-eslint/eslint-plugin @typescript-eslint/parser eslint-plugin-vue</span><br><span class="line">npm install -D prettier eslint-config-prettier eslint-plugin-prettier</span><br></pre></td></tr></table></figure><p>创建 <code>.eslintrc.js</code> 文件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">root</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">env</span>: &#123;</span><br><span class="line">    <span class="attr">node</span>: <span class="literal">true</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">extends</span>: [</span><br><span class="line">    <span class="string">&#x27;plugin:vue/vue3-essential&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;eslint:recommended&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;@vue/typescript/recommended&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;prettier&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;plugin:prettier/recommended&#x27;</span>,</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">parserOptions</span>: &#123;</span><br><span class="line">    <span class="attr">ecmaVersion</span>: <span class="number">2020</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">rules</span>: &#123;</span><br><span class="line">    <span class="string">&#x27;vue/multi-word-component-names&#x27;</span>: <span class="string">&#x27;off&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;@typescript-eslint/no-unused-vars&#x27;</span>: <span class="string">&#x27;off&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;@typescript-eslint/explicit-module-boundary-types&#x27;</span>: <span class="string">&#x27;off&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;prettier/prettier&#x27;</span>: [<span class="string">&#x27;error&#x27;</span>, &#123; <span class="attr">endOfLine</span>: <span class="string">&#x27;auto&#x27;</span> &#125;],</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><code>  root: true,</code>：表示这是项目的根配置文件，ESLint 不会再向上查找其它的配置文件。</p><p><code>node: true,</code>：定义了代码运行的环境。这里设置 <code>node: true</code>，表示代码将运行在 Node.js 环境中，Node.js 全局变量和作用域将会被预定义。</p><p><code>&#39;plugin:vue/vue3-essential&#39;</code>：使用 Vue 3 的基本规则。</p><p><code>&#39;eslint:recommended&#39;</code>：使用 ESLint 推荐的基本规则。</p><p><code>&#39;@vue/typescript/recommended&#39;</code>：使用 Vue 官方推荐的 TypeScript 规则。</p><p><code>&#39;prettier&#39;</code>：禁用所有不必要或可能与 Prettier 冲突的 ESLint 规则。</p><p><code>&#39;plugin:prettier/recommended&#39;</code>：启用 <code>eslint-plugin-prettier</code> 并将 Prettier 作为 ESLint 规则来运行，显示 Prettier 错误为 ESLint 错误。这一项需要放在最后。</p><p>  <code>ecmaVersion: 2020</code>：指定 ECMAScript 的版本，这里是 ECMAScript 2020。</p><p><code>rules</code>：自定义的 ESLint 规则。</p><p><code>&#39;vue/multi-word-component-names&#39;: &#39;off&#39;</code>：关闭 Vue 组件名称必须是多词的规则。</p><p><code>&#39;@typescript-eslint/no-unused-vars&#39;: &#39;off&#39;</code>：关闭 TypeScript 未使用变量的规则。</p><p><code>&#39;@typescript-eslint/explicit-module-boundary-types&#39;: &#39;off&#39;</code>：关闭要求显式声明函数和类方法的返回类型的规则。</p><p><code>&#39;prettier/prettier&#39;: [&#39;error&#39;, &#123; endOfLine: &#39;auto&#39; &#125;]</code>：将 Prettier 的格式化规则作为 ESLint 错误处理，并设置 <code>endOfLine</code> 选项为 <code>auto</code>，这将自动处理行结束符（例如 LF 或 CRLF）。</p><p>创建 <code>.prettierrc</code> 文件：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;singleQuote&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;semi&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;trailingComma&quot;</span><span class="punctuation">:</span> <span class="string">&quot;es5&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i @element-plus/icons @vueuse/core axios element-plus vue-i18n vue-router vuex</span><br></pre></td></tr></table></figure><p>然后就是创建文件夹，对项目进行架构。文件结构：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">my-vue-app/</span><br><span class="line">├── public/</span><br><span class="line">│   └── favicon.ico</span><br><span class="line">├── src/</span><br><span class="line">│   ├── assets/</span><br><span class="line">│   │   └── images/</span><br><span class="line">│   ├── components/</span><br><span class="line">│   │   └── MyComponent.vue</span><br><span class="line">│   ├── composables/</span><br><span class="line">│   │   └── useMyComposable.ts</span><br><span class="line">│   ├── layouts/</span><br><span class="line">│   │   └── DefaultLayout.vue</span><br><span class="line">│   ├── pages/</span><br><span class="line">│   │   └── Home.vue</span><br><span class="line">│   ├── router/</span><br><span class="line">│   │   └── index.ts</span><br><span class="line">│   ├── store/</span><br><span class="line">│   │   └── index.ts</span><br><span class="line">│   ├── styles/</span><br><span class="line">│   │   ├── tailwind.css</span><br><span class="line">│   │   └── globals.css</span><br><span class="line">│   ├── utils/</span><br><span class="line">│   │   └── helpers.ts</span><br><span class="line">│   ├── App.vue</span><br><span class="line">│   ├── main.ts</span><br><span class="line">│   └── vite-env.d.ts</span><br><span class="line">├── .editorconfig</span><br><span class="line">├── .eslintrc.js</span><br><span class="line">├── .gitignore</span><br><span class="line">├── index.html</span><br><span class="line">├── <span class="built_in">package</span>.json</span><br><span class="line">├── postcss.<span class="built_in">config</span>.js</span><br><span class="line">├── tailwind.<span class="built_in">config</span>.js</span><br><span class="line">├── tsconfig.json</span><br><span class="line">├── vite.<span class="built_in">config</span>.ts</span><br><span class="line">└── yarn.lock / <span class="built_in">package</span>-lock.json</span><br></pre></td></tr></table></figure><h3 id="问题记录"><a href="#问题记录" class="headerlink" title="问题记录"></a>问题记录</h3><p><strong>1.todo</strong></p><p>todo</p><h3 id="项目展示"><a href="#项目展示" class="headerlink" title="项目展示"></a>项目展示</h3><p>todo</p>]]></content>
      
      
      <categories>
          
          <category> 项目 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>mall-admin</title>
      <link href="/2024/06/27/%E9%A1%B9%E7%9B%AE-mall-admin/"/>
      <url>/2024/06/27/%E9%A1%B9%E7%9B%AE-mall-admin/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p><strong>概要：</strong>私人商城项目的后台管理系统，基于vue3、element-plus、typeScript实现。</p><h3 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h3><p>项目基于<a href="https://github.com/cmdparkour/vue-admin-box">vue-admin-box</a>实现</p><h3 id="复习TypeScript"><a href="#复习TypeScript" class="headerlink" title="复习TypeScript"></a>复习TypeScript</h3><p>ts一年没用了，为了快速上手，简单复习下常用的，项目中遇到有问题的再记录学习下。</p><h4 id="基础类型"><a href="#基础类型" class="headerlink" title="基础类型"></a>基础类型</h4><ul><li><strong>基本类型</strong>：<code>number</code>, <code>string</code>, <code>boolean</code>, <code>null</code>, <code>undefined</code></li><li><strong>数组</strong>：<code>number[]</code> 或 <code>Array&lt;number&gt;</code></li><li><strong>元组</strong>：<code>[string, number]</code></li><li><strong>枚举</strong>：<code>enum Color &#123;Red, Green, Blue&#125;</code></li><li><strong>any</strong>：允许任何类型</li><li><strong>void</strong>：没有任何类型</li><li><strong>object</strong>：非原始类型</li></ul><h4 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h4><p><strong>定义接口</strong>：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">age</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>可选属性</strong>：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  age?: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>只读属性</strong>：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="keyword">readonly</span> <span class="attr">id</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="类"><a href="#类" class="headerlink" title="类"></a>类</h4><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">move</span>(<span class="params">distance: <span class="built_in">number</span> = <span class="number">0</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span> moved <span class="subst">$&#123;distance&#125;</span>m.`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h4><p><strong>函数类型</strong>：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">x: <span class="built_in">number</span>, y: <span class="built_in">number</span></span>): <span class="built_in">number</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>可选参数和默认参数</strong>：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">buildName</span>(<span class="params">firstName: <span class="built_in">string</span>, lastName?: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;firstName&#125;</span> <span class="subst">$&#123;lastName || <span class="string">&#x27;&#x27;</span>&#125;</span>`</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>剩余参数</strong>：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">buildName</span>(<span class="params">firstName: <span class="built_in">string</span>, ...restOfName: <span class="built_in">string</span>[]</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;firstName&#125;</span> <span class="subst">$&#123;restOfName.join(<span class="string">&#x27; &#x27;</span>)&#125;</span>`</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h4><p><strong>基本使用</strong>：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> identity&lt;T&gt;(<span class="attr">arg</span>: T): T &#123;</span><br><span class="line">  <span class="keyword">return</span> arg;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>泛型类</strong>：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">GenericNumber</span>&lt;T&gt; &#123;</span><br><span class="line">  <span class="attr">zeroValue</span>: T;</span><br><span class="line">  <span class="attr">add</span>: <span class="function">(<span class="params">x: T, y: T</span>) =&gt;</span> T;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="类型断言"><a href="#类型断言" class="headerlink" title="类型断言"></a>类型断言</h4><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">someValue</span>: <span class="built_in">any</span> = <span class="string">&quot;this is a string&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">strLength</span>: <span class="built_in">number</span> = (someValue <span class="keyword">as</span> <span class="built_in">string</span>).<span class="property">length</span>;</span><br></pre></td></tr></table></figure><h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><p><strong>索引签名</strong>：</p><p>提供一种灵活的方式来描述具有动态属性的对象结构。它允许对象具有一组已知的属性，同时还能扩展出更多不预先定义的属性，满足实际应用中的需求。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> <span class="title class_">Style</span> &#123;</span><br><span class="line">  <span class="attr">default</span>: <span class="title class_">Colors</span>;</span><br><span class="line">  <span class="attr">light</span>: <span class="title class_">Colors</span>;</span><br><span class="line">  <span class="attr">dark</span>: <span class="title class_">Colors</span>;</span><br><span class="line">  [<span class="attr">propName</span>: <span class="built_in">string</span>]: <span class="title class_">Colors</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>联合类型</strong>：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">value</span>: <span class="built_in">string</span> | <span class="built_in">number</span>;</span><br><span class="line">value = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">value = <span class="number">123</span>;</span><br></pre></td></tr></table></figure><p><strong>类型别名</strong>：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Name</span> = <span class="built_in">string</span>;</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">NameOrResolver</span> = <span class="title class_">Name</span> | (<span class="function">() =&gt;</span> <span class="title class_">Name</span>);</span><br></pre></td></tr></table></figure><p><strong>Record</strong>：</p><p><code>Record</code> 是 TypeScript 提供的一个实用类型，用于创建键值对对象的类型。它允许你定义一个对象，其中所有的键都具有相同的类型，并且所有的值也具有相同的类型。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Record</span>&lt;<span class="title class_">Keys</span>, <span class="title class_">Type</span>&gt;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">FormItem</span> &#123;</span><br><span class="line">  <span class="attr">label</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">prop</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">span</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="attr">components</span>: <span class="title class_">Component</span>[];</span><br><span class="line">  rules?: &#123; <span class="attr">required</span>: <span class="built_in">boolean</span>; <span class="attr">message</span>: <span class="built_in">string</span>; <span class="attr">trigger</span>: <span class="built_in">string</span> &#125;[];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">ItemsMap</span> = <span class="title class_">Record</span>&lt;<span class="built_in">string</span>, <span class="title class_">FormItem</span>&gt;;</span><br></pre></td></tr></table></figure><p><strong>交叉和继承</strong>：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">AxiosResponse</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">CustomResponse</span> &#123;</span><br><span class="line">  <span class="attr">code</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="attr">data</span>: <span class="built_in">any</span>;</span><br><span class="line">  <span class="attr">ms</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">CombinedResponse</span> = <span class="title class_">AxiosResponse</span> &amp; <span class="title class_">CustomResponse</span>;</span><br></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">AxiosResponse</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">CustomResponse</span> &#123;</span><br><span class="line">  <span class="attr">code</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="attr">data</span>: <span class="built_in">any</span>;</span><br><span class="line">  <span class="attr">ms</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">CombinedResponse</span> <span class="keyword">extends</span> <span class="title class_">AxiosResponse</span>, <span class="title class_">CustomResponse</span> &#123;&#125;</span><br></pre></td></tr></table></figure><p>CombinedResponse接口继承了 <code>AxiosResponse</code> 和 <code>CustomResponse</code>，因此它同时包含了这两个接口中的所有属性</p><h4 id="在Vue3项目中的使用"><a href="#在Vue3项目中的使用" class="headerlink" title="在Vue3项目中的使用"></a>在Vue3项目中的使用</h4><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;script lang=<span class="string">&quot;ts&quot;</span>&gt;</span><br><span class="line"><span class="keyword">import</span> &#123; defineComponent &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineComponent</span>(&#123;</span><br><span class="line">  <span class="attr">props</span>: &#123;</span><br><span class="line">    <span class="attr">message</span>: <span class="title class_">String</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">setup</span>(<span class="params">props</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(props.<span class="property">message</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="项目中ts相关问题"><a href="#项目中ts相关问题" class="headerlink" title="项目中ts相关问题"></a>项目中ts相关问题</h4><h3 id="Vue-18n"><a href="#Vue-18n" class="headerlink" title="Vue -18n"></a>Vue -18n</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">VueI18</span>n <span class="keyword">from</span> <span class="string">&#x27;vue-i18n&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">VueI18</span>n);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> i18n = <span class="keyword">new</span> <span class="title class_">VueI18</span>n(&#123;</span><br><span class="line">  <span class="attr">locale</span>: <span class="string">&#x27;zh-CN&#x27;</span>,</span><br><span class="line">  <span class="attr">messages</span>: &#123;</span><br><span class="line">    <span class="string">&#x27;zh-CN&#x27;</span>: &#123;</span><br><span class="line">      <span class="attr">welcome</span>: <span class="string">&#x27;欢迎使用Vue.js&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&#x27;en-US&#x27;</span>: &#123;</span><br><span class="line">      <span class="attr">welcome</span>: <span class="string">&#x27;Welcome to Vue.js&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  i18n,</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;).$mount(<span class="string">&#x27;#app&#x27;</span>);</span><br></pre></td></tr></table></figure><p>在上面的示例中，我们首先通过 <code>import</code> 将 Vue 和 VueI18n 引入，然后使用 <code>Vue.use()</code> 方法注册 VueI18n 插件。</p><p>接下来，我们创建了一个名为 <code>i18n</code> 的实例，并传入了一些配置参数。其中，<code>locale</code> 参数指定了当前的语言环境，<code>messages</code> 参数是一个对象，它按照语言代码为键，包含了对应的翻译内容。</p><p>最后，在创建 Vue 实例时，我们将 <code>i18n</code> 实例作为参数传入，从而将其注入到所有的子组件中，使其可以调用 𝑡函数进行翻译。<em>t</em>函数进行翻译。</p><p>在组件中使用t 函数非常简单，只需在模板中使用插值语法即可。下面是一个使用 $t 函数的示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;p&gt;&#123;&#123; $t(&#x27;welcome&#x27;) &#125;&#125;&lt;/p&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><h3 id="问题记录"><a href="#问题记录" class="headerlink" title="问题记录"></a>问题记录</h3><p><strong>1.todo</strong></p><p>todo</p><h3 id="项目展示"><a href="#项目展示" class="headerlink" title="项目展示"></a>项目展示</h3><p>todo</p>]]></content>
      
      
      <categories>
          
          <category> 项目 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>封装悬浮组件</title>
      <link href="/2024/06/25/vue-%E5%B0%81%E8%A3%85%E6%82%AC%E6%B5%AE%E7%BB%84%E4%BB%B6/"/>
      <url>/2024/06/25/vue-%E5%B0%81%E8%A3%85%E6%82%AC%E6%B5%AE%E7%BB%84%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p><strong>概要：</strong>在这篇记录中，我们将学习实现悬浮组件的思路。</p><h3 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h3><p>我打算给最近新起的项目-thre.js演示场增加一个悬浮按钮，正常状态就半透明，然后缩小紧贴右边，鼠标悬浮上去后，变为不透明，且变大并显示完整内容，可以在其上按住鼠标左键进行上下拖动。我们来看看如何实现这个需求吧。</p><h3 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h3><p>药拖动这些，肯定少不了鼠标事件，下面是我们可能要用到的相关事件。</p><h4 id="相关事件"><a href="#相关事件" class="headerlink" title="相关事件"></a>相关事件</h4><ol><li><strong>mouseenter</strong>： 当鼠标指针进入一个元素时触发。用于显示隐藏内容、改变样式、触发动画等。</li><li><strong>mousedown</strong>： 当用户按下鼠标按钮时触发。用于开始拖拽操作、绘图、按住时长判断等。</li><li><strong>mousemove</strong>： 当鼠标在元素上移动时触发。用于拖拽操作、绘图、实时跟踪鼠标位置等。</li><li><strong>mouseup</strong>： 当用户释放鼠标按钮时触发。用于结束拖拽操作、停止绘图、判断点击完成等。</li><li><strong>mouseleave</strong>： 当鼠标指针离开一个元素时触发。用于隐藏内容、恢复样式、停止动画等。</li></ol><h3 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h3><p><strong>样式绑定</strong>：使用<code>buttonStyle</code>计算属性动态控制按钮的样式，包括透明度、缩放、位置等。也可以根据状态动态改变class，然后根据clsss来实现不同的样式。</p><p><strong>鼠标事件处理</strong>：<code>onMouseOver</code>和<code>onMouseLeave</code>控制按钮的悬浮状态；<code>onMouseDown</code>、<code>onMouseUp</code>和<code>onMouseMove</code>实现拖拽功能。</p><p><strong>CSS过渡效果</strong>：通过<code>transition</code>属性来平滑过渡透明度和尺寸变化。</p><h3 id="实现过程"><a href="#实现过程" class="headerlink" title="实现过程"></a>实现过程</h3><p>我们先把处了拖动之外的样式和交互做出来，还有关闭按钮。在做关闭按钮时，我遇到个bug，监听点击事件不生效，我初步判断父级的mousedown拦截了这个事件。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div</span><br><span class="line">    v-if=&quot;isShow&quot;</span><br><span class="line">    class=&quot;floating-button&quot;</span><br><span class="line">    :style=&quot;buttonStyle&quot;</span><br><span class="line">    @mouseover=&quot;onMouseOver&quot;</span><br><span class="line">    @mouseleave=&quot;onMouseLeave&quot;</span><br><span class="line">    @mousedown=&quot;onMouseDown&quot;</span><br><span class="line">    @mouseup=&quot;onMouseUp&quot;</span><br><span class="line">    @mousemove=&quot;onMouseMove&quot;</span><br><span class="line">  &gt;</span><br><span class="line">    &lt;!-- 这里放置按钮的内容 --&gt;</span><br><span class="line">    &lt;slot name=&quot;expand&quot; v-if=&quot;isHovered&quot;&gt; 展开后显示内容 &lt;/slot&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 尾部，关闭按钮 --&gt;</span><br><span class="line">    &lt;div v-if=&quot;isHovered&quot; class=&quot;floating-button-tail&quot;&gt;</span><br><span class="line">      &lt;div class=&quot;vertical-line&quot;&gt;&lt;/div&gt;</span><br><span class="line">      &lt;font-awesome-icon class=&quot;close-icon&quot; :icon=&quot;[&#x27;fas&#x27;, &#x27;xmark&#x27;]&quot; @click=&quot;clickCloseHandle&quot; /&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;slot name=&quot;collapse&quot; v-else&gt; 笔记 &lt;/slot&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><p>查了下MDN，<code>click</code> 事件确实是在 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Element/mousedown_event"><code>mousedown</code></a> 和 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Element/mouseup_event"><code>mouseup</code></a> 事件依次触发后再触发。但是我也没在这两个事件中使用 <code>event.stopPropagation()</code> 来阻止事件冒泡呀。真是奇怪，只能是认为浏览器判定这是一次mousedown和一次mouseup事件吧。</p><p>解决这个问题的办法也多，一个是在按钮那加阻止mousedown冒泡的逻辑：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;font-awesome-icon class=&quot;close-icon&quot; :icon=&quot;[&#x27;fas&#x27;, &#x27;xmark&#x27;]&quot; @mousedown.stop @click=&quot;clickCloseHandle&quot; /&gt;</span><br></pre></td></tr></table></figure><p>第二种方案就是不使用click事件，而是就利用最外层元素的mousedown事件，来进行判定：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">onMouseDown</span> = (<span class="params">event</span>) =&gt; &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;onMouseDown&quot;</span>, event.<span class="property">target</span>.<span class="property">tagName</span>);</span><br><span class="line">  <span class="comment">// 因为点击事件会触发MouseDown，从而导致意外情况，所以在MouseDown中判断是否是点击事件</span></span><br><span class="line">  <span class="keyword">if</span> (event.<span class="property">target</span>.<span class="property">tagName</span> === <span class="string">&quot;path&quot;</span> || event.<span class="property">target</span>.<span class="property">tagName</span> === <span class="string">&quot;svg&quot;</span>) &#123;</span><br><span class="line">    <span class="title function_">clickCloseHandle</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  isDragging.<span class="property">value</span> = <span class="literal">true</span>;</span><br><span class="line">  startY.<span class="property">value</span> = event.<span class="property">clientY</span>;</span><br><span class="line">  startTop.<span class="property">value</span> = top.<span class="property">value</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>延伸想法，外层套个wrap，拖动范围还是在按钮那，但是拖动是对wrap元素的Top属性生效的，这样可以带动wrap中其他元素进行移动，还能增加不同的点击事件。</p><h3 id="TODO"><a href="#TODO" class="headerlink" title="TODO"></a>TODO</h3>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>three.js演示场</title>
      <link href="/2024/06/18/%E9%A1%B9%E7%9B%AE-three.js%E6%BC%94%E7%A4%BA%E5%9C%BA/"/>
      <url>/2024/06/18/%E9%A1%B9%E7%9B%AE-three.js%E6%BC%94%E7%A4%BA%E5%9C%BA/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p><strong>概要：</strong>因为要学习three.js，又不能总拿公司的项目当实验场所，索性就新起个项目当作演示场，这里顺便记录下步骤。</p><h3 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h3><p>本次技术选型准备采用最新版本的vue3、vite、element-plus</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm init vite@latest</span><br></pre></td></tr></table></figure><p>执行该命令后，系统会询问一些问题，如项目名称、使用的框架（选择 Vue）、是否使用 TypeScript 等</p><p><img src="https://cdn.jsdelivr.net/gh/pengpen1/blog-images/20240618140009.png"></p><p>然后试试项目能否跑起来，没问题的话，删除脚手架默认提供的页面组件，并按照自己的架构设计创建文件夹，最后把README.md文件加上：</p><p><img src="https://cdn.jsdelivr.net/gh/pengpen1/blog-images/20240618140249.png"></p><p>然后我们在GitHub或者其他远程托管仓库中简历新仓库</p><p><img src="https://cdn.jsdelivr.net/gh/pengpen1/blog-images/20240618135440.png"></p><p>然后用git命令初始化一下我们的项目、添加暂存区、提交、重命名主分支(有些版本默认是master)、设置远程仓库地址、推送到远程仓库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br><span class="line">git add .</span><br><span class="line">git commit -m &quot;[init]初始化项目结构&quot;</span><br><span class="line">git branch -M main</span><br><span class="line">git remote add origin https://github.com/pengpen1/three-demo-site.git</span><br><span class="line">git push -u origin main</span><br></pre></td></tr></table></figure><p>然后在GitHub刷新一下就能看到我们新建的项目啦</p><p><img src="https://cdn.jsdelivr.net/gh/pengpen1/blog-images/20240619102818.png"></p><h3 id="问题记录"><a href="#问题记录" class="headerlink" title="问题记录"></a>问题记录</h3><p><strong>1.使用element-plus提供的布局组件进行布局时，右边出现意料之外的滚动条</strong></p><p>这个问题的原因是在初始化css中，对body加了10的padding，导致高度溢出造成的。在我手写布局的时候，发现一个有趣的问题，如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- &lt;el-container&gt;</span><br><span class="line">  &lt;nav-bar /&gt;</span><br><span class="line">  &lt;el-main&gt;&lt;router-view&gt;&lt;/router-view&gt;&lt;/el-main&gt;</span><br><span class="line">&lt;/el-container&gt; --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 手写布局 --&gt;</span><br><span class="line">&lt;div class=&quot;container&quot;&gt;</span><br><span class="line">    &lt;nav-bar /&gt;</span><br><span class="line">  &lt;section class=&quot;main-container&quot;&gt;</span><br><span class="line">    &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line">  &lt;/section&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>项目布局是一样的，父容器加上<code>display: flex;</code>，左子容器固定宽度，右子容器<code> flex: 1;</code>，理想中应该是就算在子容器的宽度发生变化，右子容器的宽度也应该是自适应的，也就是填充剩余的宽度。但是只有el-main成功，手写宽度没有任何变化。</p><p>然后我对比与el-main样式上的区别，发现是这个属性造成的这种现象：<code>overflow: auto;</code>，查了一下，是因为加 <code>overflow: auto</code> 后，<code>.main-container</code> 会触发 BFC，BFC除了可以清除浮动，还对布局有影响，调整一个元素的尺寸（比如 <code>nav-bar</code> 的宽度），其他 flex 子元素会正确地重新计算和调整大小。</p><h3 id="项目展示"><a href="#项目展示" class="headerlink" title="项目展示"></a>项目展示</h3><p><img src="https://cdn.jsdelivr.net/gh/pengpen1/blog-images/20240620093606.png"></p><p><a href="https://github.com/pengpen1/three-demo-site">项目地址</a></p>]]></content>
      
      
      <categories>
          
          <category> 项目 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>封装电池组件</title>
      <link href="/2024/06/13/vue-%E5%B0%81%E8%A3%85%E7%94%B5%E6%B1%A0%E7%BB%84%E4%BB%B6/"/>
      <url>/2024/06/13/vue-%E5%B0%81%E8%A3%85%E7%94%B5%E6%B1%A0%E7%BB%84%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p><strong>概要：</strong>在这篇记录中，我们将学习实现电池组件的思路。</p><h3 id="思路1：计算宽度实现"><a href="#思路1：计算宽度实现" class="headerlink" title="思路1：计算宽度实现"></a>思路1：计算宽度实现</h3><p><img src="https://cdn.jsdelivr.net/gh/pengpen1/blog-images/20240613163711.png"></p><p>这个方案简单粗暴，外层容器加个溢出隐藏，内部电量的宽度根据传入的电量直接计算即可，可以精确到小数。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;battery&quot;&gt;</span><br><span class="line">    &lt;div</span><br><span class="line">      class=&quot;battery-level&quot;</span><br><span class="line">      :style=&quot;&#123; width: filledCellsWidth, backgroundColor: color &#125;&quot;</span><br><span class="line">    &gt;&lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; computed &#125; from &quot;vue&quot;;</span><br><span class="line"></span><br><span class="line">const props = defineProps(&#123;</span><br><span class="line">  percentage: &#123;</span><br><span class="line">    type: String,</span><br><span class="line">    required: true,</span><br><span class="line">  &#125;,</span><br><span class="line">  color: &#123;</span><br><span class="line">    type: String,</span><br><span class="line">    required: true,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line">// 计算填充宽度</span><br><span class="line">const filledCellsWidth = computed(() =&gt; `$&#123;props.percentage&#125;%`);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">.battery &#123;</span><br><span class="line">  width: 200px;</span><br><span class="line">  height: 50px;</span><br><span class="line">  border: 1px solid #ccc;</span><br><span class="line">  border-radius: 8px;</span><br><span class="line">  background-color: #e0e0e0;</span><br><span class="line">  position: relative;</span><br><span class="line">  overflow: hidden;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.battery-level &#123;</span><br><span class="line">  height: 100%;</span><br><span class="line">  transition: width 0.3s ease;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h3 id="思路2：计算电量格数实现"><a href="#思路2：计算电量格数实现" class="headerlink" title="思路2：计算电量格数实现"></a>思路2：计算电量格数实现</h3><p><img src="https://cdn.jsdelivr.net/gh/pengpen1/blog-images/20240613164104.png"></p><p>实现思路是固定电量格子数，然后根据传入的电量，计算出占多少个电量格子（向上取整），然后渲染出来即可，这个发案不能精确到小数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;battery&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">class</span>=<span class="string">&quot;cell&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">v-for</span>=<span class="string">&quot;cell in cells&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">:key</span>=<span class="string">&quot;cell.id&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">:style</span>=<span class="string">&quot;cell.style&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    &gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> &#123; computed &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">const</span> props = <span class="title function_">defineProps</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">percentage</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">type</span>: <span class="title class_">Number</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">required</span>: <span class="literal">true</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">color</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">type</span>: <span class="title class_">String</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">required</span>: <span class="literal">true</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">const</span> totalCells = <span class="number">10</span>; <span class="comment">// 总电池格数</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// 创建电池格数组</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">const</span> cells = <span class="title function_">computed</span>(<span class="function">() =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">const</span> cellsFilled = <span class="title class_">Math</span>.<span class="title function_">ceil</span>((props.<span class="property">percentage</span> / <span class="number">100</span>) * totalCells);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">return</span> <span class="title class_">Array</span>.<span class="title function_">from</span>(&#123; <span class="attr">length</span>: totalCells &#125;, <span class="function">(<span class="params">_, index</span>) =&gt;</span> (&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">id</span>: index,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">style</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">backgroundColor</span>: index &lt; cellsFilled ? props.<span class="property">color</span> : <span class="string">&quot;#e0e0e0&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">borderTopLeftRadius</span>: index === <span class="number">0</span> ? <span class="string">&quot;50% 50%&quot;</span> : <span class="number">0</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">borderBottomLeftRadius</span>: index === <span class="number">0</span> ? <span class="string">&quot;50% 50%&quot;</span> : <span class="number">0</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">borderTopRightRadius</span>: index === totalCells - <span class="number">1</span> ? <span class="string">&quot;50% 50%&quot;</span> : <span class="number">0</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">borderBottomRightRadius</span>: index === totalCells - <span class="number">1</span> ? <span class="string">&quot;50% 50%&quot;</span> : <span class="number">0</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;));</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="language-css"></span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"><span class="selector-class">.battery</span> &#123;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">display</span>: flex;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">width</span>: <span class="number">260px</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">height</span>: <span class="number">80px</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">padding</span>: <span class="number">2px</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">border-radius</span>: <span class="number">12px</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">background-color</span>: <span class="number">#e0e0e0</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"><span class="selector-class">.cell</span> &#123;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">flex</span>: <span class="number">1</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">margin</span>: <span class="number">2px</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">transition</span>: background-color <span class="number">0.3s</span> ease;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="思路3：计算遮罩宽度实现"><a href="#思路3：计算遮罩宽度实现" class="headerlink" title="思路3：计算遮罩宽度实现"></a>思路3：计算遮罩宽度实现</h3><p>实现思路，先把电量渲染出来，当成背景，然后根据传进来的电量，计算遮罩的宽度，然后遮罩从右向左进行遮挡即可。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>实现方式多种多样，需求也是多种多样，我们要扩展自己的思路，以应对将来的各种需求。</p>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>重叠折线图</title>
      <link href="/2024/06/12/echarts-%E9%87%8D%E5%8F%A0%E6%8A%98%E7%BA%BF%E5%9B%BE/"/>
      <url>/2024/06/12/echarts-%E9%87%8D%E5%8F%A0%E6%8A%98%E7%BA%BF%E5%9B%BE/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p><strong>概要：</strong>在这篇记录中，我们将学习竖向共用x轴和横向共用y轴这两种折线图的实现思路。</p><h3 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h3><p><strong>图表布局和类型</strong></p><p>ECharts 中<code>grid</code> 组件用于指定图表的网格（布局），而 <code>xAxis</code> 和 <code>yAxis</code> 是与 <code>grid</code> 相关联的，它们定义了图表的坐标轴。通过 <code>gridIndex</code> 属性，<code>xAxis</code> 和 <code>yAxis</code> 可以与特定的 <code>grid</code> 相关联，从而在同一个图表实例中创建多个坐标系。</p><p><code>series</code>，它确实是用来决定图形的展示方式（如折线图、柱状图、饼图等），以及展示的数据内容。<code>series</code> 通过指定 <code>xAxisIndex</code> 和 <code>yAxisIndex</code> 来关联特定的 <code>xAxis</code> 和 <code>yAxis</code>。这样，即使你有多个 <code>grid</code>，你也可以通过指定系列与哪个 <code>xAxis</code> 和 <code>yAxis</code> 相关联，来控制该系列应显示在哪个网格中。总结：</p><ul><li>Grid：定义了图表的布局和边框，你可以在一个 ECharts 实例中设置多个 <code>grid</code>。</li><li>xAxis 和 yAxis：定义了坐标轴，通过 <code>gridIndex</code> 可以关联到特定的 <code>grid</code>。</li><li>Series：定义了图表的数据和图形类型（如柱状、折线等），通过 <code>xAxisIndex</code> 和 <code>yAxisIndex</code> 与特定的坐标轴关联，从而确定其在布局中的位置。</li></ul><h3 id="竖向共用x轴"><a href="#竖向共用x轴" class="headerlink" title="竖向共用x轴"></a>竖向共用x轴</h3><p><img src="https://cdn.jsdelivr.net/gh/pengpen1/blog-images/20240612144431.png"></p><p>实现思路是先用grid对两组x轴y轴进行布局，然后隐藏掉下面一组的x轴坐标和标签，调整上面一组的x轴标签的距离即可：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> option = &#123;</span><br><span class="line">  <span class="attr">tooltip</span>: &#123;</span><br><span class="line">    <span class="attr">trigger</span>: <span class="string">&quot;axis&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">legend</span>: &#123;</span><br><span class="line">    <span class="attr">show</span>: <span class="literal">false</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">grid</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="comment">// Top grid</span></span><br><span class="line">      <span class="attr">top</span>: <span class="string">&quot;5%&quot;</span>,</span><br><span class="line">      <span class="attr">left</span>: <span class="string">&quot;10%&quot;</span>,</span><br><span class="line">      <span class="attr">right</span>: <span class="string">&quot;10%&quot;</span>,</span><br><span class="line">      <span class="attr">height</span>: <span class="string">&quot;35%&quot;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="comment">// 底部折线图的grid</span></span><br><span class="line">      <span class="attr">left</span>: <span class="string">&quot;10%&quot;</span>,</span><br><span class="line">      <span class="attr">right</span>: <span class="string">&quot;10%&quot;</span>,</span><br><span class="line">      <span class="attr">top</span>: <span class="string">&quot;55%&quot;</span>,</span><br><span class="line">      <span class="attr">height</span>: <span class="string">&quot;35%&quot;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">xAxis</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="comment">// Top X Axis</span></span><br><span class="line">      <span class="attr">type</span>: <span class="string">&quot;category&quot;</span>,</span><br><span class="line">      <span class="attr">boundaryGap</span>: <span class="literal">false</span>,</span><br><span class="line">      <span class="attr">axisTick</span>: &#123;</span><br><span class="line">        <span class="attr">show</span>: <span class="literal">false</span>, <span class="comment">// 取消刻度线显示</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">axisLabel</span>: &#123;</span><br><span class="line">        <span class="attr">show</span>: <span class="literal">true</span>, <span class="comment">// 显示底部的名称</span></span><br><span class="line">        <span class="attr">margin</span>: <span class="number">12</span>, <span class="comment">// 标签与轴线的距离</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">axisLine</span>: &#123;</span><br><span class="line">        <span class="attr">show</span>: <span class="literal">false</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">data</span>: [<span class="string">&quot;04-15&quot;</span>, <span class="string">&quot;04-30&quot;</span>, <span class="string">&quot;05-15&quot;</span>, <span class="string">&quot;05-30&quot;</span>, <span class="string">&quot;06-15&quot;</span>, <span class="string">&quot;06-30&quot;</span>],</span><br><span class="line">      <span class="attr">gridIndex</span>: <span class="number">0</span>,</span><br><span class="line">      <span class="attr">axisPointer</span>: &#123;</span><br><span class="line">        <span class="attr">show</span>: <span class="literal">true</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="comment">// Bottom X Axis</span></span><br><span class="line">      <span class="attr">type</span>: <span class="string">&quot;category&quot;</span>,</span><br><span class="line">      <span class="attr">show</span>: <span class="literal">false</span>,</span><br><span class="line">      <span class="attr">boundaryGap</span>: <span class="literal">false</span>,</span><br><span class="line">      <span class="attr">data</span>: [<span class="string">&quot;04-15&quot;</span>, <span class="string">&quot;04-30&quot;</span>, <span class="string">&quot;05-15&quot;</span>, <span class="string">&quot;05-30&quot;</span>, <span class="string">&quot;06-15&quot;</span>, <span class="string">&quot;06-30&quot;</span>],</span><br><span class="line">      <span class="attr">gridIndex</span>: <span class="number">1</span>,</span><br><span class="line">      <span class="attr">axisPointer</span>: &#123;</span><br><span class="line">        <span class="attr">show</span>: <span class="literal">true</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">yAxis</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="comment">// Top Y Axis</span></span><br><span class="line">      <span class="attr">type</span>: <span class="string">&quot;value&quot;</span>,</span><br><span class="line">      <span class="attr">gridIndex</span>: <span class="number">0</span>,</span><br><span class="line">      <span class="attr">splitLine</span>: &#123;</span><br><span class="line">        <span class="attr">show</span>: <span class="literal">true</span>, <span class="comment">// 显示网格的分隔线</span></span><br><span class="line">        <span class="attr">lineStyle</span>: &#123;</span><br><span class="line">          <span class="attr">type</span>: <span class="string">&quot;dashed&quot;</span>, <span class="comment">// 虚线样式</span></span><br><span class="line">          <span class="attr">color</span>: <span class="string">&quot;#333&quot;</span>, <span class="comment">// 线的颜色</span></span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">axisLabel</span>: &#123;</span><br><span class="line">        <span class="attr">color</span>: <span class="string">&quot;#cecdcfcc&quot;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="comment">// Bottom Y Axis</span></span><br><span class="line">      <span class="attr">type</span>: <span class="string">&quot;value&quot;</span>,</span><br><span class="line">      <span class="attr">gridIndex</span>: <span class="number">1</span>,</span><br><span class="line">      <span class="attr">splitLine</span>: &#123;</span><br><span class="line">        <span class="attr">show</span>: <span class="literal">true</span>, <span class="comment">// 显示网格的分隔线</span></span><br><span class="line">        <span class="attr">lineStyle</span>: &#123;</span><br><span class="line">          <span class="attr">type</span>: <span class="string">&quot;dashed&quot;</span>, <span class="comment">// 虚线样式</span></span><br><span class="line">          <span class="attr">color</span>: <span class="string">&quot;#333&quot;</span>, <span class="comment">// 线的颜色</span></span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">axisLabel</span>: &#123;</span><br><span class="line">        <span class="attr">color</span>: <span class="string">&quot;#cecdcfcc&quot;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">series</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="comment">// Series for General Assets</span></span><br><span class="line">      <span class="attr">name</span>: <span class="string">&quot;一般资产&quot;</span>,</span><br><span class="line">      <span class="attr">type</span>: <span class="string">&quot;line&quot;</span>,</span><br><span class="line">      <span class="attr">xAxisIndex</span>: <span class="number">0</span>,</span><br><span class="line">      <span class="attr">yAxisIndex</span>: <span class="number">0</span>,</span><br><span class="line">      <span class="attr">data</span>: [<span class="number">2</span>, <span class="number">6</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">13</span>, <span class="number">16</span>],</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="comment">// Series for Important Assets</span></span><br><span class="line">      <span class="attr">name</span>: <span class="string">&quot;重要资产&quot;</span>,</span><br><span class="line">      <span class="attr">type</span>: <span class="string">&quot;line&quot;</span>,</span><br><span class="line">      <span class="attr">xAxisIndex</span>: <span class="number">0</span>,</span><br><span class="line">      <span class="attr">yAxisIndex</span>: <span class="number">0</span>,</span><br><span class="line">      <span class="attr">data</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">12</span>, <span class="number">15</span>],</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="comment">// Series for Core Assets</span></span><br><span class="line">      <span class="attr">name</span>: <span class="string">&quot;核心资产&quot;</span>,</span><br><span class="line">      <span class="attr">type</span>: <span class="string">&quot;line&quot;</span>,</span><br><span class="line">      <span class="attr">xAxisIndex</span>: <span class="number">1</span>,</span><br><span class="line">      <span class="attr">yAxisIndex</span>: <span class="number">1</span>,</span><br><span class="line">      <span class="attr">data</span>: [<span class="number">50</span>, <span class="number">100</span>, <span class="number">150</span>, <span class="number">130</span>, <span class="number">160</span>, <span class="number">190</span>],</span><br><span class="line">    &#125;,</span><br><span class="line">  ],</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="横向共用y轴"><a href="#横向共用y轴" class="headerlink" title="横向共用y轴"></a>横向共用y轴</h3><p><img src="https://cdn.jsdelivr.net/gh/pengpen1/blog-images/20240612145209.png"></p><p>这个的实现思路和上面一个略有不同，这次额外加了个grid和y轴，用这个新加的y轴作为左右两个折线图的共用y轴：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> option = &#123;</span><br><span class="line">  <span class="attr">baseOption</span>: &#123;</span><br><span class="line">    <span class="attr">timeline</span>: &#123;</span><br><span class="line">      <span class="attr">show</span>: <span class="literal">false</span>,</span><br><span class="line">      <span class="attr">top</span>: <span class="number">0</span>,</span><br><span class="line">      <span class="attr">data</span>: [],</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">label</span>: &#123;</span><br><span class="line">      <span class="attr">show</span>: <span class="literal">false</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">tooltip</span>: &#123;</span><br><span class="line">      <span class="attr">trigger</span>: <span class="string">&quot;item&quot;</span>,</span><br><span class="line">      <span class="attr">backgroundColor</span>: <span class="string">&quot;rgba(1, 13, 19, 0.5)&quot;</span>,</span><br><span class="line">      <span class="attr">textStyle</span>: &#123;</span><br><span class="line">        <span class="attr">color</span>: <span class="string">&quot;rgba(255, 255, 255, 1)&quot;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">grid</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">left</span>: <span class="string">&quot;5%&quot;</span>,</span><br><span class="line">        <span class="attr">top</span>: <span class="string">&quot;10%&quot;</span>,</span><br><span class="line">        <span class="attr">bottom</span>: <span class="string">&quot;8%&quot;</span>,</span><br><span class="line">        <span class="attr">containLabel</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">width</span>: <span class="string">&quot;37%&quot;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">left</span>: <span class="string">&quot;54%&quot;</span>,</span><br><span class="line">        <span class="attr">top</span>: <span class="string">&quot;10%&quot;</span>,</span><br><span class="line">        <span class="attr">bottom</span>: <span class="string">&quot;8%&quot;</span>,</span><br><span class="line">        <span class="attr">width</span>: <span class="string">&quot;0%&quot;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">right</span>: <span class="string">&quot;2%&quot;</span>,</span><br><span class="line">        <span class="attr">top</span>: <span class="string">&quot;10%&quot;</span>,</span><br><span class="line">        <span class="attr">bottom</span>: <span class="string">&quot;8%&quot;</span>,</span><br><span class="line">        <span class="attr">containLabel</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">width</span>: <span class="string">&quot;37%&quot;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">xAxis</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&quot;value&quot;</span>,</span><br><span class="line">        <span class="attr">inverse</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">axisLine</span>: &#123;</span><br><span class="line">          <span class="attr">show</span>: <span class="literal">false</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">axisTick</span>: &#123;</span><br><span class="line">          <span class="attr">show</span>: <span class="literal">false</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">position</span>: <span class="string">&quot;bottom&quot;</span>,</span><br><span class="line">        <span class="attr">axisLabel</span>: &#123;</span><br><span class="line">          <span class="attr">show</span>: <span class="literal">true</span>,</span><br><span class="line">          <span class="attr">color</span>: textColor,</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">splitLine</span>: &#123;</span><br><span class="line">          <span class="attr">show</span>: <span class="literal">true</span>,</span><br><span class="line">          <span class="attr">lineStyle</span>: &#123;</span><br><span class="line">            <span class="attr">color</span>: lineColor,</span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">gridIndex</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">show</span>: <span class="literal">false</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">gridIndex</span>: <span class="number">2</span>,</span><br><span class="line">        <span class="attr">axisLine</span>: &#123;</span><br><span class="line">          <span class="attr">show</span>: <span class="literal">false</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">axisTick</span>: &#123;</span><br><span class="line">          <span class="attr">show</span>: <span class="literal">false</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">position</span>: <span class="string">&quot;bottom&quot;</span>,</span><br><span class="line">        <span class="attr">axisLabel</span>: &#123;</span><br><span class="line">          <span class="attr">show</span>: <span class="literal">true</span>,</span><br><span class="line">          <span class="attr">color</span>: textColor,</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">splitLine</span>: &#123;</span><br><span class="line">          <span class="attr">show</span>: <span class="literal">true</span>,</span><br><span class="line">          <span class="attr">lineStyle</span>: &#123;</span><br><span class="line">            <span class="attr">color</span>: lineColor,</span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">yAxis</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&quot;category&quot;</span>,</span><br><span class="line">        <span class="comment">// inverse: true,</span></span><br><span class="line">        <span class="attr">position</span>: <span class="string">&quot;right&quot;</span>,</span><br><span class="line">        <span class="attr">axisLine</span>: &#123;</span><br><span class="line">          <span class="attr">show</span>: <span class="literal">true</span>,</span><br><span class="line">          <span class="attr">lineStyle</span>: &#123;</span><br><span class="line">            <span class="attr">color</span>: lineColor,</span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        <span class="attr">axisTick</span>: &#123;</span><br><span class="line">          <span class="attr">show</span>: <span class="literal">false</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">axisLabel</span>: &#123;</span><br><span class="line">          <span class="attr">show</span>: <span class="literal">false</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">data</span>: xData,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">gridIndex</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&quot;category&quot;</span>,</span><br><span class="line">        <span class="attr">inverse</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">position</span>: <span class="string">&quot;left&quot;</span>,</span><br><span class="line">        <span class="attr">axisLine</span>: &#123;</span><br><span class="line">          <span class="attr">show</span>: <span class="literal">false</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">axisTick</span>: &#123;</span><br><span class="line">          <span class="attr">show</span>: <span class="literal">false</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">axisLabel</span>: &#123;</span><br><span class="line">          <span class="attr">show</span>: <span class="literal">true</span>,</span><br><span class="line">          <span class="attr">padding</span>: [<span class="number">30</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">          <span class="attr">textStyle</span>: &#123;</span><br><span class="line">            <span class="attr">color</span>: <span class="string">&quot;#ffffff&quot;</span>,</span><br><span class="line">            <span class="attr">fontSize</span>: <span class="number">14</span>,</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">align</span>: <span class="string">&quot;center&quot;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">data</span>: xData.<span class="title function_">map</span>(<span class="keyword">function</span> (<span class="params">value</span>) &#123;</span><br><span class="line">          <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="attr">value</span>: value,</span><br><span class="line">            <span class="attr">textStyle</span>: &#123;</span><br><span class="line">              <span class="attr">align</span>: <span class="string">&quot;center&quot;</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">          &#125;;</span><br><span class="line">        &#125;),</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">gridIndex</span>: <span class="number">2</span>,</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&quot;category&quot;</span>,</span><br><span class="line">        <span class="comment">// inverse: true,</span></span><br><span class="line">        <span class="attr">position</span>: <span class="string">&quot;left&quot;</span>,</span><br><span class="line">        <span class="attr">axisLine</span>: &#123;</span><br><span class="line">          <span class="attr">show</span>: <span class="literal">true</span>,</span><br><span class="line">          <span class="attr">lineStyle</span>: &#123;</span><br><span class="line">            <span class="attr">color</span>: lineColor,</span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">axisTick</span>: &#123;</span><br><span class="line">          <span class="attr">show</span>: <span class="literal">false</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">axisLabel</span>: &#123;</span><br><span class="line">          <span class="attr">show</span>: <span class="literal">false</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">data</span>: xData,</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">series</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&quot;2018&quot;</span>,</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&quot;line&quot;</span>,</span><br><span class="line">        <span class="attr">barWidth</span>: <span class="number">25</span>,</span><br><span class="line">        <span class="attr">stack</span>: <span class="string">&quot;1&quot;</span>,</span><br><span class="line">        <span class="attr">itemStyle</span>: &#123;</span><br><span class="line">          <span class="attr">normal</span>: &#123;</span><br><span class="line">            <span class="attr">color</span>: <span class="keyword">new</span> echarts.<span class="property">graphic</span>.<span class="title class_">LinearGradient</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, [</span><br><span class="line">              &#123;</span><br><span class="line">                <span class="attr">offset</span>: <span class="number">0</span>,</span><br><span class="line">                <span class="attr">color</span>: colors[<span class="number">0</span>].<span class="property">start</span>,</span><br><span class="line">              &#125;,</span><br><span class="line">              &#123;</span><br><span class="line">                <span class="attr">offset</span>: <span class="number">1</span>,</span><br><span class="line">                <span class="attr">color</span>: colors[<span class="number">0</span>].<span class="property">end</span>,</span><br><span class="line">              &#125;,</span><br><span class="line">            ]),</span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">data</span>: lastYearData,</span><br><span class="line">        <span class="attr">animationEasing</span>: <span class="string">&quot;elasticOut&quot;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&quot;2018&quot;</span>,</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&quot;line&quot;</span>,</span><br><span class="line">        <span class="attr">stack</span>: <span class="string">&quot;2&quot;</span>,</span><br><span class="line">        <span class="attr">barWidth</span>: <span class="number">25</span>,</span><br><span class="line">        <span class="attr">xAxisIndex</span>: <span class="number">2</span>,</span><br><span class="line">        <span class="attr">yAxisIndex</span>: <span class="number">2</span>,</span><br><span class="line">        <span class="attr">itemStyle</span>: &#123;</span><br><span class="line">          <span class="attr">normal</span>: &#123;</span><br><span class="line">            <span class="attr">color</span>: <span class="keyword">new</span> echarts.<span class="property">graphic</span>.<span class="title class_">LinearGradient</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, [</span><br><span class="line">              &#123;</span><br><span class="line">                <span class="attr">offset</span>: <span class="number">0</span>,</span><br><span class="line">                <span class="attr">color</span>: colors[<span class="number">1</span>].<span class="property">start</span>,</span><br><span class="line">              &#125;,</span><br><span class="line">              &#123;</span><br><span class="line">                <span class="attr">offset</span>: <span class="number">1</span>,</span><br><span class="line">                <span class="attr">color</span>: colors[<span class="number">1</span>].<span class="property">end</span>,</span><br><span class="line">              &#125;,</span><br><span class="line">            ]),</span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">data</span>: thisYearData,</span><br><span class="line">        <span class="attr">animationEasing</span>: <span class="string">&quot;elasticOut&quot;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> echarts </category>
          
      </categories>
      
      
        <tags>
            
            <tag> echarts </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>循环展示tooltip</title>
      <link href="/2024/06/06/echarts-%E5%BE%AA%E7%8E%AF%E5%B1%95%E7%A4%BAtooltip/"/>
      <url>/2024/06/06/echarts-%E5%BE%AA%E7%8E%AF%E5%B1%95%E7%A4%BAtooltip/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p><strong>概要：</strong>在这篇记录中，我们将学习echarts中的折线图，饼图如何定时展示tooltip。</p><h3 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h3><p><strong>action</strong></p><p>ECharts 中支持多种图表行为，比如缩放、高亮、tooltip，除了我们手动触发外还能通过实例上的 <a href="https://echarts.apache.org/zh/api.html#echartsInstance.dispatchAction">dispatchAction</a>函数进行触发。比如触发缩放：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">myChart.<span class="title function_">dispatchAction</span>(&#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&#x27;dataZoom&#x27;</span>,</span><br><span class="line">    <span class="attr">start</span>: <span class="number">20</span>,</span><br><span class="line">    <span class="attr">end</span>: <span class="number">30</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>setOption</strong></p><p>设置图表实例的配置项以及数据的万能接口，所有参数和数据的修改都可以通过 <code>setOption</code> 完成，ECharts 会合并新的参数和数据，然后刷新图表。根据这个特质，我们可以做很多功能，如循环展示自定义文本，图片等等。</p><p><strong>定时器控制器</strong></p><p>对于一个大型可视化图表，或者大屏，可能会用到很多次定时器。我们最好是进行统一管理，免得出现内存泄露或者意料之外的情况。</p><p>比如我最近做的大屏，结构上分为三层，每一层都会用到定时器，第一层主菜单，需要定时获取当前时间进行显示。第二层为各个大屏，包含两侧图表和中间的地图，有些需要无缝滚动，有些需要定时展示tooltip。第三层为大屏公用的地图组件，需要每隔10s切换标记点。这三层如果各自分开管理，那维护的人会很难受，所以我封装了下面的定时器控制器：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">TimerControl</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">timers</span> = [];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 添加定时器</span></span><br><span class="line">  <span class="title function_">addTimer</span>(<span class="params">timer</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title class_">Array</span>.<span class="title function_">isArray</span>(timer)) &#123;</span><br><span class="line">      timer.<span class="title function_">forEach</span>(<span class="function">(<span class="params">t</span>) =&gt;</span> <span class="variable language_">this</span>.<span class="title function_">addTimer</span>(t));</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> &#123; interval, callback, id &#125; = timer;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="title function_">hasTimer</span>(id)) &#123;</span><br><span class="line">        <span class="comment">// 如果已存在id相同的定时器，则先移除</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">removeTimer</span>(id);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;已存在id为&quot;</span> + id + <span class="string">&quot;的定时器，已移除!&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">const</span> timerItem = <span class="built_in">setInterval</span>(callback, interval);</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">timers</span>.<span class="title function_">push</span>(&#123; id, timerItem, interval, callback &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 移除定时器</span></span><br><span class="line">  <span class="title function_">removeTimer</span>(<span class="params">id</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> index = <span class="variable language_">this</span>.<span class="property">timers</span>.<span class="title function_">findIndex</span>(<span class="function">(<span class="params">timer</span>) =&gt;</span> timer.<span class="property">id</span> === id);</span><br><span class="line">    <span class="keyword">if</span> (index !== -<span class="number">1</span>) &#123;</span><br><span class="line">      <span class="built_in">clearInterval</span>(<span class="variable language_">this</span>.<span class="property">timers</span>[index].<span class="property">timerItem</span>);</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">timers</span>.<span class="title function_">splice</span>(index, <span class="number">1</span>);</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`定时器<span class="subst">$&#123;id&#125;</span>已移除`</span>, <span class="variable language_">this</span>.<span class="title function_">hasTimer</span>(id), <span class="variable language_">this</span>.<span class="property">timers</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 根据ID查询是否存在指定定时器</span></span><br><span class="line">  <span class="title function_">hasTimer</span>(<span class="params">id</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">timers</span>.<span class="title function_">some</span>(<span class="function">(<span class="params">timer</span>) =&gt;</span> timer.<span class="property">id</span> === id);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 获取所有定时器</span></span><br><span class="line">  <span class="title function_">getAllTimers</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">timers</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 获取所有定时器ID</span></span><br><span class="line">  <span class="title function_">getAllTimerIds</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">timers</span>.<span class="title function_">map</span>(<span class="function">(<span class="params">timer</span>) =&gt;</span> timer.<span class="property">id</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 销毁所有定时器</span></span><br><span class="line">  <span class="title function_">destroyAllTimers</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">timers</span>.<span class="title function_">forEach</span>(<span class="function">(<span class="params">timer</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">clearInterval</span>(timer.<span class="property">timerItem</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">timers</span> = [];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 示例</span></span><br><span class="line"><span class="keyword">const</span> timers = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">interval</span>: <span class="number">1000</span>,</span><br><span class="line">    <span class="attr">callback</span>: <span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;定时器1执行&quot;</span>),</span><br><span class="line">    <span class="attr">id</span>: <span class="number">1</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">interval</span>: <span class="number">5000</span>,</span><br><span class="line">    <span class="attr">callback</span>: <span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;定时器2执行&quot;</span>),</span><br><span class="line">    <span class="attr">id</span>: <span class="number">2</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">];</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">TimerControl</span>();</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h3><p><img src="https://cdn.jsdelivr.net/gh/pengpen1/blog-images/20240612100941.png"></p><p>1.对于简单图表，数据基本是不会变化的，所以，我们只需使用定时的取消之前所有高亮图形和高亮并提示当前数据的图形即可：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定时展示 Tooltip</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">showNextTooltip</span> = (<span class="params">data</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> dataLen = data.<span class="property">length</span>; <span class="comment">// 假设所有数据长度一致</span></span><br><span class="line">  currentIndex = (currentIndex + <span class="number">1</span>) % dataLen;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 取消之前所有高亮的图形</span></span><br><span class="line">  chart.<span class="title function_">dispatchAction</span>(&#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&quot;downplay&quot;</span>,</span><br><span class="line">    <span class="attr">seriesIndex</span>: <span class="number">0</span>,</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 高亮当前图形</span></span><br><span class="line">  chart.<span class="title function_">dispatchAction</span>(&#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&quot;highlight&quot;</span>,</span><br><span class="line">    <span class="attr">seriesIndex</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">dataIndex</span>: currentIndex,</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  chart.<span class="title function_">dispatchAction</span>(&#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&quot;showTip&quot;</span>,</span><br><span class="line">    <span class="attr">seriesIndex</span>: <span class="number">0</span>, <span class="comment">// 根据实际情况修改系列索引</span></span><br><span class="line">    <span class="attr">dataIndex</span>: currentIndex,</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>2.除了高亮，一般还要同时切换中间的文本，我们只需要用setOption更新下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 更新中心文字</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">updateCenterText</span>(<span class="params">params</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (!params) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> name = params.<span class="property">name</span>;</span><br><span class="line">  <span class="keyword">if</span> (name.<span class="property">length</span> &gt; <span class="number">8</span>) &#123;</span><br><span class="line">    name = name.<span class="title function_">slice</span>(<span class="number">0</span>, <span class="number">7</span>) + <span class="string">&quot;...&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  chart.<span class="title function_">setOption</span>(&#123;</span><br><span class="line">    <span class="attr">graphic</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">id</span>: <span class="string">&quot;name&quot;</span>,</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&quot;text&quot;</span>,</span><br><span class="line">        <span class="attr">left</span>: <span class="string">&quot;center&quot;</span>,</span><br><span class="line">        <span class="attr">top</span>: <span class="string">&quot;45%&quot;</span>,</span><br><span class="line">        <span class="attr">z</span>: <span class="number">10</span>,</span><br><span class="line">        <span class="attr">silent</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">style</span>: &#123;</span><br><span class="line">          <span class="attr">text</span>: name,</span><br><span class="line">          <span class="comment">//   font: &quot;bold 20px Microsoft YaHei&quot;,</span></span><br><span class="line">          <span class="attr">fontSize</span>: <span class="number">12</span>,</span><br><span class="line">          <span class="attr">fill</span>: <span class="string">&quot;#b2b0b0&quot;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">id</span>: <span class="string">&quot;value&quot;</span>,</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&quot;text&quot;</span>,</span><br><span class="line">        <span class="attr">left</span>: <span class="string">&quot;center&quot;</span>,</span><br><span class="line">        <span class="attr">top</span>: <span class="string">&quot;55%&quot;</span>,</span><br><span class="line">        <span class="attr">z</span>: <span class="number">10</span>,</span><br><span class="line">        <span class="attr">silent</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">style</span>: &#123;</span><br><span class="line">          <span class="attr">text</span>: params.<span class="property">value</span>,</span><br><span class="line">          <span class="attr">fontSize</span>: <span class="number">18</span>,</span><br><span class="line">          <span class="attr">fill</span>: <span class="string">&quot;#ffffff&quot;</span>,</span><br><span class="line">          <span class="attr">lineWidth</span>: <span class="number">2</span>,</span><br><span class="line">          <span class="comment">//   font: &quot;bold 16px Microsoft YaHei&quot;,</span></span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.除此之外，我们还要支持，点击不同数据时，从当前数据的dataIndex进行更新定时器，并显示对应的文本：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 增加点击事件</span></span><br><span class="line">chart.<span class="title function_">on</span>(<span class="string">&quot;click&quot;</span>, <span class="keyword">function</span> (<span class="params">params</span>) &#123;</span><br><span class="line">  currentIndex = params.<span class="property">dataIndex</span>;</span><br><span class="line">  <span class="comment">// 取消之前高亮的图形</span></span><br><span class="line">  chart.<span class="title function_">dispatchAction</span>(&#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&quot;downplay&quot;</span>,</span><br><span class="line">    <span class="attr">seriesIndex</span>: <span class="number">0</span>,</span><br><span class="line">  &#125;);</span><br><span class="line">  chart.<span class="title function_">dispatchAction</span>(&#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&quot;highlight&quot;</span>,</span><br><span class="line">    <span class="attr">seriesIndex</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">dataIndex</span>: currentIndex,</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="title function_">updateCenterText</span>(params);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//   重新设置定时器</span></span><br><span class="line">  timerControl.<span class="title function_">removeTimer</span>(props.<span class="property">timerId</span>);</span><br><span class="line">  timerControl.<span class="title function_">addTimer</span>(&#123;</span><br><span class="line">    <span class="attr">interval</span>: props.<span class="property">timerInterval</span>,</span><br><span class="line">    <span class="attr">callback</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(</span><br><span class="line">        <span class="string">`图表定时器<span class="subst">$&#123;props.timerId&#125;</span>,间隔--&gt; <span class="subst">$&#123;props.timerInterval&#125;</span>`</span></span><br><span class="line">      );</span><br><span class="line">      <span class="title function_">handleChange</span>();</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">id</span>: props.<span class="property">timerId</span>,</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>4.对于数据会改变的复杂图表，我们得在加个定时器，并且这个定时器的间隔还得动态计算以及边界处理，我们才能实现循环展示完当前数据，然后切换到另一组数据的效果</p><p><img src="https://cdn.jsdelivr.net/gh/pengpen1/blog-images/20240612101205.png"></p><p>像上面的定时器，我都是放在组件内部的，内部不用关心传入的数据会不会改变。而切换数据的定时器我是放到上层，也就是页面层，因为这涉及到请求数据。</p><p>对于定时器，如果你不能保证是第一次添加，那最好在添加时移除一下(定时器控制器里面有重复ID自动删除的逻辑)。切换代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 分类分级定时器事件</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">handleTypeChartTimer</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="comment">// 切换tap，获取数据</span></span><br><span class="line">  typeChartProps.<span class="property">activeKey</span> =</span><br><span class="line">    typeChartProps.<span class="property">activeKey</span> === <span class="string">&quot;type&quot;</span> ? <span class="string">&quot;class&quot;</span> : <span class="string">&quot;type&quot;</span>;</span><br><span class="line"></span><br><span class="line">  typeChartProps.<span class="property">value</span> = <span class="keyword">await</span> <span class="title function_">getTypeData</span>(typeChartProps.<span class="property">activeKey</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 无需在这里清除组件内的循环展示定时器，因为数据变化了，组件会重新添加定时器</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 添加新的tabs切换定时器</span></span><br><span class="line">  timerControl.<span class="title function_">removeTimer</span>(<span class="number">3</span>);</span><br><span class="line">  timerControl.<span class="title function_">addTimer</span>(&#123;</span><br><span class="line">    <span class="attr">interval</span>: typeChartProps.<span class="property">interval</span>,</span><br><span class="line">    <span class="attr">callback</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;分类分级图表定时器-&gt; 5s&quot;</span>);</span><br><span class="line">      <span class="title function_">handleTypeChartTimer</span>();</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">id</span>: <span class="number">3</span>,</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>获取数据我们要动态计算时间间隔，在上面例子中就是typeChartProps.interval，代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">getTypeData</span> = <span class="keyword">async</span> (<span class="params">type</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> result = <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">if</span> (type === <span class="string">&quot;type&quot;</span>) &#123;</span><br><span class="line">    result = [</span><br><span class="line">      &#123; <span class="attr">value</span>: <span class="number">1048</span>, <span class="attr">name</span>: <span class="string">&quot;Search Engine&quot;</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">value</span>: <span class="number">735</span>, <span class="attr">name</span>: <span class="string">&quot;Direct&quot;</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">value</span>: <span class="number">580</span>, <span class="attr">name</span>: <span class="string">&quot;Email&quot;</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">value</span>: <span class="number">484</span>, <span class="attr">name</span>: <span class="string">&quot;Union Ads&quot;</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">value</span>: <span class="number">300</span>, <span class="attr">name</span>: <span class="string">&quot;Video Ads&quot;</span> &#125;,</span><br><span class="line">    ];</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    result = [</span><br><span class="line">      &#123; <span class="attr">value</span>: <span class="number">555</span>, <span class="attr">name</span>: <span class="string">&quot;风险类型&quot;</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">value</span>: <span class="number">333</span>, <span class="attr">name</span>: <span class="string">&quot;敏感分级&quot;</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">value</span>: <span class="number">222</span>, <span class="attr">name</span>: <span class="string">&quot;敏感分类&quot;</span> &#125;,</span><br><span class="line">    ];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (result.<span class="property">length</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    typeChartProps.<span class="property">interval</span> = result.<span class="property">length</span> * <span class="number">5000</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 当没数据时要给个默认时间，防止快速来回切换</span></span><br><span class="line">    typeChartProps.<span class="property">interval</span> = <span class="number">5000</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>嘿，要是我想除了自动切换数据，我还能手动切换数据，又该如何做呢？只需监听切换时间，重置定时器，然后再请求一次即可，这就是关注点分离的好处，上层只关心数据的切换，不用管展示相关的逻辑。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 分类分级点击事件</span></span><br><span class="line"><span class="attr">clickHandle</span>: <span class="keyword">async</span> (item) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (item &amp;&amp; item.<span class="property">key</span> !== typeChartProps.<span class="property">activeKey</span>) &#123;</span><br><span class="line">    typeChartProps.<span class="property">activeKey</span> = item.<span class="property">key</span>;</span><br><span class="line"></span><br><span class="line">    timerControl.<span class="title function_">removeTimer</span>(<span class="number">3</span>);</span><br><span class="line">    timerControl.<span class="title function_">addTimer</span>(&#123;</span><br><span class="line">      <span class="attr">interval</span>: typeChartProps.<span class="property">interval</span>,</span><br><span class="line">      <span class="attr">callback</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">handleTypeChartTimer</span>();</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">id</span>: <span class="number">3</span>,</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    typeChartProps.<span class="property">value</span> = <span class="keyword">await</span> <span class="title function_">getTypeData</span>(typeChartProps.<span class="property">activeKey</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>5.总结，页面层注重数据，只需要定时切换数据即可。组件层只关心传入的数据，并循环展示即可。</p><h3 id="组件完整代码"><a href="#组件完整代码" class="headerlink" title="组件完整代码"></a>组件完整代码</h3><p>这是我封装的饼图组件，支持tab切换，支持自动循环展示tip，支持手动查看当前数据，LargeScreenCard是容器封装，这根据业务需要自己封装即可。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;LargeScreenCard v-bind=&quot;cardProps&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;tabs-wrapper&quot; v-if=&quot;enableTabs&quot;&gt;</span><br><span class="line">      &lt;div</span><br><span class="line">        v-for=&quot;(item, index) in tabs&quot;</span><br><span class="line">        @click=&quot;clickHandle(item)&quot;</span><br><span class="line">        :key=&quot;index&quot;</span><br><span class="line">        :class=&quot;activeKey === item.key ? &#x27;tab-item-active&#x27; : &#x27;tab-item&#x27;&quot;</span><br><span class="line">      &gt;</span><br><span class="line">        &#123;&#123; item.name &#125;&#125;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div v-if=&quot;isPlaceholder&quot; class=&quot;chart-placeholder&quot;&gt;&#123;&#123; placeholder &#125;&#125;&lt;/div&gt;</span><br><span class="line">    &lt;div v-else style=&quot;width: 100%; height: 100%&quot;&gt;</span><br><span class="line">      &lt;div class=&quot;chart-wrapper&quot; ref=&quot;chartRef&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/LargeScreenCard&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; onMounted &#125; from &quot;vue&quot;;</span><br><span class="line">import LargeScreenCard from &quot;@/components/views/PIMSYw/LargeScreenMap/Common/Card/LargeScreenCard&quot;;</span><br><span class="line">import timerControl from &quot;@/services/views/PIMSYw/LargeScreenMap/Utils/timerControl&quot;;</span><br><span class="line">import * as echarts from &quot;echarts&quot;;</span><br><span class="line">import &#123; defineProps, watch, nextTick, ref, computed &#125; from &quot;vue&quot;;</span><br><span class="line">import &#123; onBeforeUnmount &#125; from &quot;vue&quot;;</span><br><span class="line">const props = defineProps(&#123;</span><br><span class="line">  value: &#123;</span><br><span class="line">    type: Array,</span><br><span class="line">    default: () =&gt; [],</span><br><span class="line">  &#125;,</span><br><span class="line">  cardProps: &#123;</span><br><span class="line">    // LargeScreenCard的配置</span><br><span class="line">    type: Object,</span><br><span class="line">    default: () =&gt; &#123;</span><br><span class="line">      return &#123;&#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  enableTabs: &#123;</span><br><span class="line">    // 是否开启标签页切换，优先级高于Tabs,activeName</span><br><span class="line">    type: Boolean,</span><br><span class="line">    default: () =&gt; &#123;</span><br><span class="line">      return false;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  tabs: &#123;</span><br><span class="line">    type: Array,</span><br><span class="line">    default: () =&gt; [],</span><br><span class="line">  &#125;,</span><br><span class="line">  // 当前激活项</span><br><span class="line">  activeKey: String,</span><br><span class="line">  clickHandle: &#123;</span><br><span class="line">    // 切换tab回调</span><br><span class="line">    type: Function,</span><br><span class="line">    default: () =&gt; &#123;</span><br><span class="line">      return () =&gt; &#123;&#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  timerId: &#123;</span><br><span class="line">    // 定时器id,如果一个页面用到多次本组件，则需要传入不同的timerId!</span><br><span class="line">    type: Number,</span><br><span class="line">    default: () =&gt; &#123;</span><br><span class="line">      return 777;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  timerInterval: &#123;</span><br><span class="line">    // 定时器循环间隔，单位是毫秒</span><br><span class="line">    type: Number,</span><br><span class="line">    default: () =&gt; &#123;</span><br><span class="line">      return 5000;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  placeholder: &#123;</span><br><span class="line">    type: String,</span><br><span class="line">    default: () =&gt; &#123;</span><br><span class="line">      return &quot;暂无数据&quot;;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">const chartRef = ref(null);</span><br><span class="line">let chart = null;</span><br><span class="line">let currentIndex = 0;</span><br><span class="line"></span><br><span class="line">const isPlaceholder = computed(() =&gt; &#123;</span><br><span class="line">  return !(props.value &amp;&amp; props.value.length);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">const resize = () =&gt; &#123;</span><br><span class="line">  chart &amp;&amp; chart.resize();</span><br><span class="line">&#125;;</span><br><span class="line">const init = (value) =&gt; &#123;</span><br><span class="line">  const chartDom = chartRef.value;</span><br><span class="line">  if (!chartDom) return;</span><br><span class="line"></span><br><span class="line">  currentIndex = 0;</span><br><span class="line">  chart = echarts.getInstanceByDom(chartDom);</span><br><span class="line">  if (!chart) &#123;</span><br><span class="line">    chart = echarts.init(chartDom);</span><br><span class="line">  &#125;</span><br><span class="line">  value.forEach((item, i) =&gt; (item.label = &#123; color: &quot;#fff&quot; &#125;));</span><br><span class="line"></span><br><span class="line">  let center = [&quot;50%&quot;, &quot;50%&quot;];</span><br><span class="line">  if (props.enableTabs) &#123;</span><br><span class="line">    center = [&quot;50%&quot;, &quot;55%&quot;];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  const option = &#123;</span><br><span class="line">    tooltip: &#123;</span><br><span class="line">      trigger: &quot;item&quot;,</span><br><span class="line">      backgroundColor: &quot;rgba(1, 13, 19, 0.5)&quot;,</span><br><span class="line">      textStyle: &#123;</span><br><span class="line">        color: &quot;rgba(255, 255, 255, 1)&quot;,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    color: [</span><br><span class="line">      &quot;#44CE30 &quot;,</span><br><span class="line">      &quot;#30CE7D &quot;,</span><br><span class="line">      &quot;#30CEBC&quot;,</span><br><span class="line">      &quot;#30A6CE&quot;,</span><br><span class="line">      &quot;#307FCE&quot;,</span><br><span class="line">      &quot;#3043CE&quot;,</span><br><span class="line">      &quot;#3C30CE&quot;,</span><br><span class="line">      &quot;#6330CE&quot;,</span><br><span class="line">    ],</span><br><span class="line">    series: [</span><br><span class="line">      &#123;</span><br><span class="line">        name: &quot;pie&quot;,</span><br><span class="line">        type: &quot;pie&quot;,</span><br><span class="line">        center,</span><br><span class="line">        radius: [&quot;50%&quot;, &quot;62%&quot;],</span><br><span class="line">        labelLine: &#123;</span><br><span class="line">          show: true,</span><br><span class="line">          lineStyle: &#123;</span><br><span class="line">            color: &quot;#A1A1A1&quot;,</span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">        label: &#123;</span><br><span class="line">          show: true,</span><br><span class="line">          position: &quot;outside&quot;,</span><br><span class="line">          formatter: function (params) &#123;</span><br><span class="line">            if (params.name !== &quot;&quot;) &#123;</span><br><span class="line">              return (</span><br><span class="line">                &quot;&#123;percent|&quot; +</span><br><span class="line">                params.percent +</span><br><span class="line">                &quot;%&quot; +</span><br><span class="line">                &quot;&#125;&quot; +</span><br><span class="line">                &quot;\n&quot; +</span><br><span class="line">                &quot;&#123;name|&quot; +</span><br><span class="line">                params.name +</span><br><span class="line">                &quot;&#125;&quot;</span><br><span class="line">              );</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">              return &quot;&quot;;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          rich: &#123;</span><br><span class="line">            // 富文本</span><br><span class="line">            name: &#123;</span><br><span class="line">              fontSize: 12,</span><br><span class="line">              color: &quot;#b2b0b0&quot;,</span><br><span class="line">              padding: [0, 5],</span><br><span class="line">              align: &quot;left&quot;,</span><br><span class="line">            &#125;,</span><br><span class="line">            percent: &#123;</span><br><span class="line">              fontSize: 14,</span><br><span class="line">              align: &quot;left&quot;,</span><br><span class="line">              padding: [20, 5, 8, 5],</span><br><span class="line">            &#125;,</span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">        itemStyle: &#123;</span><br><span class="line">          //间隔</span><br><span class="line">          borderWidth: 4,</span><br><span class="line">          borderColor: &quot;#050e31&quot;,</span><br><span class="line">        &#125;,</span><br><span class="line">        data: value,</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;;</span><br><span class="line">  chart.setOption(option);</span><br><span class="line"></span><br><span class="line">  // 初始化显示图形、高亮</span><br><span class="line">  updateCenterText(value[0]);</span><br><span class="line">  chart.dispatchAction(&#123;</span><br><span class="line">    type: &quot;highlight&quot;,</span><br><span class="line">    seriesIndex: 0,</span><br><span class="line">    dataIndex: value.length ? 0 : -1,</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  // 增加点击事件</span><br><span class="line">  chart.on(&quot;click&quot;, function (params) &#123;</span><br><span class="line">    currentIndex = params.dataIndex;</span><br><span class="line">    // 取消之前高亮的图形</span><br><span class="line">    chart.dispatchAction(&#123;</span><br><span class="line">      type: &quot;downplay&quot;,</span><br><span class="line">      seriesIndex: 0,</span><br><span class="line">    &#125;);</span><br><span class="line">    chart.dispatchAction(&#123;</span><br><span class="line">      type: &quot;highlight&quot;,</span><br><span class="line">      seriesIndex: 0,</span><br><span class="line">      dataIndex: currentIndex,</span><br><span class="line">    &#125;);</span><br><span class="line">    updateCenterText(params);</span><br><span class="line"></span><br><span class="line">    //   重新设置定时器</span><br><span class="line">    timerControl.removeTimer(props.timerId);</span><br><span class="line">    timerControl.addTimer(&#123;</span><br><span class="line">      interval: props.timerInterval,</span><br><span class="line">      callback: () =&gt; &#123;</span><br><span class="line">        console.log(</span><br><span class="line">          `图表定时器$&#123;props.timerId&#125;,间隔--&gt; $&#123;props.timerInterval&#125;`</span><br><span class="line">        );</span><br><span class="line">        handleChange();</span><br><span class="line">      &#125;,</span><br><span class="line">      id: props.timerId,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  timerControl.addTimer(&#123;</span><br><span class="line">    interval: props.timerInterval,</span><br><span class="line">    callback: () =&gt; &#123;</span><br><span class="line">      console.log(</span><br><span class="line">        `图表定时器$&#123;props.timerId&#125;,间隔--&gt;  $&#123;props.timerInterval&#125;`,</span><br><span class="line">        value,</span><br><span class="line">        chart</span><br><span class="line">      );</span><br><span class="line">      handleChange();</span><br><span class="line">    &#125;,</span><br><span class="line">    id: props.timerId,</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  window.removeEventListener(&quot;resize&quot;, resize);</span><br><span class="line">  window.addEventListener(&quot;resize&quot;, resize);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">// 更新中心文字</span><br><span class="line">function updateCenterText(params) &#123;</span><br><span class="line">  if (!params) &#123;</span><br><span class="line">    return;</span><br><span class="line">  &#125;</span><br><span class="line">  let name = params.name;</span><br><span class="line">  if (name.length &gt; 8) &#123;</span><br><span class="line">    name = name.slice(0, 7) + &quot;...&quot;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  chart.setOption(&#123;</span><br><span class="line">    graphic: [</span><br><span class="line">      &#123;</span><br><span class="line">        id: &quot;name&quot;,</span><br><span class="line">        type: &quot;text&quot;,</span><br><span class="line">        left: &quot;center&quot;,</span><br><span class="line">        top: &quot;45%&quot;,</span><br><span class="line">        z: 10,</span><br><span class="line">        silent: true,</span><br><span class="line">        style: &#123;</span><br><span class="line">          text: name,</span><br><span class="line">          //   font: &quot;bold 20px Microsoft YaHei&quot;,</span><br><span class="line">          fontSize: 12,</span><br><span class="line">          fill: &quot;#b2b0b0&quot;,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        id: &quot;value&quot;,</span><br><span class="line">        type: &quot;text&quot;,</span><br><span class="line">        left: &quot;center&quot;,</span><br><span class="line">        top: &quot;55%&quot;,</span><br><span class="line">        z: 10,</span><br><span class="line">        silent: true,</span><br><span class="line">        style: &#123;</span><br><span class="line">          text: params.value,</span><br><span class="line">          fontSize: 18,</span><br><span class="line">          fill: &quot;#ffffff&quot;,</span><br><span class="line">          lineWidth: 2,</span><br><span class="line">          //   font: &quot;bold 16px Microsoft YaHei&quot;,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 定时切换展示的告警类型</span><br><span class="line">function handleChange() &#123;</span><br><span class="line">  const data = props.value;</span><br><span class="line">  if (!data.length) return false;</span><br><span class="line">  currentIndex = (currentIndex + 1) % data.length;</span><br><span class="line">  // 取消之前所有高亮的图形</span><br><span class="line">  chart.dispatchAction(&#123;</span><br><span class="line">    type: &quot;downplay&quot;,</span><br><span class="line">    seriesIndex: 0,</span><br><span class="line">  &#125;);</span><br><span class="line">  chart.dispatchAction(&#123;</span><br><span class="line">    type: &quot;highlight&quot;,</span><br><span class="line">    seriesIndex: 0,</span><br><span class="line">    dataIndex: currentIndex,</span><br><span class="line">  &#125;);</span><br><span class="line">  //  获取合并默认值后的配置，拿到当前对应的数据</span><br><span class="line">  const params = chart.getOption().series[0].data[currentIndex];</span><br><span class="line">  updateCenterText(params);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">watch(</span><br><span class="line">  () =&gt; props.value,</span><br><span class="line">  (value) =&gt; &#123;</span><br><span class="line">    nextTick(() =&gt; &#123;</span><br><span class="line">      init(value ?? []);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">onBeforeUnmount(() =&gt; &#123;</span><br><span class="line">  window.removeEventListener(&quot;resize&quot;, resize);</span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;scss&quot; scoped&gt;</span><br><span class="line">.chart-wrapper &#123;</span><br><span class="line">  width: 100%;</span><br><span class="line">  height: 100%;</span><br><span class="line">&#125;</span><br><span class="line">.chart-placeholder &#123;</span><br><span class="line">  height: 100%;</span><br><span class="line">  width: 100%;</span><br><span class="line">  display: flex;</span><br><span class="line">  align-items: center;</span><br><span class="line">  justify-content: center;</span><br><span class="line">  font-size: 14px;</span><br><span class="line">  color: #86a0b3;</span><br><span class="line">&#125;</span><br><span class="line">.tabs-wrapper &#123;</span><br><span class="line">  position: absolute;</span><br><span class="line">  z-index: 8;</span><br><span class="line">  right: 20px;</span><br><span class="line">  top: 14px;</span><br><span class="line">  display: flex;</span><br><span class="line">  gap: 0 10px;</span><br><span class="line"></span><br><span class="line">  .tab-item &#123;</span><br><span class="line">    padding: 1px 5px;</span><br><span class="line">    border: 1px solid rgb(109, 111, 112);</span><br><span class="line">    color: rgb(109, 111, 112);</span><br><span class="line">    background-color: rgb(56, 59, 59);</span><br><span class="line">    font-size: 12px;</span><br><span class="line">    cursor: pointer;</span><br><span class="line">  &#125;</span><br><span class="line">  .tab-item-active &#123;</span><br><span class="line">    padding: 1px 5px;</span><br><span class="line">    border: 1px solid rgb(93, 183, 201);</span><br><span class="line">    font-size: 12px;</span><br><span class="line">    color: rgb(30, 169, 224);</span><br><span class="line">    cursor: pointer;</span><br><span class="line">    background: linear-gradient(</span><br><span class="line">      to left,</span><br><span class="line">      rgba(76, 166, 255, 0.43) 0%,</span><br><span class="line">      rgba(76, 166, 255, 0) 100%</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> echarts </category>
          
      </categories>
      
      
        <tags>
            
            <tag> echarts </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>three.js制作3D地图(三)</title>
      <link href="/2024/05/30/three.js-3D%E5%9C%B0%E5%9B%BE(%E4%B8%89)/"/>
      <url>/2024/05/30/three.js-3D%E5%9C%B0%E5%9B%BE(%E4%B8%89)/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p><strong>概要：</strong>在这篇记录中，我们将学习关于Three.js以及进场动画等相关方面的知识。</p><h3 id="当前实现"><a href="#当前实现" class="headerlink" title="当前实现"></a>当前实现</h3><p><img src="https://cdn.jsdelivr.net/gh/pengpen1/blog-images/20240524160145.png"></p><p>当前是一开始都渲染，设置了两个时间点bgDuration和opacityDuration，发光效果由UnrealBloomPass实现，具体如下图所示：</p><p><img src="https://cdn.jsdelivr.net/gh/pengpen1/blog-images/20240524165106.png"></p><h3 id="理清需求"><a href="#理清需求" class="headerlink" title="理清需求"></a>理清需求</h3><p>1.最开始的时候只有一层地图的边线，多条边线在其上方开始出现，并且颜色从浅白变天蓝色（并附带泛光光效果），然后颜色再变成浅蓝色（泛光效果减弱）</p><p>2.完成第一步后，各个省开始从透明状态过渡到不透明状态，相机位置向右上方移动，或者地图向左下移动，实现地图向屏幕中间移动的感觉</p><h3 id="实现需求"><a href="#实现需求" class="headerlink" title="实现需求"></a>实现需求</h3><p><img src="https://cdn.jsdelivr.net/gh/pengpen1/blog-images/20240524160151.png"></p><p>先去掉标签和以上报省份的顶部描边（浅蓝色部分），这个直接改透明度即可。</p><p>标签和标记改成在opacityDuration后依次出现，用定时器即可。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">showAllMarkPoints</span> = (<span class="params">isTransition = <span class="literal">true</span></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> markPoints = <span class="title class_">Array</span>.<span class="title function_">from</span>(finallyConfigMap.<span class="title function_">values</span>()).<span class="title function_">filter</span>(</span><br><span class="line">    <span class="function">(<span class="params">item</span>) =&gt;</span> item.<span class="property">mark</span></span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  markPoints.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item, index</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (isTransition) &#123;</span><br><span class="line">      <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        item.<span class="property">mark</span>.<span class="title function_">show</span>();</span><br><span class="line">      &#125;, <span class="number">100</span> * index);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      item.<span class="property">mark</span>.<span class="title function_">show</span>();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> three.js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> three.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>three.js制作3D地图(二)</title>
      <link href="/2024/05/22/three.js-3D%E5%9C%B0%E5%9B%BE(%E4%BA%8C)/"/>
      <url>/2024/05/22/three.js-3D%E5%9C%B0%E5%9B%BE(%E4%BA%8C)/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p><strong>概要：</strong>在这篇记录中，我们将学习关于Three.js以及进场动画等相关方面的知识。</p><h3 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h3><h4 id="顶点"><a href="#顶点" class="headerlink" title="顶点"></a>顶点</h4><p>顶点（vertex）是构成3D模型的基本单位之一。每个顶点代表了模型中的一个点，通常具有三维坐标（X, Y, Z）。在三维图形中，顶点不仅用于定义物体的形状，还可以包含其他信息，如颜色、纹理坐标和法线向量等。</p><p>顶点数据通常组成一个顶点数组，这些顶点通过顶点着色器在GPU上进行处理。在three.js中，顶点可以通过<code>THREE.BufferGeometry</code>或<code>THREE.Geometry</code>类来管理，这些类提供了存储和操作顶点数据的功能。</p><h4 id="顶点着色器"><a href="#顶点着色器" class="headerlink" title="顶点着色器"></a>顶点着色器</h4><p>顶点着色器是一种运行在GPU上的小程序，它的作用是处理顶点数据。顶点着色器对每个顶点独立执行，通常用于执行诸如变换顶点位置（比如模型变换、视图变换和投影变换）、顶点光照计算、颜色或其他属性的调整等操作。顶点着色器的输出通常是顶点的新位置和其他一些可能 影响后续渲染阶段的顶点属性。</p><h4 id="片元着色器"><a href="#片元着色器" class="headerlink" title="片元着色器"></a>片元着色器</h4><p>片元着色器（有时也称为像素着色器）是图形管线中的另一种类型的着色器，用于计算像素的最终颜色和其他属性。片元着色器在光栅化阶段之后运行，每个光栅化的像素都会调用一次片元着色器。它可以执行多种任务，如应用纹理、执行复杂的光照和阴影计算、处理透明效果和色彩混合等。</p><p>顶点着色器处理完顶点数据后，三角形的顶点会被传递到光栅化过程，这个过程决定了屏幕上哪些像素应该用于绘制这些三角形。每个这样的像素称为一个“片元”，对于这些片元，片元着色器会计算最终颜色。因此，顶点着色器和片元着色器共同决定了3D物体在屏幕上的表现形式。</p><h4 id="高级着色语言"><a href="#高级着色语言" class="headerlink" title="高级着色语言"></a>高级着色语言</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">    &lt;script type=<span class="string">&quot;x-shader/x-vertex&quot;</span> id=<span class="string">&quot;vertexShader&quot;</span>&gt;</span><br><span class="line">      <span class="comment">// uniform float amplitude;</span></span><br><span class="line">      <span class="comment">// attribute float size;</span></span><br><span class="line">      uniform float amplitude;</span><br><span class="line"></span><br><span class="line">      attribute vec3 vertexColor;</span><br><span class="line"></span><br><span class="line">      varying vec4 varColor;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">void</span> <span class="title function_">main</span>(<span class="params"></span>)</span><br><span class="line">      &#123;</span><br><span class="line">      varColor = <span class="title function_">vec4</span>(vertexColor, <span class="number">1.0</span>);</span><br><span class="line"></span><br><span class="line">      vec4 pos = <span class="title function_">vec4</span>(position, <span class="number">1.0</span>);</span><br><span class="line">      pos.<span class="property">z</span> *= amplitude;</span><br><span class="line"></span><br><span class="line">      vec4 mvPosition = modelViewMatrix * pos;</span><br><span class="line"></span><br><span class="line">      gl_PointSize = <span class="number">1.0</span>;</span><br><span class="line">      gl_Position = projectionMatrix * mvPosition;</span><br><span class="line">      &#125;</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line"></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;x-shader/x-fragment&quot;</span> <span class="attr">id</span>=<span class="string">&quot;fragmentShader&quot;</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      varying vec4 varColor;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">void</span> <span class="title function_">main</span>(<span class="params"></span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      gl_FragColor = varColor;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">var</span> shaderMaterial = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">ShaderMaterial</span>(&#123;</span><br><span class="line">   <span class="attr">attributes</span>: shaderAttributes,</span><br><span class="line">   <span class="attr">uniforms</span>: shaderUniforms,</span><br><span class="line">   <span class="attr">vertexShader</span>: <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;vertexShader&quot;</span>).<span class="property">textContent</span>,</span><br><span class="line">   <span class="attr">fragmentShader</span>: <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;fragmentShader&quot;</span>).<span class="property">textContent</span>,</span><br><span class="line"> &#125;);</span><br></pre></td></tr></table></figure><p>上述着色器代码是用一种名为GLSL（OpenGL Shading Language）的语言编写的。因为WebGL是基于OpenGL的，而OpenGL使用GLSL(OpenGL Shading Language)这一着色器语言，是一种接近C语言的代码。所以我们需要学习使用GLSL，用于在图形处理单元（GPU）上编写代码的高级着色语言。它专门用于定义图形渲染管线中的可编程阶段，比如顶点着色器和片元着色器。</p><p>着色器代码可以写在单独的文件中（顶点着色器后缀为<code>.vs</code>，片元着色器后缀为<code>.fs</code>），也可以定义在<code>&lt;script&gt;</code>标签中。UV映射是将每个面片贴的图统一映射到一张纹理上，记录每个面片贴图在纹理上对应的位置。</p><h4 id="材质"><a href="#材质" class="headerlink" title="材质"></a>材质</h4><p>材质是独立于物体顶点信息之外的与渲染效果相关的属性，通过设置材质可以改变物体的颜色、纹理贴图、光照模式等。</p><ul><li>基本材质 MeshBasicMaterial-使用基本材质的物体，渲染后物体的颜色始终为该材质的颜色，而不会由于光照产生明暗、阴影效果</li><li>Lambert材质 MeshLambertMaterial-符合Lambert光照模型的材质，主要特点是只考虑漫反射而不考虑镜面反射的效果，适合大部分物体的漫反射效果，但不适合金属、镜子等需要镜面反射效果的物体</li><li>Phong材质 MeshPhongMaterial-符合Phong光照模型的材质，漫反射部分和Lambert光照模型相同，另外考虑了镜面反射的效果，尤其适合对金属、镜面的表现</li><li>法向材质 MeshNormalMaterial-将材质的颜色设置为其法向量的方向，对于调试非常有用，在调试时，要知道物体的法向量，使用法向材质就很有效</li></ul><h4 id="光源"><a href="#光源" class="headerlink" title="光源"></a>光源</h4><ul><li><p>THREE.AmbientLight这是一个基础光源，也叫环境光源，该光源的颜色将会叠加到场景现有的颜色上面，无法创建阴影。环境光没有明确的光源位置，在各处形成的亮度也是一致的，通常用来为整个场景指定一个基础亮度</p></li><li><p>THREE.PointLight点光源，从空间的一点向所有方向发射光源。点光源不计光源大小，可以看作是一个点发出的光源，点光源照到不同物体表面的亮度是线性递减的，因此离点光源越远的物体会越暗</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/pengpen1/blog-images/20240422111136.png"></p><ul><li>THREE.SpotLight这种光源有聚光的效果，类似台灯、天花板上的吊灯或者手电筒。聚光灯朝着一个方向投射出类似圆锥形的光线，还可以随着物体移动</li></ul><p><img src="https://cdn.jsdelivr.net/gh/pengpen1/blog-images/20240422111431.png"></p><ul><li>THREE.DirectionalLight无限光，平行光。从这种光源发出的光线可以看作是平行的，比如太阳光。对于任意平行的平面，平行光照射的亮度都是相同的，而与平面所在的位置无关，对于平行光而言，设置光源位置尤为重要，它决定了光照的方向</li></ul><p><img src="https://cdn.jsdelivr.net/gh/pengpen1/blog-images/20240422111550.png"></p><ul><li>THREE.HemisphereLight这是一种特殊光源，可以通过模拟反光面和光线微弱的天空来创建更加自然的室外光线。无法创建阴影。</li><li>THREE.AreaLight使用这种光源可以指定散发光线的平面，而不是一个点。无法创建阴影。</li><li>THREE.LensFlare这不是一种光源，但是通过使用THREE.LensFlare，可以为场景中的光源添加镜头光晕效果。</li></ul><h4 id="阴影"><a href="#阴影" class="headerlink" title="阴影"></a>阴影</h4><p>上面零散的说了些可以响应光照产生阴影的材料，可以创建阴影的光源，这里总结一下：</p><p>明暗是相对的，阴影的形成是因为比周围获得的光照更少，因此要形成阴影，必须要有光源，能形成阴影的光源有平行光和聚光灯</p><p>能表现阴影效果的材质有<code>LambertMaterial</code>和<code>PhongMaterial</code></p><p>我们需要对产生阴影的物体设置<code>castShadow</code>，对接收阴影的物体设置<code>receiveShadow</code></p><h3 id="GLSL基础知识"><a href="#GLSL基础知识" class="headerlink" title="GLSL基础知识"></a>GLSL基础知识</h3><p><strong>1. 着色器结构：</strong> GLSL着色器通常包括一些预处理指令、全局变量、输入输出变量以及至少一个主函数（main）。顶点着色器和片元着色器都需要各自的主函数。</p><p> <strong>2.数据类型：</strong>GLSL包括标准的基本类型（如 <code>int</code>, <code>float</code>, <code>double</code>）和一些特殊的图形类型，如向量和矩阵。</p><ul><li><strong>向量：</strong> <code>vec2</code>, <code>vec3</code>, <code>vec4</code> 分别表示2、3、4维浮点数向量。</li><li><strong>矩阵：</strong> <code>mat2</code>, <code>mat3</code>, <code>mat4</code> 分别表示2x2、3x3、4x4的浮点数矩阵。</li></ul><p><strong>3. 变量修饰符：</strong></p><ul><li><code>uniform</code>: 在一次渲染调用中不变的全局变量，常用于从CPU向GPU传递参数，如变换矩阵、光源信息等。</li><li><code>attribute</code> (只在较旧版本的GLSL中使用，现在用 <code>in</code> 替代): 用于顶点着色器中，表示每个顶点的属性，如顶点坐标、纹理坐标。</li><li><code>varying</code> (现在使用 <code>in</code> 和 <code>out</code> 替代): 用于在顶点着色器和片元着色器之间传递数据。</li></ul><h3 id="着色器功能和技术"><a href="#着色器功能和技术" class="headerlink" title="着色器功能和技术"></a>着色器功能和技术</h3><p><strong>1. 纹理采样：</strong><br>要在片元着色器中使用纹理，需要定义一个 <code>sampler</code> 类型的uniform变量来表示纹理，然后使用 <code>texture()</code> 函数进行采样。</p><figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">uniform</span> <span class="type">sampler2D</span> myTexture;</span><br><span class="line"><span class="keyword">in</span> <span class="type">vec2</span> TexCoord;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> main() &#123;</span><br><span class="line">    FragColor = <span class="built_in">texture</span>(myTexture, TexCoord);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>2. 光照计算：</strong><br>在着色器中实现光照通常涉及多个步骤：计算法向量、计算光源方向、计算视线方向，然后根据这些向量计算漫反射和镜面反射强度。</p><figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">vec3</span> norm = <span class="built_in">normalize</span>(Normal);</span><br><span class="line"><span class="type">vec3</span> lightDir = <span class="built_in">normalize</span>(lightPos - FragPos);</span><br><span class="line"><span class="type">float</span> diff = <span class="built_in">max</span>(<span class="built_in">dot</span>(norm, lightDir), <span class="number">0.0</span>);</span><br><span class="line"><span class="type">vec3</span> diffuse = diff * lightColor;</span><br><span class="line"></span><br><span class="line"><span class="type">vec3</span> viewDir = <span class="built_in">normalize</span>(viewPos - FragPos);</span><br><span class="line"><span class="type">vec3</span> reflectDir = <span class="built_in">reflect</span>(-lightDir, norm);</span><br><span class="line"><span class="type">float</span> spec = <span class="built_in">pow</span>(<span class="built_in">max</span>(<span class="built_in">dot</span>(viewDir, reflectDir), <span class="number">0.0</span>), shininess);</span><br><span class="line"><span class="type">vec3</span> specular = spec * lightColor;</span><br><span class="line"></span><br><span class="line">FragColor = <span class="type">vec4</span>((ambient + diffuse + specular) * objectColor, <span class="number">1.0</span>);</span><br></pre></td></tr></table></figure><h3 id="疑问解答"><a href="#疑问解答" class="headerlink" title="疑问解答"></a>疑问解答</h3><p><strong>1.如何实现自转和公转？</strong></p><p>自转只需在帧动画这改变自身的rotation即可：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">planet.<span class="property">rotation</span>.<span class="property">y</span> += <span class="number">0.01</span>;  <span class="comment">// 根据需要调整旋转速度</span></span><br></pre></td></tr></table></figure><p>公转有两种实现思路，一个是每帧改计算变行星自身的坐标点位，依次实现公转：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> angle = <span class="number">0</span>;  <span class="comment">// 初始角度</span></span><br><span class="line"><span class="keyword">const</span> radius = <span class="number">20</span>;  <span class="comment">// 行星距离恒星的距离</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">animate</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">requestAnimationFrame</span>(animate);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 更新行星的公转</span></span><br><span class="line">  angle += <span class="number">0.01</span>;  <span class="comment">// 每帧改变的角度</span></span><br><span class="line">  planet.<span class="property">position</span>.<span class="property">x</span> = radius * <span class="title class_">Math</span>.<span class="title function_">cos</span>(angle);</span><br><span class="line">  planet.<span class="property">position</span>.<span class="property">z</span> = radius * <span class="title class_">Math</span>.<span class="title function_">sin</span>(angle);</span><br><span class="line"></span><br><span class="line">  renderer.<span class="title function_">render</span>(scene, camera);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第二个是把恒星和行星看成一个整体，然后旋转整体：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> star = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">Object3D</span>();</span><br><span class="line"><span class="keyword">const</span> planet = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">Mesh</span>(<span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">SphereGeometry</span>(<span class="number">1</span>, <span class="number">32</span>, <span class="number">32</span>), <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">MeshStandardMaterial</span>(&#123;<span class="attr">color</span>: <span class="number">0x00ff00</span>&#125;));</span><br><span class="line">planet.<span class="property">position</span>.<span class="property">x</span> = <span class="number">20</span>;  <span class="comment">// 设置行星距离恒星的距离</span></span><br><span class="line">star.<span class="title function_">add</span>(planet);  <span class="comment">// 将行星添加为子对象</span></span><br><span class="line">scene.<span class="title function_">add</span>(star);  <span class="comment">// 将恒星添加到场景中</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">animate</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">requestAnimationFrame</span>(animate);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 旋转恒星对象，从而实现行星的公转</span></span><br><span class="line">  star.<span class="property">rotation</span>.<span class="property">y</span> += <span class="number">0.01</span>;</span><br><span class="line"></span><br><span class="line">  renderer.<span class="title function_">render</span>(scene, camera);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ul><li><a href="https://zhuanlan.zhihu.com/p/349296191">GL Shader Language（GLSL）详解-基础语法)</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> three.js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> three.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Cloudflare Workers实现网页状态监控</title>
      <link href="/2024/05/08/%E5%85%B6%E4%BB%96-CloudflareWorkers%E5%AE%9E%E7%8E%B0%E7%BD%91%E9%A1%B5%E7%8A%B6%E6%80%81%E7%9B%91%E6%8E%A7/"/>
      <url>/2024/05/08/%E5%85%B6%E4%BB%96-CloudflareWorkers%E5%AE%9E%E7%8E%B0%E7%BD%91%E9%A1%B5%E7%8A%B6%E6%80%81%E7%9B%91%E6%8E%A7/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p><strong>概要：</strong>在这篇记录中，我们将探讨如何利用Cloudflare Workers实现网页状态监控。</p><h3 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h3><p>fork下面这个仓库</p><p><code>https://github.com/eidam/cf-workers-status-page</code></p><h3 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h3><p>开始部署，点击Depoly with Workers链接登录并授权Cloudflare访问Github仓库。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://deploy.workers.cloudflare.com/?url=https://github.com/pengpen1/cf-workers-status-page</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/pengpen1/blog-images/20240508145951.png"></p><p>填API令牌</p><p><img src="https://cdn.jsdelivr.net/gh/pengpen1/blog-images/20240508155009.png"></p><p>填账户ID</p><p><img src="https://cdn.jsdelivr.net/gh/pengpen1/blog-images/20240508155106.png"></p><p>记得在 Github &gt; actions &gt; Deploy 中开启部署 (fork项目是默认是关闭的)</p><h3 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a>第三步</h3><p>选择 config.yaml，更改想要运行监控的网站链接</p><p><img src="https://cdn.jsdelivr.net/gh/pengpen1/blog-images/20240508155601.png"></p><h3 id="第四步"><a href="#第四步" class="headerlink" title="第四步"></a>第四步</h3><p>选择wrangler.toml Corn，修改定时更新 ，更改为crons &#x3D; [“<em>&#x2F;2</em> *”]</p><p><img src="https://cdn.jsdelivr.net/gh/pengpen1/blog-images/20240508155620.png"></p><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ul><li><a href="https://galkm.com/default/cloudflare-workers.html">利用Cloudflare Workers实现网页状态监控)</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>three.js制作3D地图(一)</title>
      <link href="/2024/03/28/three.js-3D%E5%9C%B0%E5%9B%BE(%E4%B8%80)/"/>
      <url>/2024/03/28/three.js-3D%E5%9C%B0%E5%9B%BE(%E4%B8%80)/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p><strong>概要：</strong>在这篇记录中，我们将学习关于Three.js和制作3D地图的部分基础知识。</p><h3 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h3><p>如您所见，本篇文章的封面就是公司UI设计的动画效果图，看上去很难，其实一点都不简单。我们需要满足视角适配、标记省份、追光效果、背景呼吸效果。先来了解一些准备工作和基本知识吧：</p><ol><li><strong>获取地图数据</strong>：</li></ol><ul><li>地图数据可以通过各种渠道获取，包括地理信息系统 (GIS) 数据库、在线地图服务 (如OpenStreetMap) 或专门提供地图数据的供应商。</li><li>GeoJSON 是一种常见的地理数据格式，它使用 JSON 格式来描述地理空间信息，如点、线、面等。GeoJSON 文件通常包含地图的几何信息、属性信息和空间参考信息。</li></ul><ol start="2"><li><strong>GeoJSON 的作用</strong>：</li></ol><ul><li>GeoJSON 是一种开放的地理数据标准，它提供了一种简单且易于理解的方式来存储地理空间信息。</li><li>使用 Three.js 制作 3D 地图时，GeoJSON 可以用来描述地图的几何形状，例如国家边界、城市位置等。</li></ul><ol start="3"><li><strong>墨卡托投影</strong>：</li></ol><ul><li>墨卡托投影是一种用于将地球表面的经纬度坐标投影到平面上的投影方法。它是最常用的地图投影之一，也被广泛应用于在线地图服务中。</li><li>在制作基于 Web 的 3D 地图时，通常需要将地图数据转换为墨卡托投影坐标系，因为它适合在 Web 地图中显示，并且能够减少图形变形和失真。</li></ul><ol start="5"><li><p><strong>图形学基础</strong>： </p> <img src="https://cdn.jsdelivr.net/gh/pengpen1/blog-images/%E8%A7%86%E9%94%A5%E4%BD%93.png" width = "300" align=center /></li></ol><p>上面这个是视锥体的透视图，对应着PerspectiveCamera的四个参数，fov — 摄像机视锥体垂直视野角度，<br>aspect — 摄像机视锥体长宽比，near — 摄像机视锥体近端面，far — 摄像机视锥体远端面。这个只是举例，原生WebGL和图形学是Three.js的底层知识，想要深入学习的话，图形学是少不了滴。书籍推荐，入门：《WebGL编程指南》 图形学：《交互式计算机图形学基于WebGL的自顶向下方法》</p><ol start="6"><li><p><strong>点线面</strong>：在Three.js中，点（Point）、线（Line）、面（Mesh）是表示不同几何对象的基本元素，它们用于构建3D场景中的各种物体和形状。在Three.js中，点由一个包含三个分量（x、y、z）的向量表示，通常称为顶点（Vertex），可以使用THREE.Vector3类来创建和操作点。线由一组顶点组成，并且可以选择性地指定线的颜色、材质等属性，可以使用THREE.Line类来创建线对象。面是由一组点组成的封闭平面几何体，用于表示空间中的平面或立体物体。</p></li><li><p>**几何体(Geometry)**：</p></li></ol><p>three.js提供了各种各样的几何体API，用于描述三维空间中的形状和结构。如立方缓冲几何体(四边形)，<code>const geometry = new THREE.BoxGeometry( 1, 1, 1 ); </code></p><ol start="8"><li>**材质(Material)**：</li></ol><ul><li>材质用于描述物体表面的外观和属性，例如颜色、光滑度、反射率等。</li><li>在Three.js中，材质控制着物体在场景中的视觉效果，例如如何反射光线、如何受到光照的影响等。</li><li>Three.js提供了多种类型的材质，例如基础材质（Basic Material）、Lambert材质、Phong材质、标准材质（Standard Material）等，每种材质都有不同的属性和效果。</li><li>通过指定不同的材质属性，可以实现各种视觉效果，如金属、塑料、玻璃等材质的外观。</li></ul><ol start="9"><li>**网格模型(Mesh)**：</li></ol><ul><li>网格模型是将几何体和材质结合起来形成的三维物体。</li><li>在Three.js中，网格模型由一个几何体和一个材质组成，它们通过THREE.Mesh类来创建和管理。</li><li>网格模型可以看作是具有形状和外观的三维物体，它们可以在场景中被添加、移动、旋转、缩放等。</li><li>通过创建网格模型，可以在场景中展示具体的物体，如立方体、球体、汽车、人物等。</li></ul><p>在上面，我们了解了地图数据，然后和一些three.js的基础，总之就是用几何体描述物体的形状和结构，然后用材质描述物体的外观和属性，最后用网格模型将几何体和材质组合在一起，形成了具体的三维物体，它们共同构成了Three.js中的三维场景。</p><p>实际生活中，一个物体往往是有位置的，对于threejs而言也是一样的，我们可以.position定义网格模型Mesh在三维场景中的位置，然后将定义好的网格模型添加到三维场景scene中。如果这个网格模型在相机的可视范围内的话，那么渲染器会执行渲染操作，将画面渲染出来。</p><h3 id="项目需求"><a href="#项目需求" class="headerlink" title="项目需求"></a><strong>项目需求</strong></h3><ul><li>地图需要有三种颜色层级，未加入系统的省份：41, 68, 93，已加入系统的省份：42, 56, 68，近期上传数据的身份：58, 140, 166</li><li>描边以及追光效果</li></ul><h3 id="学习顺序"><a href="#学习顺序" class="headerlink" title="学习顺序"></a>学习顺序</h3><h4 id="1-分析数据"><a href="#1-分析数据" class="headerlink" title="1.分析数据"></a>1.分析数据</h4><p>点可以创建出线，通过组合线可以创建出面，进而创建出立体物体，画出地图第一步就是要有正确的地理数据让我们构建出正确的地图，所以我们先从地图json数据开始学习分析。如下所示，这是我所用的GeoJSON数据，就两个属性，type和features</p><p><img src="https://cdn.jsdelivr.net/gh/pengpen1/blog-images/20240330181336.png"></p><p>GeoJSON 中的每个对象都有一个类型字段(type)，用于指示对象的类型。常见的类型包括：</p><ul><li>Point：表示一个点</li><li>LineString：表示一条线</li><li>Polygon：表示一个多边形</li><li>MultiPoint：表示多个点的集合</li><li>MultiLineString：表示多条线的集合</li><li>MultiPolygon：表示多个多边形的集合</li><li>Feature：表示一个地理特征</li><li>FeatureCollection：表示多个地理特征的集合</li></ul><p>我们点开features继续往下看，嘿，一下多了好多属性，我们一个一个看，name和行政区划代码adcode就不必多说了吧，geometry里面是我们需要的几何信息，这里的是一个多重多边形，coordinates就包含了这些多重多边形的坐标点位，这里去掉一层数组其实就是Polygon的格式了。质心Centroid，就是一个几何对象的中心点，在我们标记一个省份的时候有用。</p><p><img src="https://cdn.jsdelivr.net/gh/pengpen1/blog-images/20240330182121.png"></p><h4 id="2-辅助坐标轴"><a href="#2-辅助坐标轴" class="headerlink" title="2.辅助坐标轴"></a>2.辅助坐标轴</h4><p>基础的我们就直接跳过了，感兴趣的可以去看看<a href="https://threejs.org/docs/index.html#manual/zh/introduction/Creating-a-scene">官方文档</a>，一般我们绘制3D效果都是要画个辅助坐标轴的，<code>THREE.AxesHelper()</code>参数就是你想要的坐标轴尺寸，three.js坐标轴颜色红<strong>R</strong>、绿<strong>G</strong>、蓝<strong>B</strong>分别对应坐标系的<strong>x</strong>、<strong>y</strong>、<strong>z</strong>轴，对于three.js的3D坐标系默认<strong>y轴朝上</strong>。</p><h3 id="实现追光效果"><a href="#实现追光效果" class="headerlink" title="实现追光效果"></a>实现追光效果</h3><p>核心逻辑：是用同一份地图json中的中国地图轮廓坐标 + 着色器 + 设置opacitys</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 初始化中国轮廓地图</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">ChinaOutlineParams</span> = &#123;</span><br><span class="line">  <span class="comment">// 需要的参数</span></span><br><span class="line">  <span class="attr">lines</span>: [],</span><br><span class="line">  <span class="attr">positions</span>: <span class="literal">null</span>,</span><br><span class="line">  <span class="attr">opacitys</span>: <span class="literal">null</span>,</span><br><span class="line">  <span class="attr">points</span>: <span class="literal">null</span>,</span><br><span class="line">  <span class="attr">geometry</span>: <span class="literal">null</span>,</span><br><span class="line">  <span class="comment">// 速度控制</span></span><br><span class="line">  <span class="attr">currentPos</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="attr">currentPos1</span>: <span class="number">1800</span>,</span><br><span class="line">  <span class="attr">currentPos2</span>: <span class="number">3600</span>,</span><br><span class="line">  <span class="attr">pointSpeed</span>: <span class="number">10</span>,</span><br><span class="line">  <span class="comment">// 追光控制</span></span><br><span class="line">  <span class="attr">pointSize</span>: <span class="number">3</span>,</span><br><span class="line">  <span class="attr">pointColor</span>: <span class="string">&quot;#ffffff&quot;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">initChinaOutline</span> = <span class="keyword">async</span> (<span class="params">scene</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> indexBol = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 边框 图形绘制</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> polygon 多边形 点数组</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> color 材质颜色</span></span><br><span class="line"><span class="comment">   * */</span></span><br><span class="line">  <span class="comment">// function lineDraw(polygon, color) &#123;</span></span><br><span class="line">  <span class="comment">//   const lineGeometry = new THREE.BufferGeometry();</span></span><br><span class="line">  <span class="comment">//   const pointsArray = new Array();</span></span><br><span class="line">  <span class="comment">//   polygon.forEach((row) =&gt; &#123;</span></span><br><span class="line">  <span class="comment">//     const [x, y] = row;</span></span><br><span class="line">  <span class="comment">//     // 创建三维点</span></span><br><span class="line">  <span class="comment">//     pointsArray.push(new THREE.Vector3(x, -y, 0));</span></span><br><span class="line">  <span class="comment">//     console.log(indexBol);</span></span><br><span class="line">  <span class="comment">//     if (indexBol) &#123;</span></span><br><span class="line">  <span class="comment">//       ChinaOutlineParams.lines.push([x, -y, 0]);</span></span><br><span class="line">  <span class="comment">//     &#125;</span></span><br><span class="line">  <span class="comment">//   &#125;);</span></span><br><span class="line">  <span class="comment">//   indexBol = false;</span></span><br><span class="line">  <span class="comment">//   // 放入多个点</span></span><br><span class="line">  <span class="comment">//   lineGeometry.setFromPoints(pointsArray);</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//   const lineMaterial = new THREE.LineBasicMaterial(&#123;</span></span><br><span class="line">  <span class="comment">//     color: color,</span></span><br><span class="line">  <span class="comment">//   &#125;);</span></span><br><span class="line">  <span class="comment">//   return new THREE.Line(lineGeometry, lineMaterial);</span></span><br><span class="line">  <span class="comment">// &#125;</span></span><br><span class="line">  <span class="comment">// 只是要追光效果的话不需要画地图</span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">lineDraw</span>(<span class="params">polygon</span>) &#123;</span><br><span class="line">    polygon.<span class="title function_">forEach</span>(<span class="function">(<span class="params">row</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> [x, y] = row;</span><br><span class="line">      <span class="comment">// 创建三维点</span></span><br><span class="line">      <span class="title class_">ChinaOutlineParams</span>.<span class="property">lines</span>.<span class="title function_">push</span>([x, -y, <span class="number">0</span>]);</span><br><span class="line">      <span class="comment">// 想增加点密度来实现更细腻的追光效果，但是效果不理想</span></span><br><span class="line">      <span class="comment">// ChinaOutlineParams.lines.push([x + 0.05, -y, 0]);</span></span><br><span class="line">      <span class="comment">// ChinaOutlineParams.lines.push([x - 0.05, -y, 0]);</span></span><br><span class="line">      <span class="comment">// ChinaOutlineParams.lines.push([x + 0.12, -y, 0]);</span></span><br><span class="line">      <span class="comment">// ChinaOutlineParams.lines.push([x - 0.12, -y, 0]);</span></span><br><span class="line">    &#125;);</span><br><span class="line">    indexBol = <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> chinaData = <span class="keyword">await</span> <span class="title function_">requestData</span>(<span class="string">&quot;./data/map/中国轮廓.json&quot;</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;中国轮廓数据&quot;</span>, chinaData);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 中国边界</span></span><br><span class="line">  <span class="keyword">const</span> feature = chinaData.<span class="property">features</span>[<span class="number">0</span>];</span><br><span class="line">  <span class="comment">// const province = new THREE.Object3D();</span></span><br><span class="line">  <span class="comment">// province.properties = feature.properties.name;</span></span><br><span class="line">  <span class="comment">// 点数据</span></span><br><span class="line">  <span class="keyword">const</span> coordinates = feature.<span class="property">geometry</span>.<span class="property">coordinates</span>;</span><br><span class="line">  coordinates.<span class="title function_">forEach</span>(<span class="function">(<span class="params">coordinate</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// coordinate 多边形数据</span></span><br><span class="line">    coordinate.<span class="title function_">forEach</span>(<span class="function">(<span class="params">rows</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> line = <span class="title function_">lineDraw</span>(rows, <span class="number">0xe10909</span>);</span><br><span class="line">      <span class="comment">// province.add(line);</span></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// province.position.set(0, 0, 2);</span></span><br><span class="line">  <span class="comment">// province.rotation.set(0, Math.PI, Math.PI);</span></span><br><span class="line">  <span class="comment">// scene.add(province);</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 着色器相关</span></span><br><span class="line">  <span class="title class_">ChinaOutlineParams</span>.<span class="property">geometry</span> = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">BufferGeometry</span>();</span><br><span class="line">  <span class="title class_">ChinaOutlineParams</span>.<span class="property">positions</span> = <span class="keyword">new</span> <span class="title class_">Float32Array</span>(</span><br><span class="line">    <span class="title class_">ChinaOutlineParams</span>.<span class="property">lines</span>.<span class="title function_">flat</span>(<span class="number">1</span>)</span><br><span class="line">  );</span><br><span class="line">  <span class="comment">// 设置顶点</span></span><br><span class="line">  <span class="title class_">ChinaOutlineParams</span>.<span class="property">geometry</span>.<span class="title function_">setAttribute</span>(</span><br><span class="line">    <span class="string">&quot;position&quot;</span>,</span><br><span class="line">    <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">BufferAttribute</span>(<span class="title class_">ChinaOutlineParams</span>.<span class="property">positions</span>, <span class="number">3</span>)</span><br><span class="line">  );</span><br><span class="line">  <span class="comment">// 设置 粒子透明度为 0</span></span><br><span class="line">  <span class="title class_">ChinaOutlineParams</span>.<span class="property">opacitys</span> = <span class="keyword">new</span> <span class="title class_">Float32Array</span>(</span><br><span class="line">    <span class="title class_">ChinaOutlineParams</span>.<span class="property">positions</span>.<span class="property">length</span></span><br><span class="line">  ).<span class="title function_">map</span>(<span class="function">() =&gt;</span> <span class="number">0</span>);</span><br><span class="line">  <span class="title class_">ChinaOutlineParams</span>.<span class="property">geometry</span>.<span class="title function_">setAttribute</span>(</span><br><span class="line">    <span class="string">&quot;aOpacity&quot;</span>,</span><br><span class="line">    <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">BufferAttribute</span>(<span class="title class_">ChinaOutlineParams</span>.<span class="property">opacitys</span>, <span class="number">1</span>)</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> vertexShader = <span class="string">`</span></span><br><span class="line"><span class="string">    attribute float aOpacity;</span></span><br><span class="line"><span class="string">    uniform float uSize;</span></span><br><span class="line"><span class="string">    varying float vOpacity;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    void main()&#123;</span></span><br><span class="line"><span class="string">        gl_Position = projectionMatrix*modelViewMatrix*vec4(position,1.0);</span></span><br><span class="line"><span class="string">        gl_PointSize = uSize;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        vOpacity=aOpacity;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    `</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> fragmentShader = <span class="string">`</span></span><br><span class="line"><span class="string">    varying float vOpacity;</span></span><br><span class="line"><span class="string">    uniform vec3 uColor;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    float invert(float n)&#123;</span></span><br><span class="line"><span class="string">        return 1.-n;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    void main()&#123;</span></span><br><span class="line"><span class="string">      if(vOpacity &lt;=0.2)&#123;</span></span><br><span class="line"><span class="string">          discard;</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">      vec2 uv=vec2(gl_PointCoord.x,invert(gl_PointCoord.y));</span></span><br><span class="line"><span class="string">      vec2 cUv=2.*uv-1.;</span></span><br><span class="line"><span class="string">      vec4 color=vec4(1./length(cUv));</span></span><br><span class="line"><span class="string">      color*=vOpacity;</span></span><br><span class="line"><span class="string">      color.rgb*=uColor;</span></span><br><span class="line"><span class="string">      gl_FragColor=color;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    `</span>;</span><br><span class="line">  <span class="keyword">const</span> material = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">ShaderMaterial</span>(&#123;</span><br><span class="line">    <span class="attr">vertexShader</span>: vertexShader,</span><br><span class="line">    <span class="attr">fragmentShader</span>: fragmentShader,</span><br><span class="line">    <span class="attr">transparent</span>: <span class="literal">true</span>, <span class="comment">// 设置透明</span></span><br><span class="line">    <span class="comment">// emissive: 0xff0000,</span></span><br><span class="line">    <span class="comment">// lending: THREE.AdditiveBlending, //在使用此材质显示对象时要使用何种混合。加法</span></span><br><span class="line">    <span class="attr">uniforms</span>: &#123;</span><br><span class="line">      <span class="attr">uSize</span>: &#123;</span><br><span class="line">        <span class="attr">value</span>: <span class="title class_">ChinaOutlineParams</span>.<span class="property">pointSize</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">uColor</span>: &#123;</span><br><span class="line">        <span class="attr">value</span>: <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">Color</span>(<span class="title class_">ChinaOutlineParams</span>.<span class="property">pointColor</span>),</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="title class_">ChinaOutlineParams</span>.<span class="property">points</span> = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">Points</span>(</span><br><span class="line">    <span class="title class_">ChinaOutlineParams</span>.<span class="property">geometry</span>,</span><br><span class="line">    material</span><br><span class="line">  );</span><br><span class="line">  scene.<span class="title function_">add</span>(<span class="title class_">ChinaOutlineParams</span>.<span class="property">points</span>);</span><br><span class="line"></span><br><span class="line">  <span class="title class_">ChinaOutlineParams</span>.<span class="property">points</span>.<span class="property">position</span>.<span class="title function_">set</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">1.01</span>);</span><br><span class="line">  <span class="title class_">ChinaOutlineParams</span>.<span class="property">points</span>.<span class="property">rotation</span>.<span class="title function_">set</span>(<span class="number">0</span>, <span class="title class_">Math</span>.<span class="property">PI</span>, <span class="title class_">Math</span>.<span class="property">PI</span>);</span><br><span class="line">  <span class="comment">//UI设计  12秒1圈   长度大概是 64/360</span></span><br><span class="line">  <span class="comment">// 渲染</span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// console.log(ChinaOutlineParams.currentPos, ChinaOutlineParams.lines);</span></span><br><span class="line">    <span class="keyword">if</span> (</span><br><span class="line">      <span class="title class_">ChinaOutlineParams</span>.<span class="property">points</span> &amp;&amp;</span><br><span class="line">      <span class="title class_">ChinaOutlineParams</span>.<span class="property">geometry</span>.<span class="property">attributes</span>.<span class="property">position</span></span><br><span class="line">    ) &#123;</span><br><span class="line">      <span class="title class_">ChinaOutlineParams</span>.<span class="property">currentPos</span> += <span class="title class_">ChinaOutlineParams</span>.<span class="property">pointSpeed</span>;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="title class_">ChinaOutlineParams</span>.<span class="property">pointSpeed</span>; i++) &#123;</span><br><span class="line">        <span class="title class_">ChinaOutlineParams</span>.<span class="property">opacitys</span>[</span><br><span class="line">          (<span class="title class_">ChinaOutlineParams</span>.<span class="property">currentPos</span> - i) %</span><br><span class="line">            <span class="title class_">ChinaOutlineParams</span>.<span class="property">lines</span>.<span class="property">length</span></span><br><span class="line">        ] = <span class="number">0</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">888</span>; i++) &#123;</span><br><span class="line">        <span class="title class_">ChinaOutlineParams</span>.<span class="property">opacitys</span>[</span><br><span class="line">          (<span class="title class_">ChinaOutlineParams</span>.<span class="property">currentPos</span> + i) %</span><br><span class="line">            <span class="title class_">ChinaOutlineParams</span>.<span class="property">lines</span>.<span class="property">length</span></span><br><span class="line">        ] = i / <span class="number">50</span> &gt; <span class="number">2</span> ? <span class="number">2</span> : i / <span class="number">50</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="title class_">ChinaOutlineParams</span>.<span class="property">currentPos1</span> += <span class="title class_">ChinaOutlineParams</span>.<span class="property">pointSpeed</span>;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="title class_">ChinaOutlineParams</span>.<span class="property">pointSpeed</span>; i++) &#123;</span><br><span class="line">        <span class="title class_">ChinaOutlineParams</span>.<span class="property">opacitys</span>[</span><br><span class="line">          (<span class="title class_">ChinaOutlineParams</span>.<span class="property">currentPos1</span> - i) %</span><br><span class="line">            <span class="title class_">ChinaOutlineParams</span>.<span class="property">lines</span>.<span class="property">length</span></span><br><span class="line">        ] = <span class="number">0</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">888</span>; i++) &#123;</span><br><span class="line">        <span class="title class_">ChinaOutlineParams</span>.<span class="property">opacitys</span>[</span><br><span class="line">          (<span class="title class_">ChinaOutlineParams</span>.<span class="property">currentPos1</span> + i) %</span><br><span class="line">            <span class="title class_">ChinaOutlineParams</span>.<span class="property">lines</span>.<span class="property">length</span></span><br><span class="line">        ] = i / <span class="number">50</span> &gt; <span class="number">2</span> ? <span class="number">2</span> : i / <span class="number">50</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="title class_">ChinaOutlineParams</span>.<span class="property">currentPos2</span> += <span class="title class_">ChinaOutlineParams</span>.<span class="property">pointSpeed</span>;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="title class_">ChinaOutlineParams</span>.<span class="property">pointSpeed</span>; i++) &#123;</span><br><span class="line">        <span class="title class_">ChinaOutlineParams</span>.<span class="property">opacitys</span>[</span><br><span class="line">          (<span class="title class_">ChinaOutlineParams</span>.<span class="property">currentPos2</span> - i) %</span><br><span class="line">            <span class="title class_">ChinaOutlineParams</span>.<span class="property">lines</span>.<span class="property">length</span></span><br><span class="line">        ] = <span class="number">0</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">300</span>; i++) &#123;</span><br><span class="line">        <span class="title class_">ChinaOutlineParams</span>.<span class="property">opacitys</span>[</span><br><span class="line">          (<span class="title class_">ChinaOutlineParams</span>.<span class="property">currentPos2</span> + i) %</span><br><span class="line">            <span class="title class_">ChinaOutlineParams</span>.<span class="property">lines</span>.<span class="property">length</span></span><br><span class="line">        ] = i / <span class="number">50</span> &gt; <span class="number">2</span> ? <span class="number">2</span> : i / <span class="number">50</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="title class_">ChinaOutlineParams</span>.<span class="property">geometry</span>.<span class="property">attributes</span>.<span class="property">aOpacity</span>.<span class="property">needsUpdate</span> = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">requestAnimationFrame</span>(render);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">requestAnimationFrame</span>(render);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="实现发光效果"><a href="#实现发光效果" class="headerlink" title="实现发光效果"></a>实现发光效果</h3><p><strong>方案1 使用泛光后期效果</strong></p><p>核心逻辑：将发光的物体放到一个层级，没发光的放到一个层级。默认所有对象是在0层，我们将0层设置为发光层，不需要发光的对象设置在1层，我们需要关闭自动清除，然后在requestAnimationFrame循环里面手动更改相机层级、渲染后期效果、清除缓冲区深度数据。注意：camera要和渲染的物体一个层级时才能被渲染出来。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//清除深度缓冲区深度数据</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">renderer</span>.<span class="title function_">clearDepth</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//关闭渲染每一帧之前自动清除其输出</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">renderer</span>.<span class="property">autoClear</span> = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//手动清除颜色、深度或模板缓存</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">renderer</span>.<span class="title function_">clear</span>();</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">renderer</span>.<span class="title function_">clear</span>();</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">camera</span>.<span class="property">layers</span>.<span class="title function_">set</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">composer</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">composer</span>.<span class="title function_">render</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 清除深度缓冲区深度数据</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">renderer</span>.<span class="title function_">clearDepth</span>();</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">camera</span>.<span class="property">layers</span>.<span class="title function_">set</span>(<span class="number">1</span>);</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">renderer</span>.<span class="title function_">render</span>(<span class="variable language_">this</span>.<span class="property">scene</span>, <span class="variable language_">this</span>.<span class="property">camera</span>);</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">animationStop</span> = <span class="variable language_">window</span>.<span class="title function_">requestAnimationFrame</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="title function_">loop</span>();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>方案2 使用聚光灯</strong></p><p>核心逻辑：将背景材质改为可以受光源影响，并添加合适高度的聚光灯以此模拟发光效果。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 聚光灯,颜色，光照强度，光源照射的最大距离，光线照射范围的角度，聚光锥的半影衰减百分比，沿着光照距离的衰减量</span></span><br><span class="line"><span class="keyword">let</span> spotLight = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">SpotLight</span>(</span><br><span class="line">  <span class="number">0x1af0ff</span>,</span><br><span class="line">  <span class="number">1.8</span>,</span><br><span class="line">  <span class="number">200</span>,</span><br><span class="line">  <span class="title class_">Math</span>.<span class="property">PI</span> / <span class="number">3</span>,</span><br><span class="line">  <span class="number">0</span>,</span><br><span class="line">  <span class="number">2</span></span><br><span class="line">);</span><br><span class="line">spotLight.<span class="property">position</span>.<span class="title function_">set</span>(...centerXY, <span class="number">25</span>);</span><br><span class="line">spotLight.<span class="property">target</span>.<span class="property">position</span>.<span class="title function_">set</span>(...centerXY, <span class="number">0</span>); <span class="comment">// 设置聚光灯的目标位置</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="title function_">addObject</span>(spotLight.<span class="property">target</span>); <span class="comment">// 需要将目标的位置加入到场景中</span></span><br><span class="line">spotLight.<span class="property">penumbra</span> = <span class="number">0.45</span>; <span class="comment">// 设置聚光灯的边缘模糊程度</span></span><br></pre></td></tr></table></figure><h3 id="实现倒影效果"><a href="#实现倒影效果" class="headerlink" title="实现倒影效果"></a>实现倒影效果</h3><p>threejs中使用Reflector实现出倒影效果，并且需要显示镜面下面的内容，镜面的其他地方为透明（例如模仿地板倒影效果）</p><p>three.js给我们封装好了现成的可以实现镜面效果的类Reflector，使用也很简单</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Reflector</span> &#125; <span class="keyword">from</span> <span class="string">&quot;three/examples/jsm/objects/Reflector.js&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建镜面反射器</span></span><br><span class="line"><span class="keyword">const</span> reflector = <span class="keyword">new</span> <span class="title class_">Reflector</span>(plane, &#123;</span><br><span class="line">    <span class="attr">clipBias</span>: <span class="number">0.003</span>, <span class="comment">// 裁剪偏差</span></span><br><span class="line">    <span class="attr">textureWidth</span>: <span class="variable language_">window</span>.<span class="property">innerWidth</span> * <span class="variable language_">window</span>.<span class="property">devicePixelRatio</span>,</span><br><span class="line">    <span class="attr">textureHeight</span>: <span class="variable language_">window</span>.<span class="property">innerHeight</span> * <span class="variable language_">window</span>.<span class="property">devicePixelRatio</span>,</span><br><span class="line">    <span class="attr">color</span>: <span class="number">0x889999</span>,</span><br><span class="line">&#125;);</span><br><span class="line">scene.<span class="title function_">add</span>(reflector);</span><br></pre></td></tr></table></figure><p>其中，第一个参数用于指定 Reflector 的几何形状。第二个参数是可选的，是一个配置选项对象，包含以下属性：</p><ul><li>color: 反射面的颜色，可以是一个 CSS 颜色字符串或是一个 three.js 的 Color 对象，默认值是 0x7F7F7F。</li><li>textureWidth: 反射纹理的宽度，单位是像素，默认值是 512。</li><li>textureHeight: 反射纹理的高度，单位是像素，默认值是 512。</li><li>clipBias: 剪裁偏移值，用于控制剪裁平面的位置，可以用于解决渲染的反射对象和原始对象之间的闪烁问题，默认值是 0。</li><li>shader: 用于渲染反射效果的着色器程序，可以是一个 three.js 的 ShaderMaterial 对象，默认值是 undefined，表示使用内置的着色器。</li><li>encoding: 反射纹理的编码格式，默认值是 LinearEncoding。</li><li>multisample: 反射纹理的多重采样级别，用于抗锯齿，默认值是 0，表示不使用多重采样。</li></ul><p>Reflector 对象有以下方法：</p><ul><li>getRenderTarget(): 获取渲染到的反射纹理对象，可以用于后续的处理。</li><li>dispose(): 释放 Reflector 对象的资源，包括纹理和几何形状。</li></ul><p>这样子确实创建出了镜面效果，但是确实黑色的一片，且把下发的背景给遮挡住了，我想要的效果是需要显示镜面下面的内容，镜面的其他地方为透明（例如模仿地板倒影效果）。然后就去网上找了一下解决方案，有修改源码的：</p><p>找到 <code>three/examples/jsm/objects/Reflector</code> 文件。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">fragmentShader</span>: <span class="comment">/* glsl */</span><span class="string">`uniform vec3 color;uniform sampler2D tDiffuse;varying vec4 vUv;#include &lt;logdepthbuf_pars_fragment&gt;float blendOverlay( float base, float blend ) &#123;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">// 需要修改的第一个地方， 这里是要虚化倒影的 ******************************************</span></span><br><span class="line"><span class="string">*return( base &lt; 0.5 ? ( 2.0 * base * blend ) : ( 1.0 - 2.0 * ( 1.0 - base ) * ( 1.0 - blend ) ) );// 修改为:return( base &lt; 1.0 ? ( 0.3 * base * blend ) : ( 1.0 - 2.0 * ( 1.0 - base ) * ( 1.0 - blend ) ) );&#125;vec3 blendOverlay( vec3 base, vec3 blend ) &#123;return vec3( blendOverlay( base.r, blend.r ), blendOverlay( base.g, blend.g ), blendOverlay( base.b, blend.b ));&#125;void main() &#123;#include &lt;logdepthbuf_fragment&gt;vec4 base = texture2DProj( tDiffuse, vUv );</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">// 需要修改的第二个地方， 设置背景透明的 *******************************************</span></span><br><span class="line"><span class="string">gl_FragColor = vec4( blendOverlay( base.rgb, color ), 1.0 );// 修改为// gl_FragColor = vec4( blendOverlay( base.rgb, color ), .01 );#include &lt;encodings_fragment&gt;</span></span><br></pre></td></tr></table></figure><p>结果是不行，就这种垃圾方案竟然要钱…</p><p>然后我就改变思路，倒影不能设置为透明的，那背景总可以吧，把倒影放在背景层的下面，设置背景透明度，最后成功了：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 初始化背景</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">initSceneImag</span> = (<span class="params">scene, url, size</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">TextureLoader</span>().<span class="title function_">load</span>(url, <span class="function">(<span class="params">texture</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> img = texture.<span class="property">image</span>;</span><br><span class="line">    <span class="keyword">let</span> height = (img &amp;&amp; img.<span class="property">height</span>) || <span class="number">1080</span>;</span><br><span class="line">    <span class="keyword">let</span> width = (img &amp;&amp; img.<span class="property">width</span>) || <span class="number">1920</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;size&quot;</span>, height, width); <span class="comment">// 1080*1920</span></span><br><span class="line">    height = size * height;</span><br><span class="line">    width = size * width;</span><br><span class="line">    <span class="keyword">const</span> mat = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">MeshStandardMaterial</span>(&#123;</span><br><span class="line">      <span class="attr">map</span>: texture,</span><br><span class="line">      <span class="comment">// side: THREE.DoubleSide,</span></span><br><span class="line">      <span class="attr">transparent</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">opacity</span>: <span class="number">0.75</span>,</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">const</span> geom = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">PlaneGeometry</span>(width, height);</span><br><span class="line">    <span class="keyword">const</span> mesh = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">Mesh</span>(geom, mat);</span><br><span class="line">    mesh.<span class="property">position</span>.<span class="title function_">set</span>(...centerXY, bottomZ + <span class="number">0.1</span>);</span><br><span class="line">    mesh.<span class="property">position</span>.<span class="property">y</span> += <span class="number">2.5</span>;</span><br><span class="line">    mesh.<span class="property">position</span>.<span class="property">x</span> += <span class="number">0.9</span>;</span><br><span class="line">    <span class="comment">// mesh.receiveShadow = true; // 设置接受阴影</span></span><br><span class="line">    scene.<span class="title function_">add</span>(mesh);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建镜面</span></span><br><span class="line">    <span class="keyword">const</span> mirrorOptions = &#123;</span><br><span class="line">      <span class="attr">clipBias</span>: <span class="number">0.03</span>,</span><br><span class="line">      <span class="attr">textureWidth</span>: <span class="variable language_">window</span>.<span class="property">innerWidth</span> * <span class="variable language_">window</span>.<span class="property">devicePixelRatio</span>,</span><br><span class="line">      <span class="attr">textureHeight</span>: <span class="variable language_">window</span>.<span class="property">innerHeight</span> * <span class="variable language_">window</span>.<span class="property">devicePixelRatio</span>,</span><br><span class="line">      <span class="attr">transparent</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">opacity</span>: <span class="number">0.5</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">const</span> mirror = <span class="keyword">new</span> <span class="title class_">Reflector</span>(geom, mirrorOptions);</span><br><span class="line">    <span class="comment">// mirror.receiveShadow = true; // 设置接受阴影</span></span><br><span class="line">    mirror.<span class="property">position</span>.<span class="title function_">set</span>(...centerXY, bottomZ - <span class="number">0.2</span>);</span><br><span class="line">    mirror.<span class="property">position</span>.<span class="property">y</span> += <span class="number">2.5</span>;</span><br><span class="line">    mirror.<span class="property">position</span>.<span class="property">x</span> += <span class="number">0.9</span>;</span><br><span class="line">    scene.<span class="title function_">add</span>(mirror);</span><br><span class="line">  &#125;);</span><br><span class="line">  scene.<span class="property">fog</span> = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">Fog</span>(<span class="number">0xffffff</span>, <span class="number">2</span>, <span class="number">90</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>效果图如下所示：</p><p><img src="https://cdn.jsdelivr.net/gh/pengpen1/blog-images/3d4ec957317800b9b475862b6dad04f.png"></p><h3 id="优化需求"><a href="#优化需求" class="headerlink" title="优化需求"></a>优化需求</h3><ul><li>光柱会被背景挡住，渲染顺序问题？ 给渲染器设置禁用深度测试倒是可以解决，就是有些渲染会出问题<code>renderer.sortObjects = false</code> <strong>√采用了CSS2DRenderer渲染gif替代手绘光柱</strong></li><li>优化光柱效果 <strong>√ 增加了复制次数</strong></li></ul><h3 id="疑问解答"><a href="#疑问解答" class="headerlink" title="疑问解答"></a>疑问解答</h3><p><strong>1.Polygon 和 MultiPolygon各是什么？</strong></p><ul><li>在地理信息系统（GIS）中，Polygon 和 MultiPolygon 是用于描述地理空间多边形的两种几何类型。</li><li>Polygon（多边形）：Polygon 是一种简单的几何类型，用于表示封闭的二维区域，通常由一组有序的点（顶点）组成，最后一个点会自动连接到第一个点，形成一个封闭的区域。<br>例如，一个国家的边界、一个湖泊的边界或者一个建筑物的外轮廓都可以用 Polygon 来描述。</li><li>MultiPolygon（多重多边形）：MultiPolygon 是一种复杂的几何类型，用于表示多个独立的、不相交的多边形组成的集合。每个 MultiPolygon 对象包含多个 Polygon 对象，每个 Polygon 表示一个独立的封闭区域。例如，一个国家可能由多个岛屿组成，每个岛屿的边界都可以用一个 Polygon 来描述，而这些岛屿的集合则可以用一个 MultiPolygon 来表示。</li></ul><p><strong>2.如何设置场景颜色、场景图片、全景图呢？</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">   <span class="comment">//设置场景颜色</span></span><br><span class="line"><span class="title function_">onSetSceneColor</span>(<span class="params">color</span>) &#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">scene</span>.<span class="property">background</span> = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">Color</span>(color)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//设置场景图片</span></span><br><span class="line"><span class="title function_">onSetSceneImage</span>(<span class="params">url</span>) &#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">scene</span>.<span class="property">background</span> = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">TextureLoader</span>().<span class="title function_">load</span>(url);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 设置全景图</span></span><br><span class="line"><span class="title function_">onSetSceneViewImage</span>(<span class="params">url</span>) &#123;</span><br><span class="line"><span class="keyword">const</span> texture = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">TextureLoader</span>().<span class="title function_">load</span>(url);</span><br><span class="line">texture.<span class="property">mapping</span> = <span class="variable constant_">THREE</span>.<span class="property">EquirectangularReflectionMapping</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">scene</span>.<span class="property">background</span> = texture</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">scene</span>.<span class="property">environment</span> = texture</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>3.如何统一设置透明的呢？</strong></p><p>我们可以用一个容器对需要设置透明度的3D对象进行统一管理，比如<code>THREE.Object3D</code> 和 <code>THREE.Group</code> 。<br>THREE.Object3D 是 Three.js 中的基类，所有的 3D 对象都是 THREE.Object3D 类或其子类的实例。它是场景中所有对象的通用容器，具有基本的属性和方法，如位置、旋转、缩放等。可以将几乎任何类型的对象添加到 THREE.Object3D 中，包括几何体、网格、摄像机等。<br>THREE.Group 是 THREE.Object3D 的子类，它提供了更高级别的组织和管理功能。与 THREE.Object3D 相比，THREE.Group 具有更多的方法来管理其子对象，例如添加、移除和排序子对象。THREE.Group 对象本身没有几何形状或材质，它只是一种组织方式，用于将相关对象分组并对它们进行集体操作。<br><code>THREE.Object3D</code> 和 <code>THREE.Group</code> 都可以设置透明度（opacity）属性，但是它们本身并不具有透明度属性。透明度通常是通过设置对象的材质（Material）来实现的。我们可以遍历 <code>THREE.Group</code> 的子对象并设置它们的材质透明度属性。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建一个 THREE.Group</span></span><br><span class="line"><span class="keyword">var</span> group = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">Group</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加一些子对象到组内</span></span><br><span class="line">group.<span class="title function_">add</span>(object1);</span><br><span class="line">group.<span class="title function_">add</span>(object2);</span><br><span class="line"><span class="comment">// 添加更多的对象...</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 遍历组内的子对象，设置它们的透明度</span></span><br><span class="line">group.<span class="title function_">traverse</span>(<span class="keyword">function</span> (<span class="params">child</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (child <span class="keyword">instanceof</span> <span class="variable constant_">THREE</span>.<span class="property">Mesh</span>) &#123;</span><br><span class="line">        <span class="comment">// 检查对象是否为 Mesh，因为透明度只对 Mesh 有效</span></span><br><span class="line">        <span class="comment">// 设置透明度为 0.5</span></span><br><span class="line">        child.<span class="property">material</span>.<span class="property">opacity</span> = <span class="number">0.5</span>;</span><br><span class="line">        <span class="comment">// 开启透明渲染</span></span><br><span class="line">        child.<span class="property">material</span>.<span class="property">transparent</span> = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将组添加到场景中</span></span><br><span class="line">scene.<span class="title function_">add</span>(group);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ul><li><a href="https://juejin.cn/post/7250375753598844983">用Three.js搞个炫酷的3D区块地图 - 掘金 (juejin.cn)</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> three.js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> three.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>爬虫学习笔记(四)</title>
      <link href="/2024/03/18/python-%E7%88%AC%E8%99%AB%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(%E5%9B%9B)/"/>
      <url>/2024/03/18/python-%E7%88%AC%E8%99%AB%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(%E5%9B%9B)/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p><strong>概要：</strong>在这篇记录中，我们将学习python中的列表、元组、字典、集合等等内容。</p><h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><p>Python中的列表基本和JavaScrip中的数组类似，不过是语法和一些内置方法有所不同罢了，所谓一通万通。大家也没必要所有的内置方法和操作符都掌握，记住常用的就行，其他的简单了解即可，之后要用到再去查。</p><p>对一个数据结构，最基本的操作就是对元素的增删改查，python中创建列表还是和js一样，方括号包裹列表元素，多个元素使用逗号分隔，元素允许使用不同的类型。</p><p>python中列表和js中数组之间差距比较大的就是操作符和删除了，python使用del会改变列表长度，而JavaScrip使用delete不会改变数组长度。操作符就比较逆天了，直接看下面的演示代码吧。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> operator</span><br><span class="line"></span><br><span class="line">lista = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>]</span><br><span class="line"><span class="comment"># 增</span></span><br><span class="line">listb = lista + [<span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>] <span class="comment"># 组合,不改变原列表,返回新列表</span></span><br><span class="line">listb2 = listb.append(<span class="number">14</span>) <span class="comment"># 附加,改变原列表,返回None</span></span><br><span class="line">listb3 = listb.extend([<span class="number">15</span>, <span class="number">16</span>]) <span class="comment"># 新列表追加到原来的列表,改变原列表,返回None</span></span><br><span class="line">listb4 = lista * <span class="number">2</span> <span class="comment"># 重复,不改变原列表,返回新列表</span></span><br><span class="line"><span class="comment"># 删</span></span><br><span class="line"><span class="keyword">del</span> lista[<span class="number">1</span>]</span><br><span class="line"><span class="comment"># 改</span></span><br><span class="line">lista[<span class="number">0</span>] = <span class="number">0</span></span><br><span class="line"><span class="comment"># 查</span></span><br><span class="line">is2 =  <span class="number">2</span> <span class="keyword">in</span> lista</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(lista) <span class="comment"># output: [0, 3, 4, 5, 6, 7, 8, 9, 10]</span></span><br><span class="line"><span class="built_in">print</span>(listb) <span class="comment"># output: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]</span></span><br><span class="line"><span class="built_in">print</span>(listb2) <span class="comment"># output: None</span></span><br><span class="line"><span class="built_in">print</span>(listb3) <span class="comment"># output: None</span></span><br><span class="line"><span class="built_in">print</span>(listb4) <span class="comment"># output: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]</span></span><br><span class="line"><span class="built_in">print</span>(is2) <span class="comment"># output: False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 列表截取</span></span><br><span class="line">liste = lista[<span class="number">5</span>:]</span><br><span class="line"><span class="comment"># 列表推导式（List Comprehension）筛选出所有满足条件的偶数</span></span><br><span class="line">listf = [x <span class="keyword">for</span> x <span class="keyword">in</span> lista <span class="keyword">if</span> x % <span class="number">2</span> == <span class="number">0</span>]</span><br><span class="line"><span class="comment"># 获取长度</span></span><br><span class="line"><span class="built_in">len</span> = <span class="built_in">len</span>(lista)</span><br><span class="line"><span class="comment"># 列表比较</span></span><br><span class="line"><span class="comment"># output: False</span></span><br><span class="line"><span class="built_in">print</span>(operator.eq(lista, listb))</span><br><span class="line"><span class="comment"># output: True</span></span><br><span class="line"><span class="built_in">print</span>(operator.eq([<span class="number">123</span>], [<span class="number">123</span>]))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># output: [6, 7, 8, 9, 10]</span></span><br><span class="line"><span class="built_in">print</span>(liste)</span><br><span class="line"><span class="comment"># output: [2, 4, 6, 8, 10]</span></span><br><span class="line"><span class="built_in">print</span>(listf)</span><br><span class="line"><span class="comment"># output: 9</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>为了防止Python的语法影响到JavaScrip的基础，这里我们在简单复习一下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> array = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">const</span> list = array + [<span class="number">123</span>];</span><br><span class="line"><span class="comment">// + 运算符的任一操作数不是数字或字符串，JavaScript会尝试将其转换为相应的字符串，然后执行字符串连接操作。</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(list, <span class="keyword">typeof</span> list); <span class="comment">//1,2,3,4,5123 string</span></span><br><span class="line"><span class="keyword">delete</span> array[<span class="number">0</span>]; <span class="comment">// 删除对象的一个属性,对数组进行操作的话不会影响数组长度</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(array[<span class="number">0</span>], <span class="number">0</span> <span class="keyword">in</span> array, array, array.<span class="property">length</span>); <span class="comment">// undefined false [ &lt;1 empty item&gt;, 2, 3, 4, 5 ] 5</span></span><br><span class="line"><span class="comment">//  push()、splice、join()、slice()、indexOf()、concat() 等</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(array.<span class="title function_">indexOf</span>(<span class="number">2</span>)); <span class="comment">// 1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span> <span class="keyword">in</span> array); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>要注意的就是<code>+</code> 运算符</p><ul><li>如果<code>+</code> 运算符的两个操作数都是数字，它将执行数值相加操作</li><li>如果 <code>+</code> 运算符的任一操作数是字符串，则它会执行字符串连接操作</li><li>如果 <code>+</code> 运算符的任一操作数不是数字或字符串，JavaScript会尝试将其转换为相应的字符串，然后执行字符串连接操作</li></ul><p>js中删除数组里面的元素，我们基本不会用delete，一般用splice，或者直接赋值</p><h3 id="TODO"><a href="#TODO" class="headerlink" title="TODO"></a><strong>TODO</strong></h3><h3 id="疑问解答"><a href="#疑问解答" class="headerlink" title="疑问解答"></a>疑问解答</h3><p><strong>1.计算机中内存、进程、线程各是什么？</strong></p><p>先说结论：内存是临时存储程序及其数据的地方，进程是操作系统中的一个执行实例，操作系统通过进程管理来确保多个程序能够并发执行，并且有效地利用计算机资源。而线程则是进程中的执行单元，它们共同协作以实现程序的运行。</p><ol><li><strong>内存（RAM）：</strong> 内存是计算机用于临时存储数据和程序的地方。它是一种易失性存储设备，这意味着当计算机关闭或断电时，存储在内存中的数据都会丢失。内存的主要目的是为了提供对数据的快速访问，因此相比于硬盘等存储设备，内存的读写速度要快得多。</li><li><strong>进程：</strong> 进程是操作系统中的一个执行实例。当你启动一个程序时，操作系统会创建一个相应的进程来运行该程序。每个进程都拥有独立的内存空间，包括代码、数据、堆栈等。进程之间通常是相互隔离的，一个进程的数据不会直接影响到另一个进程。每个进程都有自己的资源分配和管理，包括内存、文件句柄等。</li><li><strong>线程：</strong> 线程是进程中的一个执行单元。一个进程可以包含多个线程，这些线程共享进程的资源，如内存空间和文件句柄等。不同于进程，线程之间共享同一份内存空间，因此线程间的通信和数据共享更为方便。线程的创建和切换相对于进程来说开销较小，因此多线程编程常用于提高程序的并发性和性能。</li></ol><p>在一个程序运行时，操作系统会为其创建一个进程，并在该进程内创建一个或多个线程，这些线程负责执行不同的任务。这些任务所需的数据会被加载到内存中，然后由对应的线程执行。当程序结束时，操作系统会释放进程及其所占用的内存空间，这些数据也会从内存中清除。</p><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ul><li><a href="https://www.liaoxuefeng.com/wiki/1016959663602400/1017063826246112">廖雪峰&#x2F;python教程</a></li><li><a href="https://www.runoob.com/python3/python3-list.html">Python | 菜鸟教程 (runoob.com)</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>爬虫学习笔记(三)</title>
      <link href="/2024/03/15/python-%E7%88%AC%E8%99%AB%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(%E4%B8%89)/"/>
      <url>/2024/03/15/python-%E7%88%AC%E8%99%AB%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(%E4%B8%89)/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p><strong>概要：</strong>在这篇记录中，我们将学习用后缀为.py的文件记录Python代码、Python的I&#x2F;O、计算机中的编码和字符集等等内容。</p><h3 id="py后缀文件"><a href="#py后缀文件" class="headerlink" title=".py后缀文件"></a>.py后缀文件</h3><p>咱们都知道js文件的后缀是<code>.js</code>，Python文件的的后缀是什么呢？<span class="hide-inline"><button type="button" class="hide-button" style="background-color: #FF7242;color: #fff">查看答案  </button><span class="hide-content">.py</span></span></p><p>和<code>.js</code>文件类似，我们可以将代码写入<code>.py</code>文件中，然后通过Python解释器去执行。在安装了上一篇文章中我推荐的插件后，我们只需右键选择Run Python然后选择第一项即可直接运行该文件，选择Format Document还能格式化代码。</p><p><img src="https://cdn.jsdelivr.net/gh/pengpen1/blog-images/20240314153608.png"></p><h3 id="I-O"><a href="#I-O" class="headerlink" title="I&#x2F;O"></a>I&#x2F;O</h3><p>任何计算机程序都是为了执行一个特定的任务，有了输入，用户才能告诉计算机程序所需的信息，有了输出，程序运行后才能告诉用户任务的结果。输入是Input，输出是Output，因此，我们把输入输出统称为Input&#x2F;Output，或者简写为IO。</p><p><code>input()</code>和<code>print()</code>是在命令行下面最基本的输入和输出。我们可以用一个变量记录用户的输出，就像上图一样：<code>name=input(&quot;请输入你的名字&quot;)</code>，还可以给用户提示文本。</p><h3 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h3><p>因为笔者是主学的JavaScript，所以在记录基础知识时，会不受控制的和JavaScript进行对比，这样可以加深对两个语言的理解程度，希望你们喜欢：</p><ul><li>和js的&#x2F;&#x2F;代表注释不同，python使用#当注释</li><li>js大部分时候使用的是{}来表示代码块，而python使用缩进来表示，我们约定俗成的使用<strong>4个空格</strong>的缩进</li><li>python也是大小写敏感</li><li>Python允许在数字中间以<code>_</code>分隔</li><li>和js一样可以在字符串中使用转义字符<code>\</code>来标识特殊的字符，比如双引号中展示双引号，比如换行<code>\n</code></li><li>用<code>\n</code>写在一行里不好阅读，为了简化，Python允许用<code>&#39;&#39;&#39;...&#39;&#39;&#39;</code>的格式表示多行内容</li><li>在Python中，可以直接用<code>True</code>、<code>False</code>表示布尔值（请注意大小写）,布尔值可以用<code>and</code>、<code>or</code>和<code>not</code>运算，这就和js中的&amp;&amp;、||、！的一样</li><li>Python 中的按位运算符与 JavaScript 中的一样，包括按位与 <code>&amp;</code>、按位或 <code>|</code>、按位异或 <code>^</code>、按位取反 <code>~</code>，以及左移 <code>&lt;&lt;</code> 和右移 <code>&gt;&gt;</code> 运算符。</li><li>空值是Python里一个特殊的值，用<code>None</code>表示</li><li>变量名必须是大小写英文、数字和<code>_</code>的组合，且不能用数字开头</li><li>和js一样变量名必须是大小写英文、数字和<code>_</code>的组合，且不能用数字开头，但不用像js一样需要用var、let、const进行声明，如果想表示常量的话，用全部大写的变量名表示常量，当然它本质还是变量</li><li>和js一样，python也是<code>动态语言</code>，与之对应的是<code>静态语言</code>，静态语言在定义变量时必须指定变量类型，如果赋值的时候类型不匹配，就会报错，而动态语言则不需要指定类型。</li><li>虽然js和python<code>/</code>都表示除，但是python无论结果是不是整数，都会返回浮点数，如1&#x2F;1 &#x3D;&gt; 1.0，要想返回整数的话可以使用地板除<code>//</code>，只取结果的整数部分。余数运算和js一样是<code>%</code></li><li>注意Python的整数没有大小限制，Python的浮点数也没有大小限制，但是超出一定范围就直接表示为<code>inf</code>（无限大）</li></ul><p>留一个问题，python中的and运算符和or运算符有和js中&amp;&amp;和||的短路效果吗？<span class="hide-inline"><button type="button" class="hide-button" style="background-color: #FF7242;color: #fff">查看答案  </button><span class="hide-content">是的</span></span></p><h3 id="编码和字符集"><a href="#编码和字符集" class="headerlink" title="编码和字符集"></a>编码和字符集</h3><p>老生常谈的话题了，计算机是看不懂字符串的，只能处理数字，要想让它可以处理字符串，我们需要给他一个映射表，规定这个字符对应的二进制是多少，规定<code>A</code>对应的二进制为<code>01000001</code>，这样计算机就知道该如何处理A了。</p><p>一个字节是8位，有256种组合，然后第一个编码表将大小写英文字母、数字和一些符号等127个字符给记录进去了，也就是<code>ASCII</code>编码表。但是那么多国家都有各自的语言，只靠这ASCII肯定是不够的，于是我国出了<code>GB2312</code>编码，日本出了<code>Shift_JIS</code>编码，就导致在多语言混合的文本中，显示出来会有乱码。</p><p>因此，Unicode字符集应运而生。Unicode把所有语言都统一到一套编码里，形成一个统一的<strong>标准</strong>。Unicode字符集只是标准并不是实现，它的实现有UTF-8、UTF-16、UTF-32等，它们使用不同的字节序列来表示Unicode字符集中的字符，但最常用的是UCS-16编码，用两个字节表示一个字符（如果要用到非常偏僻的字符，就需要4个字节）。现代操作系统和大多数编程语言都直接支持Unicode。</p><p><code>UTF-16</code>是用两个字节表示一个字符，在全英文的情况下，只是比<code>ASCII</code>多补8个0而已，这很不划算，所以又出现了可变长度的<code>UTF-8</code>编码。UTF-8编码把一个Unicode字符根据不同的数字大小编码成1-6个字节，常用的英文字母被编码成1个字节，汉字通常是3个字节，只有很生僻的字符才会被编码成4-6个字节。大大滴节省空间。</p><p>UTF-8编码有一个额外的好处，就是ASCII编码实际上可以被看成是UTF-8编码的一部分，所以，大量只支持ASCII编码的历史遗留软件可以在UTF-8编码下继续工作。</p><p>搞清楚了ASCII、Unicode和UTF-8的关系，我们就可以总结一下现在计算机系统通用的字符编码工作方式：</p><ul><li>在许多编程语言和操作系统中，字符串通常使用Unicode编码来表示字符。当程序在内存中操作字符串时，会将字符按照Unicode编码的方式存储在内存中。</li><li>UTF-8是一种针对Unicode设计的变长编码方案，在存储到硬盘或进行传输时常常会将Unicode字符转换为UTF-8编码。</li><li>当使用记事本或其他文本编辑器打开一个文件时，编辑器会将文件中的字节流按照指定的编码方式（例如UTF-8）解析为Unicode字符，然后在内存中进行编辑操作。编辑完成后，编辑器会将内存中的Unicode字符再次编码为指定的编码方式（例如UTF-8）并写回到文件中。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/pengpen1/blog-images/20240315102149.png"></p><p>在浏览网页时，服务器会把以UTF-8编码(大部情况)进行存储的index.html以及其他文件传输给浏览器，浏览器接收到服务器传输的内容后，会根据HTTP响应头中指定的字符集编码来解析内容，如：<code>Content-Type: text/html; charset=UTF-8</code>。对于动态生成的内容为如下步骤：</p><ul><li>服务器生成内容的编码：当服务器生成动态内容时，通常会以Unicode编码形式来表示字符，无论是从数据库、文件还是其他数据源中获取数据，都会以Unicode编码形式处理。</li><li>传输到浏览器的编码：在将动态生成的内容传输到浏览器时，服务器会根据HTTP响应的头部信息（如<code>Content-Type</code>）指定字符集编码。如果字符集编码设置为UTF-8，那么服务器会将Unicode内容转换为UTF-8编码，并将带有UTF-8编码的内容传输给浏览器。</li><li>浏览器接收和解析内容：浏览器接收到服务器传输的内容后，会根据HTTP响应头中指定的字符集编码来解析内容。如果字符集编码为UTF-8，浏览器会将接收到的UTF-8编码的内容解码为Unicode字符，并在页面中渲染显示。</li></ul><p>所以你看到很多网页的源码上会有类似<code>&lt;meta charset=&quot;UTF-8&quot; /&gt;</code>的信息，表示该网页正是用的UTF-8编码。</p><p><strong>Python中的字符串</strong></p><p>在最新的Python 3版本中，字符串是以Unicode编码的，也就是说，Python的字符串支持多语言的。Python不同于js，js是中的字符串（String）类型是基于Unicode字符的，而Python除了基于Unicode的字符串，还有一种特殊的字符串-<strong>字节字符串（bytes string）</strong>。也就是在字符串前面加上<code>b</code>的字符串，来看看它们的的区别和相同点吧：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="string">b&quot;ABC&quot;</span></span><br><span class="line">y = <span class="string">&quot;ABC&quot;</span></span><br><span class="line"><span class="comment"># str前加b，变为以字节为单位的bytes</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;像不像js的模板字符串<span class="subst">&#123;x&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><ol><li><strong>编码方式：</strong><ul><li>字节字符串（bytes）是以字节的形式存储数据，不涉及字符编码。</li><li>字符串（str）是以Unicode字符的形式存储数据，需要使用字符编码（如UTF-8）来进行存储和解码。</li></ul></li><li><strong>不可变性：</strong><ul><li>字节字符串（bytes）是不可变的，一旦创建就无法修改。</li><li>字符串（str）也是不可变的，一旦创建就无法修改。</li></ul></li><li><strong>适用场景：</strong><ul><li>字节字符串（bytes）通常用于处理二进制数据，如图像、音频、网络数据等。</li><li>字符串（str）则用于处理文本数据，如文档、配置文件、用户输入等。</li></ul></li><li><strong>字面值表示：</strong><ul><li>字节字符串（bytes）使用<code>b&quot;...&quot;</code>的形式表示，其中<code>...</code>是字节数据的字面值。</li><li>字符串（str）使用<code>&quot;...&quot;</code>或<code>&#39;...&#39;</code>的形式表示，其中<code>...</code>是文本数据的字面值。</li></ul></li></ol><p>字节字符串是一种特殊类型的字符串，它以字节的形式存储数据，而不是Unicode字符。这意味着字节字符串中的每个字符都由<strong>一个字节</strong>表示，而不是多个字节。所以中文是不能<strong>直接</strong>作为字节字符串的哦，会报错并提示你，字节字符串文字中不允许使用非 ASCII 字符。注意这里说的是直接使用，因为 Python 解释器无法确定如何编码这些字符。如果想要在字节字符串中包含非 ASCII 字符，可以使用转义序列或者将字符串编码为字节序列的方式来处理。</p><p>相关方法：</p><p>encode() 指定编码格式编码字符串</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;中文&#x27;</span>.encode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"><span class="comment"># output:  b&#x27;\xe4\xb8\xad\xe6\x96\x87&#x27;</span></span><br></pre></td></tr></table></figure><p>decode()  指定编码格式解码字符串</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">str</span> = <span class="string">&quot;this is string example....wow!!!&quot;</span>;</span><br><span class="line"><span class="built_in">str</span> = <span class="built_in">str</span>.encode(<span class="string">&#x27;base64&#x27;</span>,<span class="string">&#x27;strict&#x27;</span>);</span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span> <span class="string">&quot;Encoded String: &quot;</span> + <span class="built_in">str</span>;</span><br><span class="line"><span class="built_in">print</span> <span class="string">&quot;Decoded String: &quot;</span> + <span class="built_in">str</span>.decode(<span class="string">&#x27;base64&#x27;</span>,<span class="string">&#x27;strict&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># output:</span></span><br><span class="line">Encoded String: dGhpcyBpcyBzdHJpbmcgZXhhbXBsZS4uLi53b3chISE=</span><br><span class="line">Decoded String: this <span class="keyword">is</span> string example....wow!!!</span><br></pre></td></tr></table></figure><p>更多字符串方法可以参考<a href="https://peps.python.org/pep-0100/#unicode-methods-attributes">官网</a>、<a href="https://www.runoob.com/python/python-strings.html">Python 字符串 | 菜鸟教程 </a>。</p><h3 id="疑问解答"><a href="#疑问解答" class="headerlink" title="疑问解答"></a>疑问解答</h3><p><strong>1.计算机中内存、进程、线程各是什么？</strong></p><p>先说结论：内存是临时存储程序及其数据的地方，进程是操作系统中的一个执行实例，操作系统通过进程管理来确保多个程序能够并发执行，并且有效地利用计算机资源。而线程则是进程中的执行单元，它们共同协作以实现程序的运行。</p><ol><li><strong>内存（RAM）：</strong> 内存是计算机用于临时存储数据和程序的地方。它是一种易失性存储设备，这意味着当计算机关闭或断电时，存储在内存中的数据都会丢失。内存的主要目的是为了提供对数据的快速访问，因此相比于硬盘等存储设备，内存的读写速度要快得多。</li><li><strong>进程：</strong> 进程是操作系统中的一个执行实例。当你启动一个程序时，操作系统会创建一个相应的进程来运行该程序。每个进程都拥有独立的内存空间，包括代码、数据、堆栈等。进程之间通常是相互隔离的，一个进程的数据不会直接影响到另一个进程。每个进程都有自己的资源分配和管理，包括内存、文件句柄等。</li><li><strong>线程：</strong> 线程是进程中的一个执行单元。一个进程可以包含多个线程，这些线程共享进程的资源，如内存空间和文件句柄等。不同于进程，线程之间共享同一份内存空间，因此线程间的通信和数据共享更为方便。线程的创建和切换相对于进程来说开销较小，因此多线程编程常用于提高程序的并发性和性能。</li></ol><p>在一个程序运行时，操作系统会为其创建一个进程，并在该进程内创建一个或多个线程，这些线程负责执行不同的任务。这些任务所需的数据会被加载到内存中，然后由对应的线程执行。当程序结束时，操作系统会释放进程及其所占用的内存空间，这些数据也会从内存中清除。</p><p><strong>2.我在vscode中删除文件夹怎么有时候可以成功有时候不能呢？</strong></p><p>猜测是因为文件句柄被持有而导致的，你尝试删除项目中的一个文件夹，但是该文件夹中的某些文件正在被VS Code或其他程序使用，操作系统会阻止你删除这个文件夹，因为文件句柄还在被持有，只有在关闭VS Code或其他使用文件句柄的程序后，文件句柄才会被释放，你才能成功删除文件夹。那什么又是文件句柄呢？请往下看。</p><p>文件句柄（File Handle）是操作系统用于跟踪文件的抽象概念。在计算机系统中，文件句柄是一种标识符或引用，用于表示打开的文件。当应用程序需要读取或写入文件时，它首先要求操作系统打开该文件，并获得一个文件句柄。这个文件句柄允许应用程序对文件进行操作，如读取、写入、关闭等。</p><p>文件句柄包含了有关文件的一些重要信息，比如文件位置、文件权限、缓冲区信息等。它是应用程序与操作系统之间的接口，使得应用程序可以通过文件句柄来访问和操作文件，而不必关心文件在物理存储设备上的具体位置和细节。</p><p>在操作系统中，每个进程都有一张文件句柄表（File Descriptor Table），用于跟踪该进程打开的所有文件。当进程打开一个文件时，操作系统会为该文件分配一个文件句柄，并将该文件句柄添加到进程的文件句柄表中。当文件不再需要时，进程可以通过关闭文件句柄来释放相关资源。</p><p>文件句柄的使用使得操作系统可以更有效地管理文件资源，并且提供了一种抽象的方式来处理文件操作，使得应用程序更易于编写和维护。</p><p><strong>3.js中没有字节字符串，那有类似作用的替代品吗？</strong></p><p>js虽然没有字节字符串，但是提供了<code>TypedArray</code>和<code>ArrayBuffer这</code>两种类型，可以用于处理字节数据，与字节字符串有一定的相似性。</p><ul><li>ArrayBuffer是一种特殊的对象，用于表示通用的、固定长度的原始二进制数据缓冲区。它是一种低级别的对象，不直接操作数据，而是通过TypedArray或DataView来访问和操作数据。ArrayBuffer通常用于创建和传递二进制数据缓冲区，而TypedArray用于对这些缓冲区进行具体的数据操作。</li><li>TypedArray是JavaScript中的一组特定类型的数组，用于表示和操作二进制数据。它们允许直接操作内存中的原始二进制数据，而不需要通过复制或解释为字符串来访问。TypedArray包括以下几种类型：Int8Array（8 位带符号整数， -128 到 127）、Uint8Array（8 位无符号整数，0到255）、Int16Array（16 位带符号整数，-32768 到 32767）、Uint16Array（16 位无符号整数，0到65535）、Int32Array、Uint32Array（0到4294967295）、Float32Array（ 32 位浮点数）、Float64Array等，分别用于表示不同类型的二进制数据。</li></ul><p>上栗子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> buffer = <span class="keyword">new</span> <span class="title class_">ArrayBuffer</span>(<span class="number">5</span>);</span><br><span class="line"><span class="keyword">var</span> bytes = <span class="keyword">new</span> <span class="title class_">Uint8Array</span>(buffer);</span><br><span class="line"><span class="comment">// Uint8Array是一种特定类型的TypedArray，用于表示和操作包含8位无符号整数的二进制数据。</span></span><br><span class="line"></span><br><span class="line">bytes.<span class="title function_">set</span>([<span class="number">65</span>, <span class="number">66</span>, <span class="number">67</span>, <span class="number">1</span>, <span class="number">255</span>]);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">String</span>.<span class="property">fromCharCode</span>.<span class="title function_">apply</span>(<span class="literal">null</span>, bytes)); <span class="comment">//output:ABC╔ÿ</span></span><br></pre></td></tr></table></figure><p>上面的代码中，我们先是创建了一个固定长度为5个字节的ArrayBuffer对象。这个对象在内存中分配了一个连续的、固定大小的内存空间，用于存储二进制数据，通过创建一个Uint8Array对象来引用这个ArrayBuffer，以便操作二进制数据，最后，使用 <code>set()</code> 方法将包含数值的数组 <code>[65, 66, 67, 1, 255]</code> 复制到 Uint8Array 对象 <code>bytes</code> 中。这里的数值分别是 ASCII 字符 ‘A’, ‘B’, ‘C’ ,’╔’,’ÿ’的编码值，因为 Uint8Array 是按字节存储数据的，所以这里每个数组元素对应一个字节，依次填充了 ArrayBuffer 中的前五个字节，所以缓冲区中的内容现在是 <code>[65, 66, 67, 1, 255]</code>，分别对应字符 ‘A’, ‘B’, ‘C’,’╔’,’ÿ。</p><p>需要注意的是8 位无符号整数刚好对应<code>ASCII编码</code>,如果超出这个范围，比如 889，js会取其模256的结果，即889 % 256 &#x3D; 121，所以最终写入的值是121，对应的ASCII字符是’y’。</p><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ul><li><a href="https://www.liaoxuefeng.com/wiki/1016959663602400/1017063826246112">廖雪峰&#x2F;python教程</a></li><li><a href="https://www.runoob.com/python/python-strings.html">Python 字符串 | 菜鸟教程 (runoob.com)</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>爬虫学习笔记(二)</title>
      <link href="/2024/03/13/python-%E7%88%AC%E8%99%AB%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(%E4%BA%8C)/"/>
      <url>/2024/03/13/python-%E7%88%AC%E8%99%AB%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(%E4%BA%8C)/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p><strong>概要：</strong>在这篇记录中，我们将安装Python以及写出第一个python程序。</p><h3 id="安装python"><a href="#安装python" class="headerlink" title="安装python"></a>安装python</h3><p>笔者安装的是3.12.2版本的Python，[download](<a href="https://www.python.org/downloads/release/python-3122/">Python Release Python 3.12.2 | Python.org</a>)，下拉到最后Files，我是windows系统所以选择的<a href="https://www.python.org/ftp/python/3.12.2/python-3.12.2-amd64.exe">Windows installer (64-bit)</a>，大家按照自己的需要下载就好，记得在安装时需要勾选<code>Add Python 3.5 to PATH</code>哦，这是将Python解释器的安装路径添加到系统的环境变量中。（环境变量是操作系统中用来指示系统在执行命令时查找程序文件的路径之一。添加Python到PATH中使得你可以在命令行或者终端中直接通过输入“python”命令来调用Python解释器，而不需要输入完整的Python安装路径。这样做有助于方便地在命令行中使用Python。）</p><p>另外Python解释器不是只有官方的这一种，CPython（用C语言开发的），还有IPython、Jython、PyPy等等。这些解释器可以帮助我们运行以<code>.py</code>为扩展名的文本文件。</p><p>Python是解释型语言，需要翻译成CPU能理解的机器码，才能运行。</p><h3 id="交互环境"><a href="#交互环境" class="headerlink" title="交互环境"></a>交互环境</h3><p>在命令行，敲入python，如果出现&gt;&gt;&gt;，说明你安装成功了，我们已经在python交互环境中了，输入任何Python代码，回车后会立刻得到执行结果。输入<code>exit()</code>并回车，就可以退出Python交互式环境（直接关掉命令行窗口也可以）。</p><p><img src="https://cdn.jsdelivr.net/gh/pengpen1/blog-images/20240312173847.png"></p><p>来输入我们的经典程序吧：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;hello, world&#x27;</span>)</span><br></pre></td></tr></table></figure><p>到这里就先停手了，学习一门语言，不能光记语法，而是要先思考这个语言解决了什么问题？它能带给你什么帮助？之后再去一步步学习</p><p>荷兰的计算机程序员吉多·范罗苏姆（Guido Van Rossum）创建了 Python。他于 1989 年在荷兰国家数学与计算机科学研究中心 (CWI) 开启了 Python 之旅，最初只是为在圣诞节期间能保持依旧忙碌的业余爱好。语言的名字受 BBC 电视剧《巨蟒剧团之飞翔的马戏团》的启发，因为吉多·范罗苏姆是该剧的忠实粉丝。 </p><ul><li>1991 年发布了首版 Python 代码（版本 0.9.0）。其已包括一些优秀功能，例如一些用于错误处理的数据类型和函数。 </li><li>Python 1.0 于 1994 年发布，提供轻松处理数据列表的新函数，例如映射、筛选和减少。</li><li>Python 2.0 于 2000 年 10 月 16 日发布，为程序员提供新的有用功能，例如支持 Unicode 字符和以较短方式遍历列表。</li><li>Python 3.0 于 2008 年 12 月 3 日发布。其包括更多功能，例如打印函数，为数字除法和错误处理提供更多支持。</li></ul><p>Python语法简洁清晰，易于学习和理解且跨平台，拥有丰富的标准库和第三方库，可以在数据科学和机器学习、软件开发、软件测试自动化自动化（<strong>Python 单元测试框架例如 Unittest、Robot 和 PyUnit，测试其编写的函数；可以使用多种工具自动运行测试脚本。这些工具称为持续集成&#x2F;持续部署 (CI&#x2F;CD) 工具。软件测试人员和开发人员使用 CI&#x2F;CD 工具（例如 Travis CI 和 Jenkins）自动化测试</strong>）等方面提供巨大的助力。</p><h3 id="编译过程"><a href="#编译过程" class="headerlink" title="编译过程"></a>编译过程</h3><p> 在具体计算机上实现一种语言，首先要确定的是表示该语言语义解释的虚拟计算机，一个关键的问题是程序执行时的基本表示是实际计算机上的机器语言还是虚拟机的机器语言。这个问题决定了语言的实现。根据这个问题的回答，可以将程序设计语言划分为两大类：编译型语言和解释型语言。</p><ul><li>编译实现的语言，如：C、C++、Fortran、Pascal、Ada。由编译型语言编写的源程序需要经过编译,汇编和链接才能输出目标代码，然后由机器执行目标代码。目标代码是有机器指令组成，不能独立运行，因为源程序中可能使用了一些汇编程序不能解释引用的库函数，而库函数又不在源程序中，此时还需要链接程序完成外部引用和目标模板调用的链接任务，最后才能输出可执行代码。</li><li>解释型语言，解释器不产生目标机器代码，而是产生中间代码，这种中间代码与机器代码不同，中间代码的解释是由软件支持的，不能直接使用在硬件上。该软件解释器通常会导致执行效率较低，用解释型语言编写的程序是由另一个可以理解中间代码的解释程序执行的。和编译的程序不同的是, 解释程序的任务是逐一将源代码的语句解释成可执行的机器指令，不需要将源程序翻译成目标代码再执行。对于解释型语言，需要一个专门的解释器来执行该程序，每条语句只有在执行是才能被翻译，这种解释型语言每执行一次就翻译一次，因而效率低下。</li></ul><p>Python就是一门解释型语言，和我们熟知的JavaScript一样，都需要先将源代码转换成中间表示形式（字节码或），然后执行这些中间表示形式来完成程序的功能。但不同的是，Python的字节码是在运行时即时生成的，而JavaScript的字节码（如果是基于V8引擎的话）通常是预先编译好的。现在我们来看看，编译模型和具体的编译流程：</p><p><img src="https://cdn.jsdelivr.net/gh/pengpen1/blog-images/20240313151206.png"></p><p>处理器主要由三部分组成: 编译器(Compiler)，运行时(Runtime)，库(Lib)。</p><ul><li>编译器(Compiler): 顾名思义，就是编译源码的程序。通常情况下，它会将源码编译成运行时(Runtime)识别的中间码，但是在极端情况下，如 C 中，因为没有运行时(Runtime)，就直接输出机器码了。编译器(Compiler)在这过程中可能还会自己对源码进行优化，并剔除一些运行不必要的信息，比如注释等。</li><li>运行时程序(Runtime): 这个程序用于代码的具体执行，最被熟知的是 JVM，所以也可以把它叫做虚拟机好了，Python中对应的虚拟机就是CPython、PyPy、Jython等。</li><li>库(Lib): 库很好理解，就好比一个词典，运行这个程序所需要的一些额外支持。最基础的，标准库应该包含基本的 IO 库，如 <code>stdio.h</code>，还有平台所提供的系统调用等等。</li></ul><p>下面是完整的编译过程</p><ol><li>将源代码进行词法分析和语法分析，将代码分解为标记（tokens）并形成抽象语法树(Abstract Syntax Tree)</li><li>将抽象语法树转换为字节码(bytecode) </li><li>将字节码(bytecode) 发送给虚拟机，虚拟机将字节码翻译成机器码并在CPU上执行</li></ol><p>字节码是相对于机器码的存在。机器码是 CPU 能读懂的机器指令，所有指令都包含在一个指令集里面，那字节码就是虚拟机能理解的指令。</p><p>虚拟机不是KVM，VMware 虚拟机，指的是在软件层面模拟了 CPU 执行逻辑的程序。用于解析程序指令。</p><h3 id="疑问解答"><a href="#疑问解答" class="headerlink" title="疑问解答"></a>疑问解答</h3><p><strong>1.Python和JavaScript有什么不同呢？</strong></p><ol><li><strong>用途</strong>：<ul><li>Python通常用于后端开发（如Web开发、数据分析、人工智能等）、科学计算、系统管理等领域。</li><li>JavaScript则主要用于前端开发，用于网页交互、动态内容生成、浏览器扩展等，但也可以在后端使用Node.js进行服务器端开发。</li></ul></li><li><strong>语法</strong>：<ul><li>Python采用了缩进来表示代码块的结构，而JavaScript使用花括号{}。</li><li>Python更加强调代码的可读性和简洁性，语法相对简单直观。</li><li>JavaScript的语法更加灵活，支持面向对象、函数式编程等多种编程范式。</li></ul></li><li><strong>类型系统</strong>：<ul><li>Python是动态类型语言，变量的类型在运行时根据赋值确定，并且支持强类型和弱类型的混合。</li><li>JavaScript也是动态类型语言，但有时会表现出一些隐式类型转换的特性，使得一些类型判断相对复杂。</li></ul></li><li><strong>并发模型</strong>：<ul><li>Python的并发模型主要是基于多线程和多进程，但由于GIL（全局解释器锁）的存在，多线程并发性能有限。</li><li>JavaScript的并发模型主要基于事件驱动和回调函数，通过异步编程来实现并发，也支持Promise和async&#x2F;await等新的语言特性来简化异步编程。</li></ul></li><li><strong>生态系统</strong>：<ul><li>Python拥有丰富的第三方库和框架，如Django、Flask、NumPy、Pandas等，适用于各种不同的应用场景。</li><li>JavaScript的生态系统也非常庞大，特别是在前端开发领域，有很多优秀的框架和工具，如React、Vue.js、Angular等。</li></ul></li></ol><p><strong>2.有推荐的Python插件吗？</strong></p><p>笔者用的vscdoe，目前安装了下面几个插件</p><p>美化插件：Black Formatter</p><p>debug插件：Python Debugger</p><p>语法提示插件：Python</p><p>静态检查插件：Pylance</p><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><p><a href="https://00kai0.github.io/cpy-compile-and-runtime/">Python 从源码到执行</a></p><p><a href="https://blog.csdn.net/helloxiaozhe/article/details/78104975">python编译过程和执行原理</a></p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>五一骑行计划</title>
      <link href="/2024/03/11/%E5%85%B6%E4%BB%96-%E4%BA%94%E4%B8%80%E9%AA%91%E8%A1%8C%E8%AE%A1%E5%88%92/"/>
      <url>/2024/03/11/%E5%85%B6%E4%BB%96-%E4%BA%94%E4%B8%80%E9%AA%91%E8%A1%8C%E8%AE%A1%E5%88%92/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p><strong>概要：</strong> 2024.5.1~2024.5.7，目的地康定，时间7天，包含来回，预计花费1500元。</p><h3 id="day1-成都到雅安-130km"><a href="#day1-成都到雅安-130km" class="headerlink" title="day1-成都到雅安-130km"></a><strong>day1-成都到雅安-130km</strong></h3><ul><li><p>出发时间：早上7.30点</p></li><li><p>路线：光华馨庭-&gt;成温邛崃快速通道-&gt;邛崃前进旅馆(午饭，60km)-&gt;雅安宜欧酒店(130km)</p></li><li><p>注意点：雅安海拔在580~600m左右，按我平均状态来算，下午4点即可到达</p></li><li><p>景点：待补充</p></li></ul><h3 id="day2-雅安到新沟村-91km"><a href="#day2-雅安到新沟村-91km" class="headerlink" title="day2-雅安到新沟村-91km"></a><strong>day2-雅安到新沟村-91km</strong></h3><ul><li>出发时间：早上7.30点</li><li>路线：雅安-&gt;天全川味坊(午饭，40km，海拔778m)-&gt;紫石乡(午饭，62km，海拔988 m)-&gt;新沟村(91km，海拔1410 m)</li><li>注意点：从紫石乡那开始上强度了，坡度开始增加，临近新沟村最后10km全是爬坡，注意安全，预估下午4点即可到达</li><li>风景：待补充</li></ul><h3 id="day3-新沟村到康定-98km"><a href="#day3-新沟村到康定-98km" class="headerlink" title="day3-新沟村到康定-98km"></a><strong>day3-新沟村到康定-98km</strong></h3><ul><li>出发时间：早上7.30点</li><li>路线：新沟村-&gt;二郎山隧道(18km，海拔2200m)-&gt;二郎山观景台(25km，海拔2263 m)-&gt;泸定(午饭，52km，海拔1321 m)-&gt;康定(98km,海拔2560km)</li><li>注意点：迎来第一座山，二郎山，少年去山顶呐喊吧。</li><li>风景：遥望贡嘎雪山</li></ul><h3 id="day4-自由玩耍一天"><a href="#day4-自由玩耍一天" class="headerlink" title="day4-自由玩耍一天"></a>day4-自由玩耍一天</h3><ul><li>注意点：可能会去离康定16km的折多塘去看看吧，或者逛一下康定市</li></ul><h3 id="day5-康定到新沟村-104km"><a href="#day5-康定到新沟村-104km" class="headerlink" title="day5-康定到新沟村-104km"></a>day5-康定到新沟村-104km</h3><ul><li>出发时间：早上8点</li><li>路线：待补充</li><li>注意点：注意下坡捏刹车啊</li></ul><h3 id="day6-新沟村到雅安-91km"><a href="#day6-新沟村到雅安-91km" class="headerlink" title="day6-新沟村到雅安-91km"></a>day6-新沟村到雅安-91km</h3><ul><li>出发时间：早上8点</li><li>路线：待补充</li><li>注意点：待补充</li></ul><h3 id="day7-雅安到光华馨庭-130km"><a href="#day7-雅安到光华馨庭-130km" class="headerlink" title="day7-雅安到光华馨庭-130km"></a>day7-雅安到光华馨庭-130km</h3><ul><li>出发时间：早上8点</li><li>路线：待补充</li><li>注意点：待补充</li></ul>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>爬虫学习笔记(一)</title>
      <link href="/2024/03/05/python-%E7%88%AC%E8%99%AB%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(%E4%B8%80)/"/>
      <url>/2024/03/05/python-%E7%88%AC%E8%99%AB%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(%E4%B8%80)/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p><strong>概要：</strong>在这篇记录中，我们将初识爬虫。</p><h3 id="什么是爬虫"><a href="#什么是爬虫" class="headerlink" title="什么是爬虫"></a>什么是爬虫</h3><p>爬虫是一个自动化程序，可以帮我们从一个个网页上获取我们想要的数据。</p><p><strong>爬虫工作原理：</strong></p><p>爬虫会模拟请求，用一些 Http 库向指定的服务器发送请求，再添加一些header信息假装自己是浏览器，拿到返回的数据后我们就要根据数据类型进行处理，有html、json、image等等类型，最后在将处理好的数据存储起来。</p><h3 id="安装抓包工具"><a href="#安装抓包工具" class="headerlink" title="安装抓包工具"></a>安装抓包工具</h3><p>安装一下免费软件<a href="https://www.telerik.com/download/fiddler">Fiddler</a>，Fiddler 是以代理web服务器的形式工作的，它使用代理地址:127.0.0.1，端口:8888。</p><p>Fiddler功能强大，可以拦截向服务器发送或服务器返回的请求，允许我们篡改数据，你对HTTP协议越了解，使用fiddler就会更得心应手，而越使用fiddler，你对HTTP协议的理解就越深，相辅相成。</p><h3 id="Fiddler功能介绍"><a href="#Fiddler功能介绍" class="headerlink" title="Fiddler功能介绍"></a>Fiddler功能介绍</h3><p><strong>菜单栏(右上角)</strong></p><p><img src="https://cdn.jsdelivr.net/gh/pengpen1/blog-images/20240308150944.png"></p><p>File菜单</p><p>　　1、CaptureTraffic：可以控制是否把Fiddler注册为系统代理。</p><p>　　2、NewViewer：打开一个新的fiddler窗口</p><p>　　3、LoadArchive：用于重新加载之前捕获的以SAZ文件格式保存的数据包。</p><p>　　4、Save：支持以多种方式把数据包保存到文件中。</p><p>　　5、ImportSessions…：支持导入从其他工具捕获的数据包，也支持导入以其他格式存储的数据包。</p><p>　　6、ExportSessions…：把Fiddler捕捉到的回话以多种文件格式保存。</p><p>　　7、Exit：取消把Fiddler注册为系统代理，并关闭Fiddler。</p><p>Edit菜单</p><p>　　1、Copy：复制会话。</p><p>　　2、Remove：删除会话。</p><p>　　3、SelectAll：选择所有会话。</p><p>　　4、Undelete：撤销删除会话。</p><p>　　5、PasteasSession把剪贴板上的内容粘贴成一个或多个模拟的会话。</p><p>　　6、Mark：选择一种颜色标记选中会话。</p><p>　　7、UnlockforEditing解锁会话。</p><p>　　8、FindSession…打开FindSession窗口，搜索捕获到的数据包。</p><p>Rules菜单</p><p>　　1、HideImageRequest：隐藏图片回话。</p><p>　　2、HideCONNECTS：隐藏连接通道回话。</p><p>　　3、AutomaticBreakpoints：自动在[请求前]或[响应后]设置断点。IgnoreImage触发器控制这些断点是否作用于图片请求。</p><p>　　4、CustomizeRules…：打开Fiddler脚本编辑窗口。</p><p>　　5、RequireProxyAuthentication：，要求客户端安装证书。该规则可以用于测试HTTP客户端，确保所有未提交Proxy-Authorization请求头的请求会返回HTTP&#x2F;407响应码。</p><p>　　6、ApplyGZIPEncoding：只要请求包含具有gzip标识的Accept-Encoding请求头，就会对所有响应使用GZIPHTTP进行压缩（图片请求除外）。</p><p>　　7、RemoveAllEncoding：删除所有请求和响应的HTTP内容编码和传输编码</p><p>　　8、Hide304s：隐藏响应为HTTP&#x2F;304NotModified状态的所有回话。</p><p>　　9、RequestJapaneseContent：选项会把所有请求的Accept-Encoding请求头设置或替换为ja标识，表示客户端希望响应以日语形式发送。</p><p>　　10、User-Agents：把所有请求的User-Agent请求头设置或替换成指定值。</p><p>　　11、performance：模拟弱网测试速度。</p><p>Tools菜单</p><p>　　1、Options…：打开Fiddler选项窗口。</p><p>　　2、WinINETOptions…打开IE的Internet属性窗口</p><p>　　3、ClearWinINETCache：清空IE和其他应用中所使用的WinINET缓存中的所有文件。4、ClearWinINETCookies：清空IE和其他应用中所发送的WinINETCookie</p><p>　　5、TextWizard…：选项会启动TextWizard窗口，对文本进行编码和解码。</p><p>　　6、CompareSession：比较回话。</p><p>　　7、ResetScript：重置Fiddler脚本。</p><p>　　8、Sandbox：打开<a href="http://webdbg.com/sandbox/">http://webdbg.com/sandbox/</a></p><p>　　9、ViewIECache:打开IE缓存窗口。</p><p><strong>工具栏(菜单栏下面)</strong></p><p><img src="https://cdn.jsdelivr.net/gh/pengpen1/blog-images/20240308150237.png"></p><ol><li>windows解除AppContainer的限制的设置</li><li>备注功能</li><li>重新发送请求，快捷键：R键。</li><li>删除请求</li><li>当有请求杯断点时，点击去发送请求。</li><li>流模式。(默认是缓冲模式)</li><li>解码</li><li>保持回话的数量。</li><li>选择你想要抓包或者监听的程序</li><li>查找</li><li>保存所有会话，文件名以.saz为扩展名</li><li>截图</li><li>计时器</li><li>快捷的打开IE浏览器</li><li>清除IE缓存</li><li>文本的编码解码工具</li><li>分离面板</li><li>MSDN查询</li><li>本机的信息</li></ol><p><strong>状态栏(左下角)</strong></p><p><img src="https://cdn.jsdelivr.net/gh/pengpen1/blog-images/20240308145736.png"></p><p>1、显示的Fiddler是否处于捕捉状态(开启&#x2F;关闭状态),可以点击该区域切换。</p><p>2、显示当前捕捉哪些进程。</p><p>　　AllProcesses捕获所有进程的请求</p><p>　　WebBrowsers?捕获Web浏览器的请求，应该特指IE</p><p>　　Non-Browser?捕获非Web浏览器的请求</p><p>　　HideAll???隐藏所有请求</p><p>3、显示当前断点设置状态，通过鼠标点击切换。有三种：</p><p>　　不设置断点</p><p>　　所有请求在断点处被暂停</p><p>　　所有响应在断点处被暂停</p><p>4，显示当前共捕获了多少回话(如：300，表示共捕获了300个会话，如：10&#x2F;300，表示当前选择10个会话，共捕获300个会话)。</p><p>5，第五区块，描述当前状态。</p><p>　　如果是刚打开Fiddler，会显示什么时间加载了CustomRules.js；如果选择了一个会话，会显示该会话的URL；如果在命令行输入一个命令，就会显示命令相关信息。</p><p><strong>标签页(右侧，菜单栏下面)</strong></p><p>Statistics统计页签，可以查看传输的字节数，消耗时间等等。</p><p>inspectors检查页签，可以查看具体的请求和响应报文，上为请求，下为响应。</p><p>AutoResponse自动响应页签，可以定义规则，监听指定请求，返回指定数据，比如你可以监听<a href="https://www.baidu.com/">百度网址</a>，然后返回你本地的一个图片。</p><p>composer构建页签，支持手动构建和发送请求，还可以从web session列表中拖曳session， 把它放到composer选项卡中以克隆该请求， 点击Execute按钮， 把请求发送到服务端。</p><p>Filters过滤页签，使用过滤Filters对左侧的数据流列表进行过滤， 可以标记、 修改或隐藏某些特征的数据流。</p><p><img src="https://cdn.jsdelivr.net/gh/pengpen1/blog-images/20240307162635.png"></p><p>Hide if url contains用的挺多的，除了输入字符串，还可以输入正则，比如<code>REGEX:(?insx)/[^\?/]*\.(css|ico|jpg|png|gif|bmp|wav)(\?.*)?$</code>，REGEX: 表示启用正则表达式(?insx) 设置正则解释的规则，忽略大小写等。此表达式表示过滤掉 url 中包括 css、ico、jpg 等后缀的请求。</p><p>Timeline时间轴页签，可以选择左侧会话中的一个或多个(按CTRL)，便会以图表形式显示指定内容从服务端传输到客户端的时间。</p><p><strong>快捷键</strong></p><p>按住<strong>ALT+F11</strong>拦截所有的返回，按住<strong>F11</strong>拦截所有请求，按住<strong>Ctrl+x</strong> 清屏。</p><p><strong>命令行</strong></p><p>Fiddler的左下角有一个命令行工具叫做QuickExec,允许你直接输入命令。常见命令：</p><p><strong>help</strong> ： 打开官方的使用页面介绍， 所有的命令都会列出来</p><p><strong>cls</strong> ： 清屏 (Ctrl+x 也可以清屏)</p><p><strong>select</strong> ： 选择会话的命令， 选择所有相应类型select image、select css、select html</p><p><strong>?sometext</strong> ： 查找字符串并高亮显示查找到的会话列表的条目，？<a href="https://link.zhihu.com/?target=http://qq.com">http://qq.com</a></p><p><strong>&gt;size</strong> : 选择请求响应大小小于size字节的会话</p><p><strong>&#x3D;status&#x2F;&#x3D;method&#x2F;@host</strong>:查找状态、方法、主机相对应的session会话，&#x3D;504，&#x3D;get，@<a href="https://link.zhihu.com/?target=http://www.qq.com">http://www.qq.com</a></p><p><strong>quit</strong>：退出fiddler</p><p>Bpafter，Bps, bpv, bpm, bpu这几个命令主要用于批量设置断点</p><p>Bpafter xxx: 中断 URL 包含指定字符的全部 session 响应</p><p>Bps xxx:中断 HTTP 响应状态为指定字符的全部 session 响应。</p><p>Bpv xxx:中断指定请求方式的全部 session 响应</p><p>Bpm xxx:中断指定请求方式的全部 session 响应，等同于bpv xxx</p><p>Bpu xxx:与bpafter类似。</p><h3 id="HTTP简单介绍"><a href="#HTTP简单介绍" class="headerlink" title="HTTP简单介绍"></a>HTTP简单介绍</h3><p>HTTP协议，支持客户&#x2F;服务器模式。简单快速，无连接（也可以持久性连接，在单个TCP连接上发送多个HTTP请求），无状态。</p><p>HTTP协议：默认端口：80</p><p>HTTPS协议：HTTP协议+SSL安全传输协议：默认端口443</p><h3 id="HTTP协议请求详解"><a href="#HTTP协议请求详解" class="headerlink" title="HTTP协议请求详解"></a>HTTP协议请求详解</h3><p>请求行：包括请求方法、请求的URL以及HTTP协议版本，例如：GET &#x2F;index.html HTTP&#x2F;1.1。</p><p>请求头：</p><ul><li><p>Accept 指定客户端能够接收的内容类型</p></li><li><p>Accept-Charset 浏览器可以接受的字符编码集。</p></li><li><p>Accept-Encoding 指定浏览器可以支持的web服务器返回内容压缩编码类型。</p></li><li><p>Accept-Language 浏览器可接受的语言</p></li><li><p>Cookie HTTP请求发送时，会把保存在该请求域名下的所有cookie值一起发送给web服务器。</p></li><li><p>Content-Length 请求的内容长度</p></li><li><p>Content-Type 请求的与实体对应的MIME信息</p></li><li><p>Date 请求发送的日期和时间</p></li><li><p>Host 指定请求的服务器的域名和端口号</p></li><li><p>Referer 先前网页的地址，当前请求网页紧随其后,即来路</p></li><li><p>User-Agent 发出请求的用户信息</p></li><li><p>Cache-Contro  用于控制缓存行为</p></li><li><p>Connection 用于指定连接的管理方式，如是否保持连接</p></li><li><p>Pragma  向服务器传递指令，通常用于缓存控制</p></li></ul><p>空一行</p><p>请求正文：对于一些HTTP请求，可能会包含请求正文，例如在POST请求中发送的表单数据就包含在请求正文中</p><h3 id="疑问解答"><a href="#疑问解答" class="headerlink" title="疑问解答"></a>疑问解答</h3><p>1.每次进入为什么有这个弹窗？</p><p><img src="https://cdn.jsdelivr.net/gh/pengpen1/blog-images/1709693791141.png"></p><p>上面这个说的是，windows用了一个AppContainer的技术，可能干扰部分应用和Edg浏览器的流量捕获，你可以使用左上角的WinConfig解除这个限制，问你需要了解更多不，选cancel的话就不会在出现这个弹框。</p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自定义路径复制脚本</title>
      <link href="/2024/03/01/%E5%85%B6%E4%BB%96-%E8%87%AA%E5%AE%9A%E4%B9%89%E8%B7%AF%E5%BE%84%E5%A4%8D%E5%88%B6%E8%84%9A%E6%9C%AC/"/>
      <url>/2024/03/01/%E5%85%B6%E4%BB%96-%E8%87%AA%E5%AE%9A%E4%B9%89%E8%B7%AF%E5%BE%84%E5%A4%8D%E5%88%B6%E8%84%9A%E6%9C%AC/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p><strong>概要：</strong>在这篇记录中，我们将探讨如何用node.js写个自定义复制脚本，主要作用就是，用命令行输入指定文件或文件夹路径，然后输入复制后重新命名的名字，即可在指定文件或文件夹的同级目录下复制一个相同的文件或文件夹，并且文件命名为用户传进去的名字。</p><h3 id="单个文件或文件夹"><a href="#单个文件或文件夹" class="headerlink" title="单个文件或文件夹"></a>单个文件或文件夹</h3><p>先简单介绍一下，等下要用到的两个node.js模块：fs（文件系统内置模块），path（处理文件路径的内置模块）</p><ul><li>path.resolve  <strong>路径解析函数，用于将路径解析为绝对路径：</strong>1.不带参数，返回的是当前的文件的绝对路径     2.带不是&#x2F;开头的参数返回的是当前绝对路径拼接现在的参数   3.带.&#x2F;开头的参数同2   4.带&#x2F;开头的参数则是绝对路径（其他：<code>__dirname</code> 总是指向被执行 js 文件的绝对路径）</li><li>path.join   <strong>用于连接路径</strong> （其他：该方法会正确使用当前系统的路径分隔符，Unix系统是”&#x2F;“，Windows系统是”\“。）</li><li>fs.existsSync  <strong>检测给定路径是否存在，同步</strong> （其他：fs 模块中的方法均有异步和同步版本，异步的方法函数最后一个参数为回调函数，同步版的则没有回调函数但是会阻塞后续代码的执行）</li><li>process.argv   <strong>Node.js 中的一个全局对象，包含了命令行参数的数组：</strong>1.第一个参数 <code>process.argv[0]</code> 是 Node.js 运行时的可执行文件路径 2.第二个参数是当前执行的脚本文件的路径 3.后面的参数是用户在命令行中输入的参数</li><li>fs.mkdirSync   <strong>创建目录，同步</strong></li><li>fs.readdirSync   <strong>读取目录的内容，同步</strong></li><li>fs.copyFileSync   <strong>复制文件，同步</strong></li></ul><p>ok，来开始编写第一版脚本吧</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">copyFileOrFolder</span>(<span class="params">source, destination, newName</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> sourcePath = path.<span class="title function_">resolve</span>(source);</span><br><span class="line">  <span class="keyword">const</span> destinationPath = path.<span class="title function_">resolve</span>(destination, newName);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 检查源路径是否存在</span></span><br><span class="line">  <span class="keyword">if</span> (!fs.<span class="title function_">existsSync</span>(sourcePath)) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&quot;源文件或文件夹不存在。&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 检查目标路径是否已经存在</span></span><br><span class="line">  <span class="keyword">if</span> (fs.<span class="title function_">existsSync</span>(destinationPath)) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&quot;目标文件或文件夹已经存在。&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 如果源是文件夹，则递归复制整个文件夹</span></span><br><span class="line">  <span class="keyword">const</span> isDirectory = fs.<span class="title function_">lstatSync</span>(sourcePath).<span class="title function_">isDirectory</span>();</span><br><span class="line">  <span class="keyword">if</span> (isDirectory) &#123;</span><br><span class="line">    <span class="comment">// 创建目录</span></span><br><span class="line">    fs.<span class="title function_">mkdirSync</span>(destinationPath);</span><br><span class="line">    <span class="keyword">const</span> files = fs.<span class="title function_">readdirSync</span>(sourcePath);</span><br><span class="line">    <span class="comment">// console.log(files); // 文件名，带后缀的</span></span><br><span class="line">    files.<span class="title function_">forEach</span>(<span class="function">(<span class="params">file</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> newSource = path.<span class="title function_">join</span>(sourcePath, file);</span><br><span class="line">      <span class="title function_">copyFileOrFolder</span>(newSource, destinationPath, file);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 如果源是文件，则直接复制文件</span></span><br><span class="line">    fs.<span class="title function_">copyFileSync</span>(sourcePath, destinationPath);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(</span><br><span class="line">    <span class="string">`成功复制一个<span class="subst">$&#123;</span></span></span><br><span class="line"><span class="subst"><span class="string">      isDirectory === <span class="literal">true</span> ? <span class="string">&quot;文件夹&quot;</span> : <span class="string">&quot;文件&quot;</span></span></span></span><br><span class="line"><span class="subst"><span class="string">    &#125;</span>：<span class="subst">$&#123;source&#125;</span>--&gt;<span class="subst">$&#123;newName&#125;</span>`</span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从命令行参数获取输入</span></span><br><span class="line"><span class="keyword">const</span> [, , source, newName] = process.<span class="property">argv</span>;</span><br><span class="line"><span class="comment">// console.log(process.argv);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 指定目标文件夹为源文件的同级目录</span></span><br><span class="line"><span class="keyword">const</span> destination = path.<span class="title function_">dirname</span>(source);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 执行复制操作</span></span><br><span class="line"><span class="title function_">copyFileOrFolder</span>(source, destination, newName);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>基本都有注释，就不一行一行解释了，说一下这一版的思路吧：首先我们得获取用户输入的文件（或文件夹）地址以及复制后的文件（或文件夹）命名，然后获取该地址的同级目录为目标文件夹，最后进行复制操作：1.检查源路径和目标路径是否存在 2.如果源是文件则直接复制，是文件夹则递归复制。</p><p>用法展示：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node copyPageToSpecifyPath.js xxx.js customName.js</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/pengpen1/blog-images/20240229111501.png"></p><p>要注意的是，如果是文件，记得带后缀哦！</p><h3 id="配置路径"><a href="#配置路径" class="headerlink" title="配置路径"></a>配置路径</h3><p>上面的脚本我们是针对单个文件或者文件夹进行的，但是在实际开发中，我们不能想复制一个就执行一下，也是浪费时间的，于是我们的2.0脚本要实现的就是，可以通过配置来批量复制</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 默认模板</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">TEMPLATE</span> = [</span><br><span class="line">  <span class="string">&quot;../src/components/views/PIMSZdsz/AssetSystem&quot;</span>,</span><br><span class="line">  <span class="string">&quot;../src/services/views/PIMSZdsz/AssetSystem&quot;</span>,</span><br><span class="line">  <span class="string">&quot;../src/views/views/PIMSZdsz/AssetSystem&quot;</span>,</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过模板进行复制，新命名，是否开启文本替换（正则匹配，包含命名以及里面的内容）,文本替换目标</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">copyToTemplate</span>(<span class="params">newName, isTextReplace, replaceTarget</span>) &#123;</span><br><span class="line">  <span class="comment">// 默认替换目标为模板最后一个文件夹名字</span></span><br><span class="line">  <span class="keyword">if</span> (isTextReplace &amp;&amp; !replaceTarget) &#123;</span><br><span class="line">    replaceTarget = <span class="variable constant_">TEMPLATE</span>[<span class="number">0</span>]?.<span class="title function_">split</span>(<span class="string">&quot;/&quot;</span>)?.<span class="title function_">pop</span>();</span><br><span class="line">    <span class="keyword">if</span> (!replaceTarget) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&quot;未指定替换目标&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;开始复制：&quot;</span>, newName, isTextReplace, replaceTarget);</span><br><span class="line">  <span class="comment">// 遍历模板数组，复制每个模板到目标路径</span></span><br><span class="line">  <span class="variable constant_">TEMPLATE</span>.<span class="title function_">forEach</span>(<span class="function">(<span class="params">template</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> sourcePath = path.<span class="title function_">resolve</span>(__dirname, template);</span><br><span class="line">    <span class="keyword">const</span> destinationPath = path.<span class="title function_">resolve</span>(__dirname, newName);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 检查源路径是否存在</span></span><br><span class="line">    <span class="keyword">if</span> (!fs.<span class="title function_">existsSync</span>(sourcePath)) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">`模板文件或文件夹不存在：<span class="subst">$&#123;template&#125;</span>`</span>);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 检查目标路径是否已经存在</span></span><br><span class="line">    <span class="keyword">if</span> (fs.<span class="title function_">existsSync</span>(destinationPath)) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">`目标文件或文件夹已经存在：<span class="subst">$&#123;destinationPath&#125;</span>`</span>);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果源是文件夹，则递归复制整个文件夹</span></span><br><span class="line">    <span class="keyword">const</span> isDirectory = fs.<span class="title function_">lstatSync</span>(sourcePath).<span class="title function_">isDirectory</span>();</span><br><span class="line">    <span class="keyword">if</span> (isDirectory) &#123;</span><br><span class="line">      fs.<span class="title function_">mkdirSync</span>(destinationPath);</span><br><span class="line">      <span class="keyword">const</span> files = fs.<span class="title function_">readdirSync</span>(sourcePath);</span><br><span class="line">      files.<span class="title function_">forEach</span>(<span class="function">(<span class="params">file</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> newSource = path.<span class="title function_">join</span>(sourcePath, file);</span><br><span class="line">        <span class="title function_">copyFileOrFolder</span>(newSource, destinationPath, file);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 如果源是文件，则直接复制文件</span></span><br><span class="line">      fs.<span class="title function_">copyFileSync</span>(sourcePath, destinationPath);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(</span><br><span class="line">      <span class="string">`成功复制一个<span class="subst">$&#123;</span></span></span><br><span class="line"><span class="subst"><span class="string">        isDirectory ? <span class="string">&quot;文件夹&quot;</span> : <span class="string">&quot;文件&quot;</span></span></span></span><br><span class="line"><span class="subst"><span class="string">      &#125;</span>：<span class="subst">$&#123;template&#125;</span> --&gt; <span class="subst">$&#123;newName&#125;</span>`</span></span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果需要进行文本替换</span></span><br><span class="line">    <span class="comment">// if (isTextReplace) &#123;</span></span><br><span class="line">    <span class="comment">//   // 读取目标文件的内容</span></span><br><span class="line">    <span class="comment">//   let fileContent = fs.readFileSync(destinationPath, &quot;utf8&quot;);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//   // 使用正则替换目标内容</span></span><br><span class="line">    <span class="comment">//   fileContent = fileContent.replace(replaceTarget, newName);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//   // 将替换后的内容写入文件</span></span><br><span class="line">    <span class="comment">//   fs.writeFileSync(destinationPath, fileContent, &quot;utf8&quot;);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//   console.log(`成功替换文件内容：$&#123;replaceTarget&#125; --&gt; $&#123;newName&#125;`);</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这里就没有用命令行解析库，手搓吧</span></span><br><span class="line"><span class="keyword">const</span> parameterMap = &#123;</span><br><span class="line">  <span class="attr">isUseTemplate</span>: <span class="literal">null</span>,</span><br><span class="line">  <span class="attr">source</span>: <span class="literal">null</span>,</span><br><span class="line">  <span class="attr">newName</span>: <span class="literal">null</span>,</span><br><span class="line">  <span class="attr">isTextReplace</span>: <span class="literal">null</span>,</span><br><span class="line">  <span class="attr">replaceTarget</span>: <span class="literal">null</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 先确认是否使用模板</span></span><br><span class="line">parameterMap.<span class="property">isUseTemplate</span> = <span class="title class_">Boolean</span>(</span><br><span class="line">  process.<span class="property">argv</span></span><br><span class="line">    .<span class="title function_">slice</span>(<span class="number">2</span>)</span><br><span class="line">    .<span class="title function_">find</span>(</span><br><span class="line">      <span class="function">(<span class="params">val</span>) =&gt;</span> val.<span class="title function_">toLowerCase</span>() === <span class="string">&quot;--t&quot;</span> || val.<span class="title function_">toLowerCase</span>() === <span class="string">&quot;--template&quot;</span></span><br><span class="line">    )</span><br><span class="line">);</span><br><span class="line"><span class="comment">// 再获取命令行参数，3种途径</span></span><br><span class="line">process.<span class="property">argv</span>.<span class="title function_">slice</span>(<span class="number">2</span>).<span class="title function_">forEach</span>(<span class="function">(<span class="params">val, index</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 1.缩写参数 暂不实现</span></span><br><span class="line">  <span class="comment">// if (val.toLowerCase() === &quot;--r&quot; || val.toLowerCase() === &quot;--replace&quot;) &#123;</span></span><br><span class="line">  <span class="comment">//   parameterMap.isTextReplace = true;</span></span><br><span class="line">  <span class="comment">// &#125;</span></span><br><span class="line">  <span class="keyword">if</span> (val.<span class="title function_">includes</span>(<span class="string">&quot;=&quot;</span>)) &#123;</span><br><span class="line">    <span class="comment">// 2.key=value 类型参数</span></span><br><span class="line">    <span class="keyword">const</span> [key, value] = val.<span class="title function_">split</span>(<span class="string">&quot;=&quot;</span>);</span><br><span class="line">    parameterMap[key] = value;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (index &lt; <span class="number">3</span>) &#123;</span><br><span class="line">    <span class="comment">// 3.按顺序获取</span></span><br><span class="line">    <span class="keyword">if</span> (parameterMap.<span class="property">isUseTemplate</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (index === <span class="number">0</span>) &#123;</span><br><span class="line">        parameterMap.<span class="property">newName</span> = val;</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (index === <span class="number">1</span> &amp;&amp; !val.<span class="title function_">includes</span>(<span class="string">&quot;--&quot;</span>)) &#123;</span><br><span class="line">        parameterMap.<span class="property">isTextReplace</span> = val;</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (index === <span class="number">2</span> &amp;&amp; !val.<span class="title function_">includes</span>(<span class="string">&quot;--&quot;</span>)) &#123;</span><br><span class="line">        parameterMap.<span class="property">replaceTarget</span> = val;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (index === <span class="number">0</span>) &#123;</span><br><span class="line">        parameterMap.<span class="property">source</span> = val;</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (index === <span class="number">1</span> &amp;&amp; !val.<span class="title function_">includes</span>(<span class="string">&quot;--&quot;</span>)) &#123;</span><br><span class="line">        parameterMap.<span class="property">newName</span> = val;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(parameterMap);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (parameterMap.<span class="property">isUseTemplate</span>) &#123;</span><br><span class="line">  <span class="title function_">copyToTemplate</span>(</span><br><span class="line">    parameterMap.<span class="property">newName</span>,</span><br><span class="line">    parameterMap.<span class="property">isTextReplace</span> === <span class="literal">null</span> ? <span class="literal">true</span> : parameterMap.<span class="property">isTextReplace</span>,</span><br><span class="line">    parameterMap.<span class="property">replaceTarget</span></span><br><span class="line">  );</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="comment">// 指定目标文件夹为源文件的同级目录</span></span><br><span class="line">  <span class="keyword">const</span> destination = path.<span class="title function_">dirname</span>(parameterMap.<span class="property">source</span>);</span><br><span class="line">  <span class="title function_">copyFileOrFolder</span>(parameterMap.<span class="property">source</span>, destination, parameterMap.<span class="property">newName</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以先不用看关于解析命令行那的代码，我们先聚焦于copyToTemplate函数，我思路就是对模板里的路径进行forEach，挨个进行复制，是不是很简单。然后我信心满满的输入下面的命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node ./scripts/copyPageToSpecifyPath.js Test --t</span><br></pre></td></tr></table></figure><p>嘿，报错了，目标文件或文件夹已经存在，原来是我在获取目标路径<code>const destinationPath = path.resolve(__dirname, newName);</code>时，没有将路径搞对，导致文件直接复制到脚本旁边了。</p><h3 id="最终脚本"><a href="#最终脚本" class="headerlink" title="最终脚本"></a>最终脚本</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 本脚本主要针对模板路径所在文件的同一层级为目的地址进行复制，使用方法如下：(加--t就是使用模板)</span></span><br><span class="line"><span class="comment">// 1.只是复制单个文件或文件夹：node ./scripts/copyPageToSpecifyPath.js ../src/components/views/PIMSZdsz/AssetSystem/index.js test.js</span></span><br><span class="line"><span class="comment">// 2.只是复制模板路径中的文件：node ./scripts/copyPageToSpecifyPath.js Test --t</span></span><br><span class="line"><span class="comment">// 3.复制并替换模板路径中文件的内容：node ./scripts/copyPageToSpecifyPath.js Test true --t</span></span><br><span class="line"><span class="comment">// 注：在使用模板的前提下第二个参数为true就是进行替换内容，需要的话可以在第3，第4参数配置替换目标和替换值，默认是模板中最后的文件名以及新文件名</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 默认模板</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">TEMPLATE</span> = [</span><br><span class="line">  <span class="string">&quot;../src/components/views/PIMSZdsz/AssetSystem&quot;</span>,</span><br><span class="line">  <span class="string">&quot;../src/services/views/PIMSZdsz/AssetSystem&quot;</span>,</span><br><span class="line">  <span class="string">&quot;../src/views/PIMSZdsz/AssetSystem&quot;</span>,</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 单个文件或者文件夹复制，源路径，目的文件夹，新命名</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">copyFileOrFolder</span>(<span class="params"></span></span><br><span class="line"><span class="params">  source,</span></span><br><span class="line"><span class="params">  destination,</span></span><br><span class="line"><span class="params">  newName,</span></span><br><span class="line"><span class="params">  isTextReplace = <span class="literal">false</span>,</span></span><br><span class="line"><span class="params">  replaceTarget,</span></span><br><span class="line"><span class="params">  replaceValue</span></span><br><span class="line"><span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (isTextReplace &amp;&amp; !replaceTarget) &#123;</span><br><span class="line">    replaceTarget = source.<span class="title function_">split</span>(<span class="string">&quot;/&quot;</span>)?.<span class="title function_">pop</span>();</span><br><span class="line">    replaceValue = replaceValue ?? newName;</span><br><span class="line">    <span class="keyword">if</span> (!replaceTarget) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&quot;未指定替换目标&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> sourcePath = path.<span class="title function_">resolve</span>(__dirname, source);</span><br><span class="line">  <span class="keyword">const</span> destinationPath = path.<span class="title function_">resolve</span>(__dirname, destination, newName);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 检查源路径是否存在</span></span><br><span class="line">  <span class="keyword">if</span> (!fs.<span class="title function_">existsSync</span>(sourcePath)) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&quot;copyFileOrFolder:源文件或文件夹不存在。&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 检查目标路径是否已经存在</span></span><br><span class="line">  <span class="keyword">if</span> (fs.<span class="title function_">existsSync</span>(destinationPath)) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&quot;copyFileOrFolder:目标文件或文件夹已经存在。&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 如果源是文件夹，则递归复制整个文件夹</span></span><br><span class="line">  <span class="keyword">const</span> isDirectory = fs.<span class="title function_">lstatSync</span>(sourcePath).<span class="title function_">isDirectory</span>();</span><br><span class="line">  <span class="keyword">if</span> (isDirectory) &#123;</span><br><span class="line">    <span class="comment">// 创建目录</span></span><br><span class="line">    fs.<span class="title function_">mkdirSync</span>(destinationPath);</span><br><span class="line">    <span class="keyword">const</span> files = fs.<span class="title function_">readdirSync</span>(sourcePath);</span><br><span class="line">    <span class="comment">// console.log(files); // 文件名，带后缀的</span></span><br><span class="line">    files.<span class="title function_">forEach</span>(<span class="function">(<span class="params">file</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> newSource = path.<span class="title function_">join</span>(sourcePath, file);</span><br><span class="line">      <span class="keyword">let</span> newFileName = file;</span><br><span class="line">      <span class="keyword">if</span> (isTextReplace) &#123;</span><br><span class="line">        newFileName = file.<span class="title function_">replaceAll</span>(replaceTarget, replaceValue);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="title function_">copyFileOrFolder</span>(</span><br><span class="line">        newSource,</span><br><span class="line">        destinationPath,</span><br><span class="line">        newFileName,</span><br><span class="line">        isTextReplace,</span><br><span class="line">        replaceTarget,</span><br><span class="line">        replaceValue</span><br><span class="line">      );</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 如果源是文件，则直接复制文件</span></span><br><span class="line">    fs.<span class="title function_">copyFileSync</span>(sourcePath, destinationPath);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果需要进行文本替换</span></span><br><span class="line">    <span class="keyword">if</span> (isTextReplace) &#123;</span><br><span class="line">      <span class="comment">// 读取目标文件的内容</span></span><br><span class="line">      <span class="keyword">let</span> fileContent = fs.<span class="title function_">readFileSync</span>(destinationPath, <span class="string">&quot;utf8&quot;</span>);</span><br><span class="line">      fileContent = fileContent.<span class="title function_">replaceAll</span>(replaceTarget, replaceValue);</span><br><span class="line">      <span class="comment">// 将替换后的内容写入文件</span></span><br><span class="line">      fs.<span class="title function_">writeFileSync</span>(destinationPath, fileContent, <span class="string">&quot;utf8&quot;</span>);</span><br><span class="line"></span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(</span><br><span class="line">        <span class="string">`copyFileOrFolder成功替换文件内容：<span class="subst">$&#123;replaceTarget&#125;</span> --&gt; <span class="subst">$&#123;replaceValue&#125;</span>`</span></span><br><span class="line">      );</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(</span><br><span class="line">    <span class="string">`copyFileOrFolder成功复制一个<span class="subst">$&#123;</span></span></span><br><span class="line"><span class="subst"><span class="string">      isDirectory === <span class="literal">true</span> ? <span class="string">&quot;文件夹&quot;</span> : <span class="string">&quot;文件&quot;</span></span></span></span><br><span class="line"><span class="subst"><span class="string">    &#125;</span>：<span class="subst">$&#123;source&#125;</span>--&gt;<span class="subst">$&#123;newName&#125;</span>`</span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过模板进行复制，新命名，是否开启文本替换（正则匹配，包含命名以及里面的内容）,文本替换目标</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">copyToTemplate</span>(<span class="params">newName, isTextReplace, replaceTarget, replaceValue</span>) &#123;</span><br><span class="line">  <span class="comment">// 默认替换目标为模板最后一个文件夹名字</span></span><br><span class="line">  <span class="keyword">if</span> (isTextReplace &amp;&amp; !replaceTarget) &#123;</span><br><span class="line">    replaceTarget = <span class="variable constant_">TEMPLATE</span>[<span class="number">0</span>]?.<span class="title function_">split</span>(<span class="string">&quot;/&quot;</span>)?.<span class="title function_">pop</span>();</span><br><span class="line">    replaceValue = replaceValue ?? newName;</span><br><span class="line">    <span class="keyword">if</span> (!replaceTarget) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&quot;未指定替换目标&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(</span><br><span class="line">    <span class="string">&quot;copyToTemplate开始复制：&quot;</span>,</span><br><span class="line">    newName,</span><br><span class="line">    isTextReplace,</span><br><span class="line">    replaceTarget</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 遍历模板数组，复制每个模板到目标路径</span></span><br><span class="line">  <span class="keyword">let</span> result = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="variable constant_">TEMPLATE</span>.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">const</span> template = <span class="variable constant_">TEMPLATE</span>[i];</span><br><span class="line">    <span class="keyword">const</span> sourcePath = path.<span class="title function_">resolve</span>(__dirname, template);</span><br><span class="line">    <span class="keyword">const</span> destinationPath = path.<span class="title function_">resolve</span>(</span><br><span class="line">      __dirname,</span><br><span class="line">      <span class="variable constant_">TEMPLATE</span>[i]?.<span class="title function_">split</span>(<span class="string">&quot;/&quot;</span>)?.<span class="title function_">slice</span>(<span class="number">0</span>, -<span class="number">1</span>).<span class="title function_">join</span>(<span class="string">&quot;/&quot;</span>),</span><br><span class="line">      newName</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 检查源路径是否存在</span></span><br><span class="line">    <span class="keyword">if</span> (!fs.<span class="title function_">existsSync</span>(sourcePath)) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">`copyToTemplate:模板文件或文件夹不存在：<span class="subst">$&#123;template&#125;</span>`</span>);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 检查目标路径是否已经存在</span></span><br><span class="line">    <span class="keyword">if</span> (fs.<span class="title function_">existsSync</span>(destinationPath)) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">error</span>(</span><br><span class="line">        <span class="string">`copyToTemplate:目标文件或文件夹已经存在：<span class="subst">$&#123;destinationPath&#125;</span>`</span></span><br><span class="line">      );</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果源是文件夹，则递归复制整个文件夹</span></span><br><span class="line">    <span class="keyword">const</span> isDirectory = fs.<span class="title function_">lstatSync</span>(sourcePath).<span class="title function_">isDirectory</span>();</span><br><span class="line">    <span class="keyword">if</span> (isDirectory) &#123;</span><br><span class="line">      fs.<span class="title function_">mkdirSync</span>(destinationPath);</span><br><span class="line">      <span class="keyword">const</span> files = fs.<span class="title function_">readdirSync</span>(sourcePath);</span><br><span class="line">      files.<span class="title function_">forEach</span>(<span class="function">(<span class="params">file</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> newSource = path.<span class="title function_">join</span>(sourcePath, file);</span><br><span class="line">        <span class="keyword">let</span> newFileName = file;</span><br><span class="line">        <span class="keyword">if</span> (isTextReplace) &#123;</span><br><span class="line">          newFileName = file.<span class="title function_">replaceAll</span>(replaceTarget, replaceValue);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title function_">copyFileOrFolder</span>(</span><br><span class="line">          newSource,</span><br><span class="line">          destinationPath,</span><br><span class="line">          newFileName,</span><br><span class="line">          isTextReplace,</span><br><span class="line">          replaceTarget,</span><br><span class="line">          replaceValue</span><br><span class="line">        );</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 如果源是文件，则直接复制文件</span></span><br><span class="line">      fs.<span class="title function_">copyFileSync</span>(sourcePath, destinationPath);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 如果需要进行文本替换</span></span><br><span class="line">      <span class="keyword">if</span> (isTextReplace) &#123;</span><br><span class="line">        <span class="comment">// 读取目标文件的内容</span></span><br><span class="line">        <span class="keyword">let</span> fileContent = fs.<span class="title function_">readFileSync</span>(destinationPath, <span class="string">&quot;utf8&quot;</span>);</span><br><span class="line">        fileContent = fileContent.<span class="title function_">replaceAll</span>(replaceTarget, replaceValue);</span><br><span class="line">        <span class="comment">// 将替换后的内容写入文件</span></span><br><span class="line">        fs.<span class="title function_">writeFileSync</span>(destinationPath, fileContent, <span class="string">&quot;utf8&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(</span><br><span class="line">          <span class="string">`copyToTemplate成功替换文件内容：<span class="subst">$&#123;replaceTarget&#125;</span> --&gt; <span class="subst">$&#123;replaceValue&#125;</span>`</span></span><br><span class="line">        );</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(</span><br><span class="line">      <span class="string">`copyToTemplate成功复制一个<span class="subst">$&#123;</span></span></span><br><span class="line"><span class="subst"><span class="string">        isDirectory ? <span class="string">&quot;文件夹&quot;</span> : <span class="string">&quot;文件&quot;</span></span></span></span><br><span class="line"><span class="subst"><span class="string">      &#125;</span>：<span class="subst">$&#123;template&#125;</span> --&gt; <span class="subst">$&#123;newName&#125;</span>`</span></span><br><span class="line">    );</span><br><span class="line">    result++;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (result === <span class="variable constant_">TEMPLATE</span>.<span class="property">length</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;copyToTemplate:------------全部复制完成!------------&quot;</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(</span><br><span class="line">      <span class="string">`copyToTemplate:---已复制<span class="subst">$&#123;result&#125;</span>条路径所对应的文件或文件夹，剩余<span class="subst">$&#123;</span></span></span><br><span class="line"><span class="subst"><span class="string">        TEMPLATE.length - result</span></span></span><br><span class="line"><span class="subst"><span class="string">      &#125;</span>条未复制-----`</span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这里就没有用命令行解析库，手搓吧</span></span><br><span class="line"><span class="keyword">const</span> parameterMap = &#123;</span><br><span class="line">  <span class="attr">isUseTemplate</span>: <span class="literal">null</span>,</span><br><span class="line">  <span class="attr">source</span>: <span class="literal">null</span>,</span><br><span class="line">  <span class="attr">newName</span>: <span class="literal">null</span>,</span><br><span class="line">  <span class="attr">isTextReplace</span>: <span class="literal">null</span>,</span><br><span class="line">  <span class="attr">replaceTarget</span>: <span class="literal">null</span>,</span><br><span class="line">  <span class="attr">replaceValue</span>: <span class="literal">null</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 先确认是否使用模板</span></span><br><span class="line">parameterMap.<span class="property">isUseTemplate</span> = <span class="title class_">Boolean</span>(</span><br><span class="line">  process.<span class="property">argv</span></span><br><span class="line">    .<span class="title function_">slice</span>(<span class="number">2</span>)</span><br><span class="line">    .<span class="title function_">find</span>(</span><br><span class="line">      <span class="function">(<span class="params">val</span>) =&gt;</span> val.<span class="title function_">toLowerCase</span>() === <span class="string">&quot;--t&quot;</span> || val.<span class="title function_">toLowerCase</span>() === <span class="string">&quot;--template&quot;</span></span><br><span class="line">    )</span><br><span class="line">);</span><br><span class="line"><span class="comment">// 再获取命令行参数，3种途径</span></span><br><span class="line">process.<span class="property">argv</span>.<span class="title function_">slice</span>(<span class="number">2</span>).<span class="title function_">forEach</span>(<span class="function">(<span class="params">val, index</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 1.缩写参数 暂不实现</span></span><br><span class="line">  <span class="comment">// if (val.toLowerCase() === &quot;--r&quot; || val.toLowerCase() === &quot;--replace&quot;) &#123;</span></span><br><span class="line">  <span class="comment">//   parameterMap.isTextReplace = true;</span></span><br><span class="line">  <span class="comment">// &#125;</span></span><br><span class="line">  <span class="keyword">if</span> (val.<span class="title function_">includes</span>(<span class="string">&quot;=&quot;</span>)) &#123;</span><br><span class="line">    <span class="comment">// 2.key=value 类型参数</span></span><br><span class="line">    <span class="keyword">const</span> [key, value] = val.<span class="title function_">split</span>(<span class="string">&quot;=&quot;</span>);</span><br><span class="line">    parameterMap[key] = value;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (index &lt; <span class="number">5</span>) &#123;</span><br><span class="line">    <span class="comment">// 3.按顺序获取</span></span><br><span class="line">    <span class="keyword">if</span> (parameterMap.<span class="property">isUseTemplate</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (index === <span class="number">0</span>) &#123;</span><br><span class="line">        parameterMap.<span class="property">newName</span> = val;</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (index === <span class="number">1</span> &amp;&amp; !val.<span class="title function_">includes</span>(<span class="string">&quot;--&quot;</span>)) &#123;</span><br><span class="line">        parameterMap.<span class="property">isTextReplace</span> = val;</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (index === <span class="number">2</span> &amp;&amp; !val.<span class="title function_">includes</span>(<span class="string">&quot;--&quot;</span>)) &#123;</span><br><span class="line">        parameterMap.<span class="property">replaceTarget</span> = val;</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (index === <span class="number">3</span> &amp;&amp; !val.<span class="title function_">includes</span>(<span class="string">&quot;--&quot;</span>)) &#123;</span><br><span class="line">        parameterMap.<span class="property">replaceValue</span> = val;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (index === <span class="number">0</span>) &#123;</span><br><span class="line">        parameterMap.<span class="property">source</span> = val;</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (index === <span class="number">1</span> &amp;&amp; !val.<span class="title function_">includes</span>(<span class="string">&quot;--&quot;</span>)) &#123;</span><br><span class="line">        parameterMap.<span class="property">newName</span> = val;</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (index === <span class="number">2</span> &amp;&amp; !val.<span class="title function_">includes</span>(<span class="string">&quot;--&quot;</span>)) &#123;</span><br><span class="line">        parameterMap.<span class="property">isTextReplace</span> = val;</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (index === <span class="number">3</span> &amp;&amp; !val.<span class="title function_">includes</span>(<span class="string">&quot;--&quot;</span>)) &#123;</span><br><span class="line">        parameterMap.<span class="property">replaceTarget</span> = val;</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (index === <span class="number">4</span> &amp;&amp; !val.<span class="title function_">includes</span>(<span class="string">&quot;--&quot;</span>)) &#123;</span><br><span class="line">        parameterMap.<span class="property">replaceValue</span> = val;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(parameterMap);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (parameterMap.<span class="property">isUseTemplate</span>) &#123;</span><br><span class="line">  <span class="title function_">copyToTemplate</span>(</span><br><span class="line">    parameterMap.<span class="property">newName</span>,</span><br><span class="line">    parameterMap.<span class="property">isTextReplace</span> === <span class="literal">null</span> ? <span class="literal">true</span> : parameterMap.<span class="property">isTextReplace</span>,</span><br><span class="line">    parameterMap.<span class="property">replaceTarget</span>,</span><br><span class="line">    parameterMap.<span class="property">replaceValue</span></span><br><span class="line">  );</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="comment">// 指定目标文件夹为源文件的同级目录</span></span><br><span class="line">  <span class="keyword">const</span> destination = path.<span class="title function_">dirname</span>(parameterMap.<span class="property">source</span>);</span><br><span class="line">  <span class="title function_">copyFileOrFolder</span>(</span><br><span class="line">    parameterMap.<span class="property">source</span>,</span><br><span class="line">    destination,</span><br><span class="line">    parameterMap.<span class="property">newName</span>,</span><br><span class="line">    parameterMap.<span class="property">isTextReplace</span> === <span class="literal">null</span> ? <span class="literal">true</span> : parameterMap.<span class="property">isTextReplace</span>,</span><br><span class="line">    parameterMap.<span class="property">replaceTarget</span>,</span><br><span class="line">    parameterMap.<span class="property">replaceValue</span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span>参数有点多，后续优化成options配置</span></span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span>当前是针对模板路径所在文件的同一层级进行复制的，后续增加指定复制路径的配置</span></span><br></pre></td></tr></table></figure><p>这个脚本还有很多可以优化的地方，比如if分支过多，比如两个函数体内有部分逻辑重复，甚至可以合并成一个函数，但是因为最近工作比较忙，就先这样，后续再优化吧。</p><h3 id="使用说明"><a href="#使用说明" class="headerlink" title="使用说明"></a>使用说明</h3><p>现在来说明一下如何使用，首先你得有<a href="https://nodejs.org/en">node.js</a>，然后确定脚本所放位置，是直接在项目根路径下还是放哪，比如我所做的项目是将脚本统一放到scripts下面</p><p><img src="https://cdn.jsdelivr.net/gh/pengpen1/blog-images/20240304145713.png"></p><p>然后选择想要的复制效果，接着用命令行传递参数并执行脚本文件：</p><p>1.只是复制单个文件或文件夹：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node ./scripts/copyPageToSpecifyPath.js ../src/components/views/PIMSZdsz/AssetSystem/index.js test.js</span><br></pre></td></tr></table></figure><p>2.只是复制模板路径中的文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node ./scripts/copyPageToSpecifyPath.js Test --t</span><br></pre></td></tr></table></figure><p>3.复制并替换模板路径中文件的内容：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node ./scripts/copyPageToSpecifyPath.js Test true --t</span><br></pre></td></tr></table></figure><p>其实也可以用参数&#x3D;值的形式，比如</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node ./scripts/copyPageToSpecifyPath.js newName=Test isTextReplace=true --t</span><br></pre></td></tr></table></figure><p>贴张效果图：</p><p><img src="https://cdn.jsdelivr.net/gh/pengpen1/blog-images/20240304150602.png"></p>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> node.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>盛最多水的容器</title>
      <link href="/2024/02/21/%E7%AE%97%E6%B3%95-%E7%9B%9B%E6%9C%80%E5%A4%9A%E6%B0%B4%E7%9A%84%E5%AE%B9%E5%99%A8/"/>
      <url>/2024/02/21/%E7%AE%97%E6%B3%95-%E7%9B%9B%E6%9C%80%E5%A4%9A%E6%B0%B4%E7%9A%84%E5%AE%B9%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p><strong>概要：</strong>给定一个长度为 <code>n</code> 的整数数组 <code>height</code> 。有 <code>n</code> 条垂线，第 <code>i</code> 条线的两个端点是 <code>(i, 0)</code> 和 <code>(i, height[i])</code> 。找出其中的两条线，使得它们与 <code>x</code> 轴共同构成的容器可以容纳最多的水。返回容器可以储存的最大水量</p><p><strong>示例：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [<span class="number">1</span>,<span class="number">8</span>,<span class="number">6</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">8</span>,<span class="number">3</span>,<span class="number">7</span>]</span><br><span class="line">输出：<span class="number">49</span></span><br><span class="line">解锁：由长度为<span class="number">8</span>的左边界和长度为<span class="number">7</span>的右边界构成的容器容量最大，(<span class="number">8</span>-<span class="number">1</span>)*<span class="title class_">Math</span>.<span class="title function_">min</span>(nums[<span class="number">8</span>], nums[<span class="number">1</span>])=<span class="number">49</span></span><br><span class="line"></span><br><span class="line">输入：height = [<span class="number">1</span>,<span class="number">1</span>]</span><br><span class="line">输出：<span class="number">1</span></span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>n == height.length</code></li><li><code>2 &lt;= n &lt;= 105</code></li><li><code>0 &lt;= height[i] &lt;= 104</code></li></ul><h3 id="心路历程"><a href="#心路历程" class="headerlink" title="心路历程"></a>心路历程</h3><p>看到这个题目，我第一时间想到的就是定义一个maxArea记录最大容量，然后遍历，再用一个指针固定指向left边界，另一个指针指向right边界并依次向后移动，找出left指针可以得到的最多容量，最终遍历完数组后得到的maxArea即为最终答案。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number[]</span>&#125; <span class="variable">height</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> maxArea = <span class="keyword">function</span> (<span class="params">height</span>) &#123;</span><br><span class="line">  <span class="comment">// 我的想法是遍历，用一个指针固定指向left边界，另一个指针指向right边界并依次向后移动，找出left指针可以得到的最多容量</span></span><br><span class="line">  <span class="keyword">let</span> maxArea = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; height.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = i + <span class="number">1</span>; j &lt; height.<span class="property">length</span>; j++) &#123;</span><br><span class="line">      <span class="comment">// 求最大容量</span></span><br><span class="line">      maxArea = <span class="title class_">Math</span>.<span class="title function_">max</span>(maxArea, <span class="title class_">Math</span>.<span class="title function_">min</span>(height[i], height[j]) * (j - i));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> maxArea;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>写好代码后，我兴高采烈的拿去运行，您猜怎么着，嘿，超时了。如果数组很大的话，双重遍历确实耗时太多了。好吧，这道题，我做不出来，投降看题解，学习下别人的思路。</p><p>首先别人是先假设出x,y两边，并得到最大值的计算公式，通过公式来推出影响最大值的因素以及变化规律，最后再写代码。这种解题思路值得学习。</p><p><img src="https://cdn.jsdelivr.net/gh/pengpen1/blog-images/20240221110824.png"></p><p>来看看这个二次元的桶，容量由两个因素决定，长*宽。假设，左边界的元素编号为x，右边界的元素编号为y，那么得到的容量公式就为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s(x,y) = Math.min(height[x], height[y]) * (y - x)</span><br></pre></td></tr></table></figure><p>也就是短边*长，现在我们来思考下，为什么我上面是用的双重for循环，是因为我没有一开始就固定其中一个变量，导致只能在循环中固定。如果x，y分别在数组的两端，那么此时长为最大值，此时影响容量的因素就只剩下短边了，那如果分别移动两条边会发生什么：</p><ul><li>如果将指向短边的指针向中心移动一位，此时长度会-1，下一个边可能会比之前的短边更长或更短，s的值可能会增大或者减小</li><li>如果将指向长边的指针向中心移动一位，此时长度会-1，下一个边无论比之前的长边更长或更短，s的值一定会减小，因为宽是取的短边的值</li></ul><p>如果两条边都一样长，无论移动哪一边，此时长度会-1，s的值一定会减小，所以无论移动哪一边都一样，最终得到的最大值都是对的，如果想不明白可以画图试试，如果中间有两个更长的边，那早晚为将指针移动到这个两个边上去，如果中间只有一个更长的或者没有更长的，那最大值还不是开始的那个值。也就是每轮向内移动短板，所有消去的状态都 <strong>不会导致面积最大值丢失</strong>，那让我们来看看代码吧</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> maxArea2 = <span class="keyword">function</span> (<span class="params">height</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (height.<span class="property">length</span> &lt; <span class="number">2</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">let</span> maxArea = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">let</span> right = height.<span class="property">length</span> - <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">let</span> left = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">    <span class="comment">// 计算出最大容量</span></span><br><span class="line">    maxArea = <span class="title class_">Math</span>.<span class="title function_">max</span>(</span><br><span class="line">      maxArea,</span><br><span class="line">      (right - left) * <span class="title class_">Math</span>.<span class="title function_">min</span>(height[left], height[right])</span><br><span class="line">    );</span><br><span class="line">    <span class="comment">// 向中间移动短边所在的指针</span></span><br><span class="line">    <span class="keyword">if</span>(height[left] &lt; height[right])&#123;</span><br><span class="line">      left++;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      <span class="comment">// 两边相等的话，移动哪条边都无所谓</span></span><br><span class="line">      right--;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> maxArea;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>简单来说就是从两端开始，向内收缩最短边。</p><h3 id="最终代码"><a href="#最终代码" class="headerlink" title="最终代码"></a>最终代码</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> maxArea = <span class="keyword">function</span> (<span class="params">height</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (height.<span class="property">length</span> &lt; <span class="number">2</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">let</span> maxArea = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">let</span> right = height.<span class="property">length</span> - <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">let</span> left = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">    <span class="comment">// 计算出最大容量</span></span><br><span class="line">    maxArea = <span class="title class_">Math</span>.<span class="title function_">max</span>(</span><br><span class="line">      maxArea,</span><br><span class="line">      (right - left) * <span class="title class_">Math</span>.<span class="title function_">min</span>(height[left], height[right])</span><br><span class="line">    );</span><br><span class="line">    <span class="comment">// 向中间移动短边所在的指针</span></span><br><span class="line">    <span class="keyword">if</span>(height[left] &lt; height[right])&#123;</span><br><span class="line">      left++;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      <span class="comment">// 两边相等的话，移动哪条边都无所谓</span></span><br><span class="line">      right--;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> maxArea;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>古人云，前举万变，其道一也。学会了这种做题思路，以后遇到类似的，就不会不知道如何下手。</p><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ul><li><a href="https://leetcode.cn/problems/container-with-most-water/description/?envType=study-plan-v2&envId=top-100-liked">盛最多水的容器</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode热题100 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>移动零</title>
      <link href="/2024/02/19/%E7%AE%97%E6%B3%95-%E7%A7%BB%E5%8A%A8%E9%9B%B6/"/>
      <url>/2024/02/19/%E7%AE%97%E6%B3%95-%E7%A7%BB%E5%8A%A8%E9%9B%B6/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p><strong>概要：</strong> 给定一个数组 <code>nums</code>，编写一个函数将所有 <code>0</code> 移动到数组的末尾，同时保持非零元素的相对顺序。请注意 ，必须在不复制数组的情况下原地对数组进行操作。</p><p><strong>示例：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">3</span>,<span class="number">12</span>]</span><br><span class="line">输出：[<span class="number">1</span>,<span class="number">3</span>,<span class="number">12</span>,<span class="number">0</span>,<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">输入：nums = [<span class="number">0</span>]</span><br><span class="line">输出：[<span class="number">0</span>]</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li>1 &lt;&#x3D; nums.length &lt;&#x3D; 104</li><li>-231 &lt;&#x3D; nums[i] &lt;&#x3D; 231 - 1</li></ul><h3 id="心路历程"><a href="#心路历程" class="headerlink" title="心路历程"></a>心路历程</h3><p><strong>向后查找法</strong></p><p>题目规定了不能复制数组，要原地进行操作，所以得用双指针。我开始想的是，一个指针找0，一个指针找不为0的，找到了就交换。然后开始尝试着写代码，结果发现执行栈溢出了，原来是我将while循环条件写成了不等于0，就导致在超过了原本数组的长度后，得到的值：undefined也能进入循环，然后形成了死循环。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> moveZeroes = <span class="keyword">function</span> (<span class="params">nums</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (nums.<span class="property">length</span> === <span class="number">0</span> || nums.<span class="property">length</span> === <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> nums;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 一个指针找0，一个找非0，然后交换，然后指针向后移动，直到找不到非0为止</span></span><br><span class="line">  <span class="keyword">let</span> i = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; nums.<span class="property">length</span>; j++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (nums[j] === <span class="number">0</span> &amp;&amp; j !== nums.<span class="property">length</span> - <span class="number">1</span>) &#123;</span><br><span class="line">      i = j + <span class="number">1</span>;</span><br><span class="line">      <span class="keyword">while</span> (nums[i] !== <span class="literal">undefined</span> &amp;&amp; (i &lt; nums.<span class="property">length</span> || nums[i] !== <span class="number">0</span>)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (nums[i] !== <span class="number">0</span>) &#123;</span><br><span class="line">          <span class="keyword">const</span> temp = nums[i];</span><br><span class="line">          nums[i] = nums[j];</span><br><span class="line">          nums[j] = temp;</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        i++;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> nums;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>上面的判断条件有些多余，改善一下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> moveZeroes = <span class="keyword">function</span> (<span class="params">nums</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (nums.<span class="property">length</span> === <span class="number">0</span> || nums.<span class="property">length</span> === <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> nums;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 一个指针找0，一个找非0，然后交换</span></span><br><span class="line">  <span class="keyword">let</span> i = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; nums.<span class="property">length</span>; j++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (nums[j] === <span class="number">0</span> &amp;&amp; j !== nums.<span class="property">length</span> - <span class="number">1</span>) &#123;</span><br><span class="line">      <span class="comment">// 找非0的指针从找0的指针下一位开始</span></span><br><span class="line">      i = j + <span class="number">1</span>;</span><br><span class="line">      <span class="keyword">while</span> (i &lt; nums.<span class="property">length</span>) &#123;</span><br><span class="line">        <span class="comment">// 向后循环查找非0值</span></span><br><span class="line">        <span class="keyword">if</span> (nums[i] !== <span class="number">0</span>) &#123;</span><br><span class="line">          <span class="keyword">const</span> temp = nums[i];</span><br><span class="line">          nums[i] = nums[j];</span><br><span class="line">          nums[j] = temp;</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        i++;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> nums;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>依次定点法</strong></p><p>有没有办法可以更快，步骤更少呢。上面我们还要向后遍历来找非0值，能不能去掉这一步。其实是可以的，甚至交换那一步也可以简化，我们用一个指针来分割，该指针的左边一定是非0值，然后依次从左到右交换过去，并更新指针位置。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> moveZeroes2 = <span class="keyword">function</span> (<span class="params">nums</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (nums.<span class="property">length</span> === <span class="number">0</span> || nums.<span class="property">length</span> === <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> nums;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 该指针表示从左到右中，当前未交换的点</span></span><br><span class="line">  <span class="keyword">let</span> i = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; nums.<span class="property">length</span>; j++) &#123;</span><br><span class="line">    <span class="keyword">const</span> temp = nums[j];</span><br><span class="line">    nums[j] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(temp !== <span class="number">0</span>)&#123;</span><br><span class="line">      nums[i] = temp;</span><br><span class="line">      i++;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> nums;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>还能有变体，也可以先交换，在看分割指针和当前循环指针是否指向同一处，如果不在同一处，说明必定存在0，那我们把0赋值给当前位置完成交换。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> moveZeroes3 = <span class="keyword">function</span> (<span class="params">nums</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (nums.<span class="property">length</span> === <span class="number">0</span> || nums.<span class="property">length</span> === <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> nums;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 该指针表示从左到右中，当前未交换的点</span></span><br><span class="line">  <span class="keyword">let</span> i = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; nums.<span class="property">length</span>; j++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (nums[j] !== <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="comment">// 先交换</span></span><br><span class="line">      nums[i] = nums[j];</span><br><span class="line">      <span class="keyword">if</span> (j !== i) &#123;</span><br><span class="line">        nums[j] = <span class="number">0</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      i++;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> nums;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="最终代码"><a href="#最终代码" class="headerlink" title="最终代码"></a>最终代码</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> moveZeroes = <span class="keyword">function</span> (<span class="params">nums</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (nums.<span class="property">length</span> === <span class="number">0</span> || nums.<span class="property">length</span> === <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> nums;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 该指针表示从左到右中，当前未交换的点</span></span><br><span class="line">  <span class="keyword">let</span> i = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; nums.<span class="property">length</span>; j++) &#123;</span><br><span class="line">    <span class="keyword">const</span> temp = nums[j];</span><br><span class="line">    nums[j] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(temp !== <span class="number">0</span>)&#123;</span><br><span class="line">      nums[i] = temp;</span><br><span class="line">      i++;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> nums;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://leetcode.cn/problems/move-zeroes/description/?envType=study-plan-v2&envId=top-100-liked">移动零</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode热题100 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker学习笔记</title>
      <link href="/2024/02/18/%E5%85%B6%E4%BB%96-docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2024/02/18/%E5%85%B6%E4%BB%96-docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p><strong>概要：</strong>学习docker后的笔记，笔者也是初学者，学艺不精，本篇文章更多的是记录公认的简单知识，暂时没有书写自己的心得。</p><h3 id="什么是docker"><a href="#什么是docker" class="headerlink" title="什么是docker"></a>什么是docker</h3><p>Docker 属于 Linux 容器的一种封装，提供简单易用的容器使用接口。传统的虚拟机技术启动应用服务往往需要数分钟，而 Docker 容器应用，由于直接运行于宿主内核，无需启动完整的操作系统，因此可以做到秒级、甚至毫秒级的启动时间。<br>“宿主内核”指的是操作系统的核心部分，它是在硬件和应用程序之间的一个抽象层，负责管理计算机的资源和提供基本的服务。在Docker中，容器直接共享宿主机的内核，而不需要启动完整的操作系统。与传统虚拟机不同，虚拟机在宿主机上运行一个完整的操作系统，包括独立的内核。这导致虚拟机启动应用服务时需要启动整个操作系统，耗时较长。相比之下，Docker容器通过与宿主机共享内核，能够更快速地启动应用服务。</p><h3 id="镜像"><a href="#镜像" class="headerlink" title="镜像"></a><strong>镜像</strong></h3><ul><li>镜像是一个只读的模板，包含了运行容器所需的文件系统、环境变量、软件设置以及应用程序的代码和依赖项等。</li><li>镜像可以看作是应用程序的打包，它包含了运行应用程序所需的一切。</li><li>镜像是静态的，一旦创建就不会改变。如果需要更新镜像，需要重新构建新的镜像版本。</li></ul><h3 id="容器"><a href="#容器" class="headerlink" title="容器"></a>容器</h3><ul><li>容器是从镜像创建的可运行实体，是镜像在运行时的实例化。</li><li>容器包含了镜像的内容以及正在运行的应用程序实例，同时也包含了运行时所需的文件系统和网络配置等。</li><li>容器是动态的，可以启动、停止、删除和重启。</li></ul><p>和镜像的关键区别：</p><ul><li><strong>状态</strong>：镜像是静态的，一旦创建就不会改变；容器是动态的，可以启动、停止和删除。</li><li><strong>可变性</strong>：镜像是只读的，不可更改；容器是可读写的，可以修改其状态。</li><li><strong>用途</strong>：镜像用于创建容器，容器是运行镜像的实例化。</li></ul><h3 id="DockerCompose"><a href="#DockerCompose" class="headerlink" title="DockerCompose"></a>DockerCompose</h3><p>Docker Compose 是一个用于定义和运行多容器 Docker 应用程序的工具。通过一个单独的 YAML 文件来配置应用程序的服务、网络和卷等，使得在多容器环境中部署应用程序变得更加简单。</p><p>以下是 Docker Compose 的一些关键特性和用途：</p><ol><li><strong>定义多容器应用程序</strong>：使用 Docker Compose，您可以在一个 YAML 文件中定义您的整个应用程序的服务、网络、卷等组件，而无需编写复杂的 Dockerfile 或者 Docker 命令。</li><li><strong>便捷的启动和停止</strong>：Docker Compose 允许您通过简单的命令一次性启动或停止整个应用程序的所有服务，包括它们之间的依赖关系，大大简化了应用程序的管理和操作。</li><li><strong>服务间通信</strong>：通过 Docker Compose，您可以轻松地定义服务之间的通信方式，包括网络设置和链接等，使得不同服务之间的交互变得更加简单和直观。</li><li><strong>环境配置</strong>：Docker Compose 支持通过环境变量和配置文件等方式对应用程序的环境进行灵活配置，使得应用程序在不同环境中的部署更加便捷和灵活。</li></ol><p>总的来说，Docker Compose 是一个用于简化多容器 Docker 应用程序的定义、运行和管理的工具，通过统一的配置文件和简单的命令，使得在 Docker 环境中部署和管理复杂的应用程序变得更加容易。</p><h3 id="Docker网络"><a href="#Docker网络" class="headerlink" title="Docker网络"></a>Docker网络</h3><p>Docker 网络是 Docker 容器之间通信的基础设施，它允许在 Docker 主机上运行的多个容器之间建立网络连接，并进行数据传输。Docker 网络使得不同容器之间可以相互通信，从而支持分布式应用程序的部署和运行。</p><p>以下是 Docker 网络的一些关键特性和概念：</p><ol><li><strong>默认网络</strong>：当您安装 Docker 时，Docker 会自动创建一个名为 “bridge” 的默认网络。该网络允许在同一 Docker 主机上运行的容器之间进行通信。</li><li><strong>用户自定义网络</strong>：除了默认网络外，您还可以创建自定义的 Docker 网络。用户自定义网络允许在多个 Docker 主机上的容器之间建立通信，甚至可以跨越不同的 Docker 宿主机。</li><li><strong>网络驱动程序</strong>：Docker 支持多种网络驱动程序，用于实现不同类型的网络连接，比如 bridge、overlay、macvlan 等。每种驱动程序都有自己的特点和适用场景。</li><li><strong>连接容器</strong>：通过 Docker 网络，您可以轻松地将多个容器连接到同一个网络中，从而实现容器之间的通信。连接容器使得分布式应用程序的部署和管理变得更加简单和灵活。</li></ol><p>总的来说，Docker 网络是 Docker 容器之间通信的基础设施，通过它，您可以在 Docker 主机上运行的多个容器之间建立网络连接，并实现数据传输和通信。</p><h3 id="Docker卷"><a href="#Docker卷" class="headerlink" title="Docker卷"></a>Docker卷</h3><p>Docker 卷（Volumes）是 Docker 中用于持久化数据的机制，允许容器与主机之间或容器之间共享和存储数据。简单来说，Docker 卷就是将主机文件系统中的目录或文件与容器内的目录或文件进行关联，从而实现数据的持久化存储和共享。</p><p>以下是 Docker 卷的一些关键特性和用途：</p><ol><li><strong>持久化存储</strong>：Docker 卷允许容器中的数据在容器被删除或重新创建时保持不变，从而实现数据的持久化存储。这使得容器可以重启、迁移或扩展而不会丢失数据。</li><li><strong>容器间共享数据</strong>：Docker 卷允许多个容器共享同一份数据，从而实现容器之间的数据共享。这对于多个容器之间需要共享配置文件、日志文件或其他数据的情况非常有用。</li><li><strong>主机与容器之间的数据传输</strong>：Docker 卷还允许容器与主机之间进行数据传输，从而实现容器与主机之间的数据共享和同步。</li><li><strong>数据备份和恢复</strong>：通过使用 Docker 卷，您可以轻松地备份和恢复容器中的数据，从而保护重要数据免受意外删除或损坏的影响。</li></ol><p>总的来说，Docker 卷是 Docker 中用于持久化数据的机制，通过它，您可以在容器与主机之间或容器之间共享和存储数据，实现数据的持久化存储和共享。</p><h3 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h3><ul><li><code>-t</code>（<code>--tty</code>）: 分配一个伪终端。这个选项通常与<code>-i</code>一起使用，以便为容器分配一个终端，这对于交互式会话很有用。</li><li><code>-i</code>（<code>--interactive</code>）: 保持STDIN开放，即使未附加也是如此。这允许你与运行的容器进行交互。</li><li><code>-d</code>（<code>--detach</code>）: 在分离模式下运行容器。使用这个选项，Docker会启动容器然后立即返回控制台，而不是附加到容器的标准输入&#x2F;输出。</li><li><code>-p</code>（<code>--publish</code>）: 发布容器的端口到宿主机。格式为<code>&lt;宿主机端口&gt;:&lt;容器端口&gt;</code>。</li><li><code>--name</code>: 为容器指定一个名称，这样你可以通过名称而不是容器ID来引用它。</li><li><code>-v</code>（<code>--volume</code>）: 挂载宿主机的目录或卷到容器。格式为<code>&lt;宿主机路径&gt;:&lt;容器路径&gt;</code>。</li><li><code>--rm</code>: 当容器退出时自动移除容器。这对于临时或一次性任务很有用，因为它避免了之后还需要手动清理容器。</li><li><code>--env</code>（<code>-e</code>）: 设置环境变量。格式为<code>KEY=value</code>。</li></ul><p>这些修饰符可以帮助你更精准地控制Docker容器的行为。例如，如果你想要以交互模式运行一个Ubuntu容器并分配一个终端，你可以这样做：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it ubuntu bash</span><br></pre></td></tr></table></figure><p>在这个例子中，<code>-it</code>组合允许你在容器中打开一个bash shell，并与之交互。如果你想要在后台运行这个容器，可以使用<code>-d</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d ubuntu</span><br></pre></td></tr></table></figure><p>现在，容器会在后台启动，并且你可以使用<code>docker ps</code>来查看它的状态。</p><h3 id="yml后缀"><a href="#yml后缀" class="headerlink" title="yml后缀"></a>yml后缀</h3><p><code>.yml</code> 或 <code>.yaml</code> 文件后缀代表了 YAML 文件，它们是一种常用于配置文件的数据序列化格式。YAML 是 “YAML Ain’t Markup Language”（YAML不是标记语言）的递归缩写，这种格式以其可读性高和易于理解的结构而闻名。</p><p>YAML 文件通常用于编写配置文件，例如 Docker Compose 文件、Kubernetes 资源定义文件、持续集成&#x2F;持续部署（CI&#x2F;CD）管道配置，以及许多现代软件应用程序和服务的配置。YAML 文件中的数据以键值对的形式呈现，支持数组、散列表、标量等数据结构。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">version: &#x27;3.8&#x27;</span><br><span class="line">services:</span><br><span class="line">  webapp:</span><br><span class="line">    image: my-webapp:latest</span><br><span class="line">    ports:</span><br><span class="line">      - &quot;5000:5000&quot;</span><br><span class="line">    environment:</span><br><span class="line">      - DEBUG=false</span><br></pre></td></tr></table></figure><p>在这个例子中，<code>version</code> 指定了文件遵循的 Docker Compose 文件格式版本，<code>services</code> 下定义了一个服务 <code>webapp</code>，其中包含了该服务的镜像、端口映射和环境变量配置。</p><p>YAML 文件的一个关键特点是它依赖缩进来表示数据层次结构，这使得它非常适合表示嵌套的数据结构。正确的缩进对于 YAML 文件的解析至关重要，通常使用空格（而不是制表符）来创建缩进。</p><h3 id="Kubernetes"><a href="#Kubernetes" class="headerlink" title="Kubernetes"></a>Kubernetes</h3><p>Kubernetes（也称为 K8s）是一个开源的容器编排系统，用于自动化应用程序容器的部署、扩展和管理。它最初是由 Google 设计并捐赠给 Cloud Native Computing Foundation（CNCF）来维护。Kubernetes 已经成为容器化应用程序的编排和管理的事实标准。</p><p>Kubernetes 的主要特点和功能包括：</p><ol><li><strong>服务发现和负载均衡</strong>：Kubernetes 可以使用 DNS 名称或者自己的 IP 地址自动发现容器，并且可以在容器之间自动分配流量，以便负载均衡。</li><li><strong>存储编排</strong>：Kubernetes 允许你自动挂载存储系统，无论是本地存储、公共云提供商（如 AWS、GCP、Azure）还是网络存储系统（如 NFS、iSCSI）。</li><li><strong>自动部署和回滚</strong>：你可以描述期望的部署状态，Kubernetes 可以自动改变实际状态到期望状态。如果有什么不对劲，Kubernetes 可以回滚到之前的状态。</li><li><strong>自动装箱（bin packing）</strong>：Kubernetes 允许你指定每个容器需要多少 CPU 和内存（RAM）。Kubernetes 可以将容器放到集群中的节点上，以最优化资源利用率。</li><li><strong>自我修复</strong>：Kubernetes 会重启失败的容器、替换和关闭不响应的容器，并且只有当容器准备就绪时才会向他们发送流量。</li><li><strong>密钥与配置管理</strong>：Kubernetes 允许你存储和管理敏感信息，如密码、OAuth 令牌和 ssh 密钥，你可以在不重启容器的情况下更新应用配置和密钥。</li><li><strong>水平扩展</strong>：简单的命令、用户界面或者基于 CPU 使用率等指标，Kubernetes 都能自动扩展应用程序的副本数。</li></ol><p>Kubernetes 架构通常包括主节点（master node）和工作节点（worker nodes）。主节点负责管理集群状态，而工作节点则运行应用程序的容器。Kubernetes 的核心组件包括 API 服务器、调度器、控制器管理器和 etcd（用于存储集群状态的键值存储）等。</p><p>Kubernetes 的用户可以通过命令行工具 <code>kubectl</code> 或者 API 来与集群交互，定义应用程序的期望状态、查询资源状态或修改集群配置等。</p><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ul><li><a href="https://yeasy.gitbook.io/docker_practice/introduction/why">docker-从入门到实践</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> dcoker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于秩序以及人生意义的思考</title>
      <link href="/2024/02/01/%E5%85%B6%E4%BB%96-%E5%85%B3%E4%BA%8E%E7%A7%A9%E5%BA%8F%E4%BB%A5%E5%8F%8A%E4%BA%BA%E7%94%9F%E6%84%8F%E4%B9%89%E7%9A%84%E6%80%9D%E8%80%83/"/>
      <url>/2024/02/01/%E5%85%B6%E4%BB%96-%E5%85%B3%E4%BA%8E%E7%A7%A9%E5%BA%8F%E4%BB%A5%E5%8F%8A%E4%BA%BA%E7%94%9F%E6%84%8F%E4%B9%89%E7%9A%84%E6%80%9D%E8%80%83/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p><strong>概要：</strong>2024.2.1的早上，我像往常一样骑车上班，在经历过两次失去重要的东西后，开始思考人生的意义是什么。</p><h3 id="随笔"><a href="#随笔" class="headerlink" title="随笔"></a><strong>随笔</strong></h3><p>骑在我那嘎吱作响的单车上，我看着车流人流来来往往，心中思绪顿起。小小的非机动车道上有早起送外卖的小哥，有骑着破旧三轮的大叔，有风华正茂的少男少女熙熙攘攘的赶着路，人们遇到红灯就停下匆忙的脚步，遇到绿灯就疾行而去，我想这就是秩序。对于普通人来说，秩序是不可或缺的，从古至今，人们其实真的不在意掌权者是靠什么手段上位的，人们在意的是他能不能带来好的秩序，能不能过安稳的日子，有秩序哪怕被掌权者收割也心甘情愿。就像被圈养的羊群，不用思考为什么在这，只需跟着部队一起吃草，然后等着被收割。羊儿们可以选择挣脱枷锁，跳出羊圈去往外面的世界，逃离羊圈的规则和秩序，但是也会进入大自然弱肉强食的世界，会遇到凶恶的狼，也会吃到新鲜的草。所以我们是逃离不了秩序与规则的，自由是建立在秩序之中的。</p><p>恍惚间，我来到了毕业那会儿居住的房子的外面，无数次的经过这里，日出而西，日落而东，重复着，紧迫着。我脑海中出现几个问题，我要还这样重复多少次？人生的意义是什么？时间就像是一个永不停歇的齿轮，我的人生就像是这齿轮带动的一根指针，这个指针已经转到了1&#x2F;3的位置了，在转动2&#x2F;3，属于我的人生就被强制画上了句号。那么在这剩下的时间里，我该做些什么？如何找到人生的意义呢？我想，我的答案是行动与思考。</p><p>人从出生开始，就会遵循本来的探索世界，好奇这个好奇那个，我们何不遵循本来去探索这光怪陆离的世界，这就是人生的意义，探索。用什么来探索呢，也就是该怎么做，我想应该是付出行动与思考，行动支撑思考的上限，思考给予行动的动力。就像是打游戏的少年，会去查找攻略，会去思考如何排兵布阵，然后在赢得胜利后获得巨大的愉悦感。就像是极限运动爱好者，一次次的探索自身的极限，诠释自己生活的意义。</p>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何让你的终端更好用</title>
      <link href="/2024/01/21/%E5%85%B6%E4%BB%96-%E5%A6%82%E4%BD%95%E8%AE%A9%E4%BD%A0%E7%9A%84%E7%BB%88%E7%AB%AF%E6%9B%B4%E5%A5%BD%E7%94%A8/"/>
      <url>/2024/01/21/%E5%85%B6%E4%BB%96-%E5%A6%82%E4%BD%95%E8%AE%A9%E4%BD%A0%E7%9A%84%E7%BB%88%E7%AB%AF%E6%9B%B4%E5%A5%BD%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p><strong>概要：</strong>本文主要是介绍一下我如何让vscode的终端更好用的。</p><h2 id="设置默认终端"><a href="#设置默认终端" class="headerlink" title="设置默认终端"></a>设置默认终端</h2><p>vscode的默认终端是PowerShell，这不得不吐槽一下，又丑又不好用，好多功能不支持，比如不支持pnpm跑脚本。所以我们得把默认终端换掉。</p><p>我们只需按快捷键 <strong>CTRL + SHIFT + P</strong> 打开 Command Palette，然后输入：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Terminal: Select Default Profile</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/pengpen1/blog-images/20240121175032.png"></p><p>最后选择你想要配置的终端即可，比如Git Bash。后面使用快捷键ctrl+j或其他方式打开终端时，就不在是PowerShell而是Git Bash啦。</p><p><img src="https://cdn.jsdelivr.net/gh/pengpen1/blog-images/20240121175139.png"></p><h2 id="命令自动补全"><a href="#命令自动补全" class="headerlink" title="命令自动补全"></a>命令自动补全</h2><p>自动补全的功能是自带的，不用安装插件，通过按 <code>tab</code> 键进行自动补全。</p>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 其他 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络知识汇总</title>
      <link href="/2024/01/21/%E7%BD%91%E7%BB%9C-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%9F%A5%E8%AF%86%E6%B1%87%E6%80%BB/"/>
      <url>/2024/01/21/%E7%BD%91%E7%BB%9C-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%9F%A5%E8%AF%86%E6%B1%87%E6%80%BB/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p><strong>概要：</strong>本文主要是带领大家学习数据是如何在网络中传输的，以及计算机网络相关的知识点。另外笔者写的不是很详细，只是做个精简和归纳，感兴趣的同学可以去参考链接中深入学习。</p><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>计算机最初只是孤立的一个运算机器，随着业务需求的不断发展，单台孤立的计算机已经不能够满足我们的需求，因此人们把一个区域内的多台计算机连接成一个网络即局域网，然而这些小的网络并不能满足对计算机日益增长的需求，因此把不同的局域网连接成一个全球性质的网络，我们称之为互联网，互联网就是把不同的局域网通过路由器连接起来的网络。</p><p><strong>1.广域网、局域网、WLAN</strong></p><p>广域网（Wide Area Network），简称WAN，是一种地域范围覆盖广的计算机网络的集合，通常所覆盖的范围从几十公里到几千公里，它能连接多个地区、城市和国家。由于其超长的覆盖范围，发送介质主要是政府或者大型企业部署的电话线或光纤，因此又被大家亲切的称为：外网、公网。</p><p>局域网（Local Area Network），简称LAN，相对于广域网（WAN）而言，主要是指在某一区域的计算机互联网络。“某一区域”指的是同一办公室、同一建筑物、同一公司和同一学校等，一般是方圆几千米以内。</p><p>更通俗地讲，你用手机上的移动网路，浏览网页时用到就是运营商体提供的WAN，即广域网。打开手机连接路由器，再访问网页，手机使用的就是局域网。是的，路由器这种工具往往充当广域网与局域网接入的“中间媒介”。</p><p>WLAN和有线局域网最大的区别就是“无线”。无线局域网WLAN的范围实际上很广，按照定义，以各种无线电波（如激光、红外线等）的无线信道来代替有线局域网中的部分或全部传输介质所构成的网络都叫WLAN。但是，由于一些技术比如WiFi、蓝牙使用的很多，以至于它们几乎代表了WLAN。实际上，WLAN是指一种网络组织架构，而WiFi是WLAN中的技术标准之一罢了。</p><p>局域网内部通过MAC地址寻址，而网络间的寻址是通过IP地址进行的。在局域网内部，通信的基本单位是帧（Frame），而帧中包含了源和目的设备的MAC地址。因此，局域网内部的通信确实是通过MAC地址进行寻址的。相反，在网络间通信时，通信的基本单位是数据包（Packet），而数据包中包含了源和目的设备的IP地址。因此，网络间的通信主要依赖于IP地址进行寻址。</p><p>如果通信双方在<strong>同一局域网内</strong>，可直接通过<strong>数据链路层</strong>进行相互通信，如果通信双方在<strong>不同网络内</strong>，则要通过<strong>三层地址（如IP地址）</strong>进行。</p><p><strong>2.网卡、网卡驱动</strong></p><p>网卡是计算机中用于连接到网络的硬件设备，负责将计算机的数据转换成网络可识别的信号并进行传输。网卡通过物理接口（如以太网端口）与计算机连接，使计算机能够与网络通信。</p><p>网卡驱动是软件程序，用于让操作系统能够理解和控制网卡硬件。它充当操作系统与网卡之间的桥梁，确保它们能够正确交互。</p><p>网卡是硬件设备，而网卡驱动是软件，两者紧密合作。网卡需要正确的驱动程序来与操作系统协同工作，以便在网络上发送和接收数据。</p><p><strong>3.防火墙</strong></p><p>防火墙是一种网络安全解决方案，可保护您的网络免受多余流量的影响。防火墙基于一组预编程的规则阻止外来的恶意软件。这些规则还可以防止网络中的用户访问某些站点和程序。</p><p>几乎所有防火墙都是状态型的，并分为两种通用类型：网络防火墙和基于主机的防火墙。基于主机或计算机的防火墙只保护一台计算机或”主机”， 通常部署在家中或个人设备上，通常与操作系统成套提供。</p><p>另一方面，防火墙网络可保护通过分界点的所有设备和流量，从而实现了较大的可扩展性。顾名思义，网络防火墙在网络层面发挥作用，即 OSI 第 3 和 4 层，扫描外部来源和局域网 (LAN) 之间的流量，或网络内不同网络段之间的流量。它们被放置在网络或网络段的周界作为第一道防线，并通过执行深入的数据包监测和数据包过滤来监控流量。如果数据包的内容不符合此前基于网络管理员或安全团队创建的规则选定的条件，则防火墙 会拒绝并阻止该流量。 </p><h3 id="网络的分层架构"><a href="#网络的分层架构" class="headerlink" title="网络的分层架构"></a>网络的分层架构</h3><p>我们一开始接触网络的时候，看到什么应用层，数据链路层就感到头疼，就会想为什么要这么多层呢？这是为了有更好的扩展性，可维护性，从物理层到应用层，每一层都有其特定的职责。这种分层设计在网络通信中被广泛应用，以实现高效、可靠的数据传输。</p><p>数据在传输的过程中，可能出现丢包，数据重复的问题，所以网络要效验数据的完整性，不可谓不复杂，所以让每一层专注于自己的职责，只管对接上一层和一层的接口就行，这样后面更换这一层的程序或者进行扩展就会更方便。这里我们来看下TCP&#x2F;IP协议簇：</p><table><thead><tr><th>名称</th><th>协议或代表</th><th>作用</th></tr></thead><tbody><tr><td>应用层</td><td>DNS，HTTP，SSH，SMTP，FTP…</td><td>直接面向用户，提供了丰富的网络服务和功能<br />提供数据的加密、认证和授权等安全功能<br />定义数据的格式和结构</td></tr><tr><td>传输层</td><td>TCP，UDP，SCTP(流控制传输协议)</td><td>实现进程之间（端到端）的通信<br />提供流量控制和拥塞控制</td></tr><tr><td>网络层</td><td>IPv4，IPv6，ARP，ICMP</td><td>负责网络寻址，屏蔽网络差异，提供透明传输<br />为网络间通信提供路由选择<br />数据包封装和解封装</td></tr><tr><td>数据链路层</td><td>以太网(Ethernet)，无线LAN</td><td>将网络层传递下来的数据包封装成帧<br />错误检测和纠正、流量控制、帧同步</td></tr><tr><td>物理层</td><td>光纤，双绞线电缆，无线设备</td><td>传输原始比特流</td></tr></tbody></table><p><strong>1.物理层</strong></p><p>位于各<strong>计算机网络体系</strong>的<strong>最低层</strong>，负责在<strong>物理传输介质</strong>之上为“数据链路层”提供一个<strong>原始比特流</strong>（也就是数据是以一个个0或1的二进制代码形式表示的）的<strong>物理连接</strong>。物理层并不是特指某种传输介质，而是指通过<strong>传输介质</strong>，以及相关的<strong>通信协议</strong>、<strong>标准</strong>建立起来的物理线路。</p><p><strong>2.数据链路层</strong></p><p>数据链路层是计算机网络体系结构中的第二层，位于物理层之上，网络层之下。它的主要任务是在直接相连的两个节点之间提供可靠的<strong>数据传输服务</strong>。数据链路层负责将网络层传递下来的数据包<strong>封装成帧</strong>，并通过物理层进行传输。此外，数据链路层还处理错误检测和纠正、流量控制、帧同步等功能。</p><p>数据链路层的作用，则是将网络层下发的数据包，根据自己所处的网络类型，将其封装成帧数据以后发送给下一跳地址。以ip数据包传输为例，首先ip层通过目标地址，在路由表中找到数据包通往目的需要经过的下一跳ip地址，并传给数据链路层，数据链路层根据ip，通过arp协议找到该ip地址所对应机器的mac地址，最后根据自己所处的网络对应的链路层协议，将数据包封装成帧以后，发给拥有该mac地址的机器。</p><p><img src="https://cdn.jsdelivr.net/gh/pengpen1/blog-images/20240122161906.png"></p><p><strong>环回地址：</strong>本机内不同的进程，可以通过TCP&#x2F;IP协议来进行通信，当数据包到达数据链路层时，如果判断数据包发往本机，则直接发送过去，否则通过ARP协议获取的以太网MAC地址，将数据封装成帧后，发往该MAC地址所属的机器上。</p><p><img src="https://cdn.jsdelivr.net/gh/pengpen1/blog-images/20240122164648.png"></p><p><strong>3.网络层</strong></p><p>当源端和目的端<strong>位于不同网络</strong>（物理上分隔开的计算机网络，可以是不同的局域网（LAN）、广域网（WAN）或者全球互联网。这些网络可能由不同的组织、公司或个体管理，拥有独立的地址空间和网络规则）的时候，<strong>直接通信是不可行</strong>的，此时就需要由<strong>网络层</strong>解决（通过路由选择、拥塞控制等功能）。</p><p>如果我们把物理层和数据链路层比作市内交通，那么<strong>网络层</strong>就可以比作<strong>连接不同城市交通的中转车站、机场或码头。</strong>网络层可以把<strong>来自其他网络中的数据</strong>传送到<strong>下一个途经的网络或本网络中</strong>的目的节点。</p><p><img src="https://cdn.jsdelivr.net/gh/pengpen1/blog-images/20240123110707.png"></p><p>网络层的数据交换技术主要是指<strong>网络中间结点</strong>所提供的<strong>数据交换功能</strong>，这些中间结点并不关心数据内容，只提供一个交换设备，把数据从一个结点转发到另一个结点，直至达到目的端。</p><p>这里主要说一下报文交换和分组交换：</p><ul><li>报文交换就是先在中间结点上进行缓存（这类中间结点通常是由具有存储能力的交换机、路由器承担），然后再由中间结点在线路空闲时把数据发送出去。</li><li>分组交换就说将报文根据各网络传输规定的<strong>MTU</strong>（最大传输单元）分成<strong>多个组，</strong>进行传输<strong>。</strong>在要转发的数据包头部加上源节点和目的节点的IP地址，成为数据报，然后通过路由技术一级级地把数据转发下去。各结点可根据数据报中所包括的地址和路由信息，选择不同的路由路径进行发送。另外，各个结点也可能随时根据网络的流量、故障等情况选择最佳路径。</li></ul><p>ARP和RARP协议：</p><ul><li>ARP协议的作用就是，在一个局域网内，当一台主机要查找某个IP所对应机器的MAC地址时，会向局域网内所有的机器广播这个请求，并捎带自己的MAC地址，当其查找的机器，收到该数据包时，会记录请求机器的ip和mac地址，并将自己的mac地址和ip返回给请求者，这就是ARP协议做的事情，本质上是通过ip去查找mac地址。</li><li>RARP的作用是，将mac地址转换成ip地址</li></ul><p>IP协议，如IPv4，用于将多个分组交换网络（数据报交换方式）连接起来的最典型通信协议。该协议是<strong>无连接的服务</strong>，负责在源地址和目的地址之间传送数据报，然后为了适应不同网络对分组大小的要求，需要对上层传来的报文进行分割，最后调用本地网络协议将数据报传送给下一个网关或目的计算机。作用：寻址、数据报的封装、分段与重组。</p><p><img src="https://cdn.jsdelivr.net/gh/pengpen1/blog-images/20240124140426.png"></p><p><strong>4.传输层</strong></p><p>网络层负责将数据传输到对方的主机，而机上使用什么协议来接受这个信息就由传输层来完成，所以传输层实现的是进程到进程间的连接。在TCP&#x2F;IP协议中，用”源IP地址、目的IP地址、源端口号、目的端口号、协议号”这五部分组成一个套接字，来标识一次通信，一个进程可以绑定多个端口号，因为一个进程可以有很多线程或者说是子进程等，这每一个都对应一个端口号，所以一个进程可以绑定多个端口号。</p><p>注意，上面说的TCP&#x2F;IP协议实际上是指两种不同的协议：TCP（传输控制协议）和IP（网际协议）。这两种协议通常一起使用，构成了TCP&#x2F;IP协议套件，是互联网及许多局域网的核心协议。这里简单区分一下：</p><ul><li>TCP（传输控制协议）：负责提供可靠的、面向连接的数据传输服务，确保数据按照正确的顺序、可靠地传输到目的地。它对数据进行分段、传输和重组，提供流量控制和拥塞控制等功能。</li><li>IP（网际协议）：负责在网络中寻址和路由数据包。它定义了数据包的格式，并规定了如何在网络中进行传输和路由选择。</li></ul><p>TCP协议的可靠性保证给IP协议提供了可靠环境，从而使得IP协议可以不必考虑传输的可靠性，专注于网络层的功能。这也是协议分层的初衷。</p><p><strong>端口号分类</strong></p><ul><li>公认端口：0~1023，明确与某种服务绑定，比如各种协议；</li><li>注册端口：1024~65535：松散的绑定一些服务，也就是有许多服务绑定这些端口。</li></ul><p>TCP&#x2F;UDP加上特定的端口号就可以表示应用层的某个协议；</p><p><strong>常用的端口号</strong></p><ul><li>TCP+20&#x2F;21: ftp协议(文件传输协议)；</li><li>TCP+22: ssh协议(专门为远程登录提供的安全性协议)</li><li>TCP+25: SMTP协议(简单邮件传输协议)</li><li>TCP&#x2F;UDP+53: DNS协议(域名解析协议)</li><li>TCP+80: Http协议(超文本传输协议)</li><li>TCP+443: Https协议(超文本传输安全协议)</li></ul><p><strong>TCP协议</strong></p><p>IP协议解决了数据包的路由和传输，上层的TCP就可以不再关注路由和寻址；TCP协议解决了传输的可靠性和顺序问题，上层的应用层就可以直接使用TCP协议进行数据传输，不再需要关心数据段的丢失和重复。</p><p>http是要基于TCP连接基础上的，简单的说，TCP就是单纯的建立连接（三次握手），不涉及任何我们需要请求的数据；http协议使用来收发数据，就是为实际应用而来的；</p><p>TCP被认为是一种流式传输层服务。它表示TCP发送端从应用程序接收到字符流，并从这个流中提取适当的长度创建数据段，然后将其发送到网络上。TCP接收端则接收数据段，从中提取数据，若没有按序号到达还要对其进行排序，并将其作为字符流交付给接收端应用程序。这样就完成了数据的传输。</p><p>TCP采用了很多手段来保证可靠传输</p><ul><li>1.连接管理机制：在传输数据前需要进行建立连接,也就是三次握手，在数据传送完后还需要释放连接，也就是四次挥手。(四次挥手中最后一个 ACK 是单向的确认,不需要回复)</li><li>2.数据分段：TCP以报文段为单位进行发送，在建立TCP连接的时候，两端协商TCP报文段中的数据字段(也称为数据包)的最大长度(MSS);其长度加上首部长度就是整个TCP报文段的长度；(每个报文段的大小可能会因为路径MTU的限制而进行分片，不一定等于MSS)</li><li>3.校验和：提供了一种简单的校验，如果收到段的校验和和原来的有差别，那接收方就会丢掉这个报文段；（并不能检测到所有的错误，例如无法检测到数据在传输过程中的重复）</li><li>4.序列号：TCP给发送的数据包的编号，如果接收端收到乱序后会进行重新排序，收到重复的也会进行丢弃；</li><li>5.确认应答：接收方收到报文后会回复确认(累计确认：对所有收到的按序的只确认最后)；</li><li>6.重发控制：TCP发出一个报文段后，就会启动一个定时器，等接收方确认这个报文段，如果不能及时收到确认，将重发这个报文段；</li><li>7.流量控制：通信的双方都有固定大小的缓冲区，TCP的接收端只允许发送端发送接收端缓冲区能接纳的数据。当接收方来不及处理发送方的数据，就把窗口缩小（窗口大小就是指无需等待确认就可以继续发送数据的最大值），并把窗口值告诉发送端（提示发送方降低发送的速率，防止包丢失）是利用滑动窗口来实现；</li><li>8.拥塞控制：当网络产生拥堵时，减少数据的发送；主要是通过拥塞窗口来实现；(慢开始和拥塞避免；快重传和快恢复)；</li></ul><p>可以去看看<a href="https://www.cnblogs.com/Curryxin/p/15098548.html#1%E4%BC%A0%E8%BE%93%E5%B1%82%E6%A6%82%E8%BF%B0">原文</a>真的写的详细，可以学到很多知识。</p><p>为什么握手是三次而挥手是四次？因为服务器收到客户端的SYN连接建立报文后，可以直接发送SYN+ACK报文，即应答和同步，但是在关闭连接时，服务器可能还有数据要发送，所以只回复一个应答告诉客户端自己收到了，但是我这不能关，得等我发完了，我才能发送FIN连接释放报文。</p><p><strong>UDP协议和TCP协议的区别</strong></p><ul><li>UDP首部默认是8个字节的固定长度，而TCP是20-60字节</li><li>UDP在传送数据之前不需要建立连接，收到后也不需要给出确认，所以没有办法保证可靠交付。但是传输效率就要比较TCP快，UDP提供的最大努力的交付，并不一定保证传输过去后是准确无误的，它是想尽可能快的传送尽可能多的信息。</li><li>UDP是面向报文的协议，应用层交给UDP多长的协议，就发送多长的报文，不合并也不拆分，保留报文的边界，一次发送一个。而TCP是面向字节流的协议，没有固定的报文或者说报文边界概念，双方都会有一个缓冲区，如果字节流太长，TCP就会拆分进行发送，如果字节流很短，那也可以等着缓冲区中的字节流变长了以后再构成一个报文段进行发送。</li><li>基于UDP的应用层协议：DNS、TFTP(简单文件传输协议，端口69)；基于TCP的：HTTP、HTTPS、FTP、SSH；</li><li>UDP的引用场景：音视频传输(qq和微信，加了一些算法提高可靠信)、共享屏幕等；TCP的应用场景：文件的上传和下载、浏览器上网、绝大多数应用都是TCP；</li></ul><p><strong>5.应用层</strong></p><p>TCP&#x2F;IP 模型中应用层位于传输层之上，传输层的端口号用于标识数据所对应的应用层协议。也就是说，有端口号的协议都是应用层协议。应用协议是终端设备之间的应用通信规则。应用之间交互的信息叫消息，应用协议定义这些消息的格式以及消息的控制或操作的规则</p><p><strong>应用程序</strong>有很多，包括 Web 浏览器、电子邮件、远程登录、文件传输、网络管理等。这些应用程序都会使用应用协议进行通信，应用协议正是为了实现应用程序的功能而设计和创造的。</p><p><strong>远程管理</strong></p><p>网络设备的管理方式，分为本地管理和远程管理。<strong>远程管理</strong>是从本地主机登录到网络对端设备，向网络对端的设备发送管理数据，以实现设备管理的操作方式。通过远程管理，不仅可以直接使用主机上的应用，还可以对主机进行参数设置。远程登录主要使用 Telnet 和 SSH 两种协议管理网络设备。</p><p><strong>SSH 协议</strong>全程是安全外壳协议，目的就是为了取代 Telnet（具有安全隐患） ，SSH 是<strong>加密</strong>的远程登录协议，提供更加安全的远程登录服务。使用 SSH 后会加密通信内容。即使信息被截获，由于无法解密，也无法了解数据的真正内容。SSH 协议常用版本是 <strong>SSHv2</strong> ，SSH 客户端通过 SSHv2 协议与 SSH 服务器建立<strong>一条 TCP 的加密信道</strong>，建立这条安全信道的方式是让客户端使用服务器的 RSA 公钥来验证 SSH 服务器的身份。SSH 协议默认使用 <strong>TCP 22 端口</strong>。</p><p>如果客户端成功验证了服务器的身份，它们之间就会创建出一个会话密钥，并用双方协商出来的加密算法和会话密钥，对这个信道传输的数据进行<strong>加密</strong>。这样，两台设备之间就建立了一条安全的信道，使用这条安全信道发送密码，密码以密文的形式传输，通过服务器的<strong>身份认证</strong>。SSH 就是通过这种方式建立加密信道，确保 SSH 服务器，也就是被管理设备的 Shell 免遭非法用户操作。</p><p><strong>FTP</strong></p><p>FTP 是网络上文件传输的标准协议，FTP 使用 TCP 作为传输协议，支持用户的登录认证和访问权限的控制。FTP 用于服务器和客户端之间传输文件，是 IP 网络上传输文件的通用协议。FTP 采用客户端和服务器的模式，使用 TCP 协议提供可靠传输。FTP 可以对登录服务器的用户名和密码进行验证，允许客户端指定文件的传输类型，并且可以设置文件的传输权限。</p><p>FTP 使用两条 TCP 连接实现文件传输。一条是 FTP 控制连接，用来控制管理；另一条是 FTP 数据连接，用于数据传输。FTP 控制连接用于传输 FTP 控制命令和命令执行的应答信息，比如登录用户名和密码的验证、发送文件的名称、发送方式的设置。这条连接在整个 FTP 会话过程中一直保持打开，通过 ASCII 码字符串发送请求和接收应答。在控制连接上无法发送数据，而 FTP 数据连接用于文件和文件列表的传输，仅在需要传输数据时建立数据连接，数据传输完毕后终止。</p><p><strong>HTTP</strong></p><p>当用户在浏览器的地址栏里输入 Web 页的 URL 后，HTTP 的处理就开始了。<strong>HTTP</strong> 默认使用 80 端口。它的工作机制，首先是客户端向服务器的 80 端口建立一个 TCP 连接，然后在这个 TCP 连接上进行请求和应答以及数据报文的发送。</p><p>HTTP 中常用的有两个版本，一个是 <strong>HTTP 1.0</strong> ，另一个是 <strong>HTTP 1.1</strong> 。在HTTP 1.0 中每一个命令和应答都会触发一次 TCP 连接的建立和断开。而从 HTTP 1.1 开始，允许在一个 TCP 连接上发送多个命令和应答，这种方式也叫<strong>保持连接</strong>（ keep-alive ）。可以大量减少 TCP 连接的建立和断开操作，提高传输效率。</p><p><strong>网络管理应用</strong></p><p>很多应用层协议广为人知，是因为我们在日常上网的过程中，会大量使用与这些应用协议有关的应用程序，这类应用协议称为<strong>终端用户应用协议</strong>；另外还有一些应用协议在网络中广泛使用，但我们对它们却少有听闻，最多在网络无法正常使用时，才会意识到它们的存在，这类应用层协议称为<strong>系统应用协议</strong>。</p><p>在日常工作中，网络工程师经常使用到的系统应用协议有 DHCP 协议和 DNS 协议。</p><h3 id="封装和分用"><a href="#封装和分用" class="headerlink" title="封装和分用"></a>封装和分用</h3><p>当应用程序采用TCP传送数据时，数据被送入协议栈中，然后，通过每一层直到被当做一串比特流传入网络中。其中每一层收到数据都会对数据增加一些首部信息（有的还需要尾部信息）。TCP传给IP的数据单元称为TCP报文段或简称为TCP段（UDP传给IP的数据单元称为UDP数据段），IP传给数据链路层的数据单元称为IP数据报。通过以太网传输的比特流称为帧。</p><p><img src="https://cdn.jsdelivr.net/gh/pengpen1/blog-images/20240122103819.png"></p><p>当目的主机收到了一个以太网的数据帧时，数据要从协议栈中，由底往上，每一层都检查报文首部中的协议标识，以确定接收数据的上层协议，同时去掉各层协议上的报文首部。经过协议栈的分用过程后，最终传递给应用层，供目的主机上的应用程序使用。</p><p><img src="https://cdn.jsdelivr.net/gh/pengpen1/blog-images/20240122111045.png"></p><h3 id="疑问解答"><a href="#疑问解答" class="headerlink" title="疑问解答"></a>疑问解答</h3><p><strong>1、为什么就不能直接通过二层的帧在不同网络中进行传输呢？</strong></p><p><strong>不同网络</strong>中的<strong>统一标识</strong>就是<strong>三层地址（如IP地址）</strong>，它<strong>不能识别</strong>二层的<strong>MAC地址</strong>。从上面的封装中我们可以得知，三层IP包<strong>封装成帧</strong>后，其中封装的<strong>源和目的IP地址</strong>作为<strong>帧的数据部分</strong>，不会改变。这些信息就是用来进行三层寻址的，且这些信息在帧传输过程中是不会改变的。</p><p>A网络发送给B网络的帧，在转发过程中，帧的<strong>MAC地址不断变化</strong>，但是<strong>IP地址永远不变</strong>。因为要不断靠MAC地址在局域网中寻找下一个转发节点或目的节点。</p><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ul><li><a href="https://www.bilibili.com/video/BV1V54y1y7c4?p=1">1.从一个HTTP请求来看网络分层原理_哔哩哔哩_bilibili</a></li><li><a href="http://manistein.club/post/network/%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82%E6%80%BB%E7%BB%93/">数据链路层总结</a></li><li><a href="https://zhuanlan.zhihu.com/p/470493698">《深入理解计算机网络》</a></li><li><a href="https://blog.csdn.net/wangyx1234/article/details/113444581">一文读懂局域网、广域网、WLAN、WiFi的联系与区别</a></li><li><a href="https://fiberroad.com.cn/what-is-ethernet">什么是以太网？以太网的工作原理和用途</a></li><li><a href="https://www.cnblogs.com/Curryxin/p/15098548.html#1%E4%BC%A0%E8%BE%93%E5%B1%82%E6%A6%82%E8%BF%B0">传输层概述</a></li><li><a href="https://zhuanlan.zhihu.com/p/428372105">应用层协议详解</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决ssh连接github失败问题</title>
      <link href="/2024/01/19/%E5%85%B6%E4%BB%96-%E8%A7%A3%E5%86%B3ssh%E8%BF%9E%E6%8E%A5github%E5%A4%B1%E8%B4%A5%E9%97%AE%E9%A2%98/"/>
      <url>/2024/01/19/%E5%85%B6%E4%BB%96-%E8%A7%A3%E5%86%B3ssh%E8%BF%9E%E6%8E%A5github%E5%A4%B1%E8%B4%A5%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p><strong>概要：</strong>在这篇记录中，我们将探讨在使用ssh关联自己账户后，连接失败问题。执行”ssh -T <a href="mailto:&#x67;&#x69;&#116;&#64;&#103;&#105;&#x74;&#x68;&#x75;&#98;&#x2e;&#99;&#x6f;&#109;">&#x67;&#x69;&#116;&#64;&#103;&#105;&#x74;&#x68;&#x75;&#98;&#x2e;&#99;&#x6f;&#109;</a>” 命令出现<code>ssh: connect to host github.com port 22: Connection timed out</code>报错的解决方案。</p><h3 id="重新绑定ssh"><a href="#重新绑定ssh" class="headerlink" title="重新绑定ssh"></a>重新绑定ssh</h3><p>我们先排除其他因素，确定的ssh密钥是正确绑定到你的github账户的：</p><p>所以得删除旧的：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd ~/.ssh</span><br><span class="line">ls</span><br><span class="line">rm id_rsa id_rsa.pub</span><br></pre></td></tr></table></figure><p>生成并复制新的密钥到你是github上：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;1592193136@qq.com&quot;</span><br><span class="line">cat ~/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure><p>测试连接：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure><p>如果出现和我上面一样报错的话，那么我们进入下一步吧。</p><h3 id="更换端口以解决问题"><a href="#更换端口以解决问题" class="headerlink" title="更换端口以解决问题"></a>更换端口以解决问题</h3><p>这个问题的原因是网络或防火墙限制了你访问GitHub的22端口，github默认开放的就是22端口，所以我们需要通过在.ssh下添加配置文件将22端口改为443端口。</p><p>先进入，并新建config文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd ~/.ssh</span><br><span class="line">vim config</span><br></pre></td></tr></table></figure><p>然后将下面的内容复制进去：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Host github.com</span><br><span class="line">User 注册github的邮箱</span><br><span class="line">Hostname ssh.github.com</span><br><span class="line">PreferredAuthentications publickey</span><br><span class="line">IdentityFile ~/.ssh/id_rsa</span><br><span class="line">Port 443</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/pengpen1/blog-images/20240119165349.png"></p><p>在英文状态下输入<code>:wq </code>推出vim编辑。简单来说就是配置了邮箱地址，私钥文件的路径，端口号。</p><p>然后在用<code>ssh -T git@github.com</code>试试吧。</p><h3 id="其他方案"><a href="#其他方案" class="headerlink" title="其他方案"></a>其他方案</h3><p>如果更换端口号也不行的话，可以试试刷新本地DNS缓存，可能是DNS解析出问题了：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ipconfig /flushdns</span><br></pre></td></tr></table></figure><p>清除了DNS解析还不行的话，我们有用clash的小伙伴，可以打开TUN模式，因为git 会走自己的代理配置。</p><p>还不行，那何必执着于ssh，换https连接吧：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote set-url origin 远程仓库地址</span><br></pre></td></tr></table></figure><p>​</p>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解锁移动端的GPT代理</title>
      <link href="/2024/01/15/%E5%85%B6%E4%BB%96-%E8%A7%A3%E9%94%81%E7%A7%BB%E5%8A%A8%E7%AB%AF%E7%9A%84GPT%E4%BB%A3%E7%90%86/"/>
      <url>/2024/01/15/%E5%85%B6%E4%BB%96-%E8%A7%A3%E9%94%81%E7%A7%BB%E5%8A%A8%E7%AB%AF%E7%9A%84GPT%E4%BB%A3%E7%90%86/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p><strong>概要：</strong>在这篇记录中，我们将探讨一下为什么有些自建节点在GTPWEB端可行，但是在安卓端登录就报错这个问题，请勿用于非法用途！</p><h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a><strong>问题描述</strong></h3><p>使用x-ui和reality实现的自建节点在web端使用GTP没问题，但是在移动端使用就出现下面的报错。下面我们先从基础知识开始，一步步带大家解决这个问题。</p><img src="https://cdn.jsdelivr.net/gh/pengpen1/blog-images/e62afa6b65a9c4aede62b023b5d221b.jpg" alt="图片" style="width:50%"><h3 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h3><p><strong>1.判定节点情况</strong></p><p>有些节点是本身该地区就不被GTP支持，有些是没有解锁GTP移动端的服务（<strong>默认未配置或未开放对移动端（手机、平板等）访问OpenAI GPT服务的权限</strong>），比如我所使用的racknerd节点。那么如何判断自己属于哪种情况呢？</p><p>方法1，访问这个网址：<a href="https://ios.chat.openai.com/public-api/mobile/server_status/v1">https://ios.chat.openai.com/public-api/mobile/server_status/v1</a></p><p>方法2，curl安卓端服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl andriod.chat.openai.com</span><br></pre></td></tr></table></figure><p>如果出现下方的内容就是和我一样，表示节点未解锁GTP移动端服务：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;cf_details&quot;: &quot;Something went wrong. You may be connected to a disallowed ISP. If you are using VPN, try disabling it. Otherwise try a different Wi-Fi network or data connection. (1)</span><br></pre></td></tr></table></figure><p>如果是下方的内容，表示已解锁GTP移动端服务：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Request is not allowed. Please try again later</span><br><span class="line">或者</span><br><span class="line">status：normal</span><br></pre></td></tr></table></figure><p><strong>2.节点类型</strong></p><p>通常常见的IP属性分为三种:ISP、hosting、business</p><ol><li><strong>ISP (Internet Service Provider):</strong> 这种节点是由互联网服务提供商（ISP）提供的。ISP节点通常用于提供一般的互联网连接服务，例如家庭宽带、企业网络等。这些节点的IP地址通常归属于互联网服务提供商。</li><li><strong>Hosting:</strong> Hosting节点是由托管服务提供商提供的，用于托管网站、应用程序或其他在线服务。这些节点通常专注于提供服务器托管服务，为用户提供计算资源和存储空间。</li><li><strong>Business:</strong> Business节点是由企业或组织自己搭建和维护的。这种类型的节点通常用于企业内部的网络服务，如内部网站、应用程序服务器等。它们可能不对外提供服务，而是为企业内部员工或特定用户群体提供服务。</li></ol><p>这些节点类型有助于区分服务器的使用场景和提供者。例如，ISP节点通常是公共互联网服务的一部分，而Hosting节点则专注于为客户提供托管服务。 Business节点则是由企业用于满足内部需求的服务器。</p><p>对于科学上网来说，ISP类型的更纯净些，所以有些文章就是让你换节点来解决移动端被封锁的问题。</p><h3 id="DNS解锁"><a href="#DNS解锁" class="headerlink" title="DNS解锁"></a>DNS解锁</h3><p><strong>1.什么是DNS</strong></p><p><strong>DNS（Domain Name System）</strong> 是互联网上用于将域名转换为与之关联的IP地址的系统。它充当了互联网的地址簿，帮助用户通过易记的域名访问网站，而不是记住复杂的IP地址。</p><p><strong>2.DNS解锁</strong></p><p>DNS解锁是通过更改DNS服务器设置，绕过地理限制或访问受限内容的一种方法。手动选择DNS提供商，Google DNS、OpenDNS、Cloudflare DNS。更改配置为使用所选的DNS提供商的服务器地址以此实现DNS解锁。</p><h3 id="warp解锁"><a href="#warp解锁" class="headerlink" title="warp解锁"></a>warp解锁</h3><p><strong>1.什么是warp代理</strong></p><p>Warp代理是由Cloudflare提供的一种虚拟私人网络（VPN）服务，基于<strong>WireGuard协议</strong>，可以提供更安全和更快速的互联网连接。它通过将用户的网络流量路由通过Cloudflare的全球网络来加密和保护数据，同时还能提供更快的访问速度和更稳定的连接。有免费版和 WARP+付费版本，这里要注意一下，如果你vps所在地区本身就不被openai支持，那通过warp代理出来的ip也是不被支持的。</p><p><strong>WireProxy</strong> 是一个WireGuard客户端，它以Socks5代理的形式暴露自身，允许用户在WireGuard网络上建立连接。</p><p>warp代理和wrap术语（指通过一种代理技术将网络流量进行包装或伪装，以隐藏真实的网络访问目的地）要区分哦。</p><p><strong>2.什么是socks5代理</strong></p><p>SOCKS5（Socket Secure 5）是一种网络协议，用于在网络中建立代理连接。它允许用户通过代理服务器进行网络连接，提供一种通用的、灵活的代理服务。</p><p><strong>3.vps实现wrap代理</strong></p><p>注意，我这里用的是x-ui+reality，如果是其他协议请在网上查询对于文章。核心原理就是用warp延伸出的socks5端口访问gtp移动端服务。</p><p><strong>第一步</strong></p><p>执行wrap脚本：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -N https://gitlab.com/fscarmen/warp/-/raw/main/menu.sh &amp;&amp; bash menu.sh</span><br></pre></td></tr></table></figure><p>然后选择语言2，接下来他会扫描你vps的配置自己安装依赖，然后出现菜单</p><p><img src="https://cdn.jsdelivr.net/gh/pengpen1/blog-images/20240117145134.png"></p><p>然后选择13，创建socks5代理，这里用默认就行了，不然需要在下面的socks配置中改写成你选的端口。再然后选择免费版的。</p><p><strong>第二步</strong></p><p>在x-ui面板上修改xray配置，其实就是多了一个socks出站和一个路由规则，凡是openai的请求全部交给warp的socks端口处理。</p><p><img src="https://cdn.jsdelivr.net/gh/pengpen1/blog-images/20240117150109.png"></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;api&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;services&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">            <span class="string">&quot;HandlerService&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">&quot;LoggerService&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">&quot;StatsService&quot;</span></span><br><span class="line">        <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;tag&quot;</span><span class="punctuation">:</span> <span class="string">&quot;api&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;inbounds&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;listen&quot;</span><span class="punctuation">:</span> <span class="string">&quot;127.0.0.1&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;port&quot;</span><span class="punctuation">:</span> <span class="number">62789</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;protocol&quot;</span><span class="punctuation">:</span> <span class="string">&quot;dokodemo-door&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;settings&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;address&quot;</span><span class="punctuation">:</span> <span class="string">&quot;127.0.0.1&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;tag&quot;</span><span class="punctuation">:</span> <span class="string">&quot;api&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;outbounds&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;protocol&quot;</span><span class="punctuation">:</span> <span class="string">&quot;freedom&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;settings&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;protocol&quot;</span><span class="punctuation">:</span> <span class="string">&quot;blackhole&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;settings&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;tag&quot;</span><span class="punctuation">:</span> <span class="string">&quot;blocked&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;tag&quot;</span><span class="punctuation">:</span> <span class="string">&quot;warp&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;protocol&quot;</span><span class="punctuation">:</span> <span class="string">&quot;socks&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;settings&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;servers&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                    <span class="punctuation">&#123;</span></span><br><span class="line">                        <span class="attr">&quot;address&quot;</span><span class="punctuation">:</span> <span class="string">&quot;127.0.0.1&quot;</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="attr">&quot;port&quot;</span><span class="punctuation">:</span> <span class="number">40000</span></span><br><span class="line">                    <span class="punctuation">&#125;</span></span><br><span class="line">                <span class="punctuation">]</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;policy&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;levels&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;0&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;handshake&quot;</span><span class="punctuation">:</span> <span class="number">10</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;connIdle&quot;</span><span class="punctuation">:</span> <span class="number">100</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;uplinkOnly&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;downlinkOnly&quot;</span><span class="punctuation">:</span> <span class="number">3</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;statsUserUplink&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;statsUserDownlink&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;bufferSize&quot;</span><span class="punctuation">:</span> <span class="number">10240</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;system&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;statsInboundDownlink&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;statsInboundUplink&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;routing&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;rules&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span><span class="string">&quot;field&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;domain&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span></span><br><span class="line">                    <span class="string">&quot;geosite:openai&quot;</span></span><br><span class="line">                <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;outboundTag&quot;</span><span class="punctuation">:</span><span class="string">&quot;warp&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;inboundTag&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                    <span class="string">&quot;api&quot;</span></span><br><span class="line">                <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;outboundTag&quot;</span><span class="punctuation">:</span> <span class="string">&quot;api&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;field&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;ip&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                    <span class="string">&quot;geoip:private&quot;</span></span><br><span class="line">                <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;outboundTag&quot;</span><span class="punctuation">:</span> <span class="string">&quot;blocked&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;field&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;outboundTag&quot;</span><span class="punctuation">:</span> <span class="string">&quot;blocked&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;protocol&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                    <span class="string">&quot;bittorrent&quot;</span></span><br><span class="line">                <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;field&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;stats&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>最后重启x-ui即可。</p><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a><strong>参考链接</strong></h3><ul><li><a href="https://blog.gujiakai.top/2023/10/chatgpt-android-error-disallowed-isp-solution">顾佳凯的网络日志</a></li><li><a href="https://gitlab.com/fscarmen/warp">warp</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VPN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VPN杂谈</title>
      <link href="/2024/01/02/%E5%85%B6%E4%BB%96-VPN%E6%9D%82%E8%B0%88/"/>
      <url>/2024/01/02/%E5%85%B6%E4%BB%96-VPN%E6%9D%82%E8%B0%88/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p><strong>概要：</strong>在这篇记录中，我们将探讨一下V2ray以及reality，最后使用x-ui以及realtiy搭建一个VPN。注：本文章仅供学习使用，遵守我国相关法律，请勿用于非法用途！</p><h3 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h3><p><strong>1.vps的挑选</strong></p><p><a href="https://my.racknerd.com/aff.php?aff=5059&pid=792">https://my.racknerd.com/aff.php?aff=5059&amp;pid=792</a></p><p><a href="https://bwh81.net/">Mass VPS hosting on Enterprise equipment - BandwagonHost VPS (bwh81.net)</a></p><p>选适合自己的就行</p><p><strong>2.ssl证书</strong></p><p>SSL证书是数字证书的一种，用于实现HTTPS协议，通过SSL证书，可以实现网站数据加密传输，防止数据被截获或窃取，提高网站的安全性。</p><p>在获取SSL证书的过程中，<strong>需要开放80和443端口</strong>。80端口是HTTP协议的默认端口，而443端口是HTTPS协议的默认端口。如果VPS运营商开启了防火墙，并且没有放行这两个端口，那么就无法正常获取SSL证书，从而导致网站无法使用HTTPS协议进行访问。</p><p>因此，在获取SSL证书之前，需要先登录VPS管理后台，放行80和443端口。如果已经拥有SSL证书，也可以上传自定义证书，以跳过申请证书这一步。</p><p>同时，需要注意的是，不同的VPS运营商可能默认开启或关闭防火墙设置，因此在选择VPS运营商时需要仔细了解其服务配置，以免出现不必要的麻烦。</p><p><strong>3.UDP协议和隧道</strong></p><p>UDP（用户数据报协议）是一种无连接的协议，它与TCP（传输控制协议）不同，不需要进行三次握手建立连接。UDP报文头部开销小，只有8个字节，相对TCP的20字节来说，更加简单。</p><p>UDP协议的特点如下：</p><ol><li>无连接：与TCP不同，UDP是无连接的协议，数据传输前不需要经过三次握手建立连接。</li><li>面向报文：每一条UDP报文就是一份完整的报文，同时源端口和目的端口在传送数据时是需要知道的。</li><li>不可靠性：UDP尽最大努力交付，但不保证可靠交付。</li><li>面向无连接：UDP不需事先建立连接，因此减少了开销和发送数据的时延。</li><li>头部开销小：只有8个字节的头部开销。</li><li>提供面向事务的简单的不可靠信息传送服务。</li><li>适用范围有限：如QQ聊天信息等。</li></ol><p>隧道则是一种网络通信技术，通过这种技术可以将一个网络协议的数据包封装在另一个网络协议的数据包中，以便在网络中传输。隧道可以用来解决网络安全、数据传输等问题。例如，可以通过将数据包封装在IPsec协议中来保护数据的机密性和完整性。</p><h3 id="V2Ray和xray"><a href="#V2Ray和xray" class="headerlink" title="V2Ray和xray"></a>V2Ray和xray</h3><p><strong>1.V2Ray配置</strong></p><p>这两个都是平台，可以挂载各种协议</p><p><a href="https://selierlin.github.io/v2ray/">前言 · V2Ray 配置指南|V2Ray 白话文教程 (selierlin.github.io)</a></p><p><a href="https://v2xtls.org/v2ray%E7%9A%84vless%E5%8D%8F%E8%AE%AE%E4%BB%8B%E7%BB%8D%E5%92%8C%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/">V2ray的VLESS协议介绍和使用教程 - V2ray XTLS黑科技 (v2xtls.org)</a></p><p>VMESS，即最普通的V2ray服务器，没有伪装，也不是VLESS<br>VMESS+KCP，传输协议使用mKCP，VPS线路不好时可能有奇效<br>VMESS+TCP+TLS，带伪装的V2ray，不能过CDN中转<br>VMESS+WS+TLS，即最通用的V2ray伪装方式，能过CDN中转，推荐使用<br>VLESS+KCP，传输协议使用mKCP<br>VLESS+TCP+TLS，通用的VLESS版本，不能过CDN中转，但比VMESS+TCP+TLS方式性能更好<br>VLESS+WS+TLS，基于websocket的V2ray伪装VLESS版本，能过CDN中转，有过CDN情况下推荐使用<br>VLESS+TCP+XTLS，目前最强悍的VLESS+XTLS组合，强力推荐使用（但是支持的客户端少一些）<br>trojan，轻量级的伪装协议<br>trojan+XTLS，trojan加强版，使用XTLS技术来提升性能</p><p><strong>注意：</strong>目前一些客户端不支持VLESS协议，或者不支持XTLS，请按照自己的情况选择组合</p><p><strong>2.V2Ray一键脚本</strong></p><p>这个脚本主要用于设置和配置V2Ray，包括检查系统环境、获取公网IP地址、检测BitTorrent软件等，如何配置v2ray可自定义，支持常规VMESS协议、VMESS+websocket+TLS+Nginx、VLESS+TCP+XTLS、VLESS+TCP+TLS等多种组合，支持CentOS 7&#x2F;8、Ubuntu 16.04以上、Debian 8以上系统，以及相关衍生系统。注意如果用VMESS+WS+TLS或者VLESS系列协议，则还需一个域名</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash &lt;(curl -sL https://storage.googleapis.com/tiziblog/setup.sh)</span><br></pre></td></tr></table></figure><p><strong>3.Reality协议</strong></p><p>我们都知道， 普通的 <code>TLS</code> 代理的一个重要弱点就是各种加密进行套娃，虽然加密包的外观让防火墙无法进行分辨，但是加密套娃无可避免的一个点就在于，它会在每个包都增加一个数据包头，那加密的层数越多，包的头也会越多，这个增量虽然不大，但这个数据可能具有某些统计学的一些特征。若是发现这个特征嘞，是的，那 <code>TLS</code> 的代理也就不太安全了。</p><p>想当初，<code>RPRX</code> 发布了 <code>XTLS</code>，而 <code>XTLS</code> 其主要原因就是为了减少额外的加密，在 <code>TLS</code> 代理的特征被暴露以后，<code>Xray-core 1.8.0</code> 马上推出了新的流控 —— <code>Vision</code>，至此，当使用 <code>Vision</code> 传输 <code>TLS1.3</code> 的数据时，<code>99%</code> 的数据包，几乎拥有完美的流量特征，因为他是原始数据，没有经过任何的加工。</p><p>然而在此之外，今年的三月，<code>Xray-core 1.8.0</code> 又进一步推出了 REALITY 协议来取代传统的 TLS 服务，这样可以消除服务端 TLS 的指纹特征，仍然具有前向保密性，而且证书链也是攻击无效，那这样安全性的确就超越了常规的 TLS，关键可以指向别人的网站，所以无须自己购置域名，布置证书等，而且，不必使用 VPS 的 <code>443</code> 端口，所以，的确是方便和安全了不少。甚至，在我自己长达半年的使用过程中 <code>Reality + Vision</code>，没有出现任何问题，延迟、速率也是很不错。</p><h3 id="x-ui和reality"><a href="#x-ui和reality" class="headerlink" title="x-ui和reality"></a>x-ui和reality</h3><p><strong>1.安装BBR拥塞控制算法（非必须）</strong></p><p>BBR的主要思想是通过测量网络的带宽和往返时间（RTT）来动态调整发送数据的速率，以最大化网络利用率并减小排队延迟。BBR试图估计网络的瓶颈带宽，并维持数据在网络中的流动，以避免拥塞。</p><p>BBRplus 是对 Google BBR（Bottleneck Bandwidth and Round-trip propagation time）的一个修改版本，它旨在进一步改进拥塞控制算法，以提供更好的网络性能。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//使用不卸载内核版</span><br><span class="line">wget -N --no-check-certificate &quot;https://github.000060000.xyz/tcpx.sh&quot; &amp;&amp; chmod +x tcpx.sh &amp;&amp; ./tcpx.sh</span><br><span class="line"></span><br><span class="line">//下面这个是我当前用的脚本</span><br><span class="line">wget -N --no-check-certificate &quot;https://raw.githubusercontent.com/chiakge/Linux-NetSpeed/master/tcp.sh&quot; &amp;&amp; chmod +x tcp.sh &amp;&amp; ./tcp.sh</span><br></pre></td></tr></table></figure><p>脚本自动安装的锐速内核，我们选择2，安装BBRplus内核，然后会提示我们重启VPS，我们输入y进行重启。然后在一次运行上面的脚本，状态就变成了已安装BBRplus内核但是未启动，我们只需输入7即可完成BBRplus加速。</p><p><img src="https://cdn.jsdelivr.net/gh/pengpen1/blog-images/20240111173321.png"></p><p>要验证成功没有也简单，输入下面命令返回bbrplus即表示成功了</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sysctl net.ipv4.tcp_congestion_control</span><br></pre></td></tr></table></figure><p><strong>2.安装x-ui</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash &lt;(curl -Ls https://raw.githubusercontent.com/FranzKafkaYu/x-ui/master/install.sh)</span><br></pre></td></tr></table></figure><p>然后是取名，设置端口，我这里是4545</p><p>然后输入x-ui启动</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">x-ui</span><br><span class="line">ctrl+c 退出查看日志状态</span><br><span class="line">firewall-cmd --zone=public --add-port=1935/tcp --permanent</span><br><span class="line">netstat -ntlp   //查看当前所有tcp端口·</span><br></pre></td></tr></table></figure><p>这里可能遇到在页面上访问不到x-ui的情况，这是因为你的服务器没有开发对应的端口，这里教大家解决一下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">systemctl start firewalld //开启防火墙</span><br><span class="line">firewall-cmd --zone=public --add-port=441/tcp --permanent //开发指定端口，这里是1935</span><br><span class="line">firewall-cmd --reload  // 重启防火墙</span><br><span class="line">netstat -ntlp   //查看当前所有tcp端口</span><br></pre></td></tr></table></figure><p><strong>3.添加reality</strong></p><p>这里需要xray为1.8.0以上</p><p>开启reality，添加用户中，flow选择xtls-rprx-vision，最后点添加即可</p><p>   <img src="https://cdn.jsdelivr.net/gh/pengpen1/blog-images/1704952057994.png"></p><p>注意，需要检查你的vps服务器是否开了对应端口，没开的话，按照上面的步骤打开一下端口。</p><p>最后把这个链接复制到小火箭或者v2RayN就可以啦。</p><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a><strong>参考链接</strong></h3><ul><li><a href="https://www.zztongyun.com/article/%E5%85%8D%E8%B4%B9%E6%90%AD%E5%BB%BA%E6%A2%AF%E5%AD%90">手把手教你如何自己搭梯子（科学上网、轻松访问油管） - 免费搭建梯子 - 实验室设备网 (zztongyun.com)</a></li><li><a href="https://inurl.top/archives/datizi/">【教程】如何搭建梯子（VPN）？-顶级索引 (inurl.top)</a></li><li><a href="https://clashxhub.com/banwagon-v2ray/">搬瓦工搭建V2ray科学上网新手指南 – Clash 官网导航 (clashxhub.com)</a></li><li><a href="https://blog.mareep.net/posts/40290/https://artitalk.js.org/">https://blog.mareep.net/posts/40290/https://artitalk.js.org/</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VPN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>脚手架</title>
      <link href="/2024/01/02/%E5%85%B6%E4%BB%96-%E8%84%9A%E6%89%8B%E6%9E%B6/"/>
      <url>/2024/01/02/%E5%85%B6%E4%BB%96-%E8%84%9A%E6%89%8B%E6%9E%B6/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p><strong>概要：</strong>在这篇记录中，我们将探讨如何搭建属于自己的脚手架。</p><h3 id="npm-link"><a href="#npm-link" class="headerlink" title="npm link"></a>npm link</h3><p>本地开发，我们不可能改点东西就发包到npm上，然后重新安装调试，所以我们需要做到本地调试，这里可以使用npm link建立软连接：</p><p><strong>建立链接</strong></p><p>假设项目名称为project1，和一个公用组件模块common,现需要在项目中使用common，且common是作为npm打包成项目依赖。</p><p>首先第一步，使用npm link将common模块创建成本地依赖包。在common目录下输入命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm link</span><br></pre></td></tr></table></figure><p>然后进入到project1项目目录里，和本地common模块建立链接。命令中‘common’是common模块中package.json的name属性值，而不是目录名称。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm link common</span><br></pre></td></tr></table></figure><p>现在在project1中的node_models里就会添加一个common模块的软连接。就说明项目链接模块成功了。<br>之后修改common里的内容就会实时更新，而不用打包发布再安装依赖。</p><p><strong>解除链接</strong></p><p>解除项目的依赖直接在项目目录里输入命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm unlink common</span><br></pre></td></tr></table></figure><p>这样项目里就解除了common模块的软连接，然后可以在输入npm install common安装你发布更新好的common模块包。</p><p>要解除本地common包，在common目录中输入命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm unlink common</span><br></pre></td></tr></table></figure><p>这样本地的common包模块就解除了，其他项目的软连接也失效了。</p><h3 id="monorepo"><a href="#monorepo" class="headerlink" title="monorepo"></a>monorepo</h3><p>但是这里我们不使用npm link，使用pnpm搭建<strong>monorepo</strong>。建立文件夹，初始化工程：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pnpm init</span><br></pre></td></tr></table></figure><p>然后创建pnpm-workspace.yaml文件：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">packages:</span> </span><br><span class="line">  <span class="bullet">-</span> <span class="string">&#x27;packages/*&#x27;</span> </span><br><span class="line">  <span class="bullet">-</span> <span class="string">&#x27;examples/*&#x27;</span></span><br></pre></td></tr></table></figure><p>上面是一个包含多个项目的配置文件，意思是声明了 <em>packages</em> 和 <em>examples</em> 文件夹中子工程是同属一个工作空间的，且目录下的所有文件夹是独立的子工程，这些子工程可以独立操作发布，工作空间中的子工程编译打包的产物也都可以被其它子工程引用。</p><h3 id="TODO"><a href="#TODO" class="headerlink" title="TODO"></a>TODO</h3>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 脚手架 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>理解git中的合并操作</title>
      <link href="/2023/12/16/git-%E7%90%86%E8%A7%A3git%E4%B8%AD%E7%9A%84%E5%90%88%E5%B9%B6%E6%93%8D%E4%BD%9C/"/>
      <url>/2023/12/16/git-%E7%90%86%E8%A7%A3git%E4%B8%AD%E7%9A%84%E5%90%88%E5%B9%B6%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p><strong>概要：</strong> 在工作中我们经常使用<code>git merge</code> 或者<code>git pull</code>，但是我们对于其中的原理还不是很清楚，比如我刚学的时候，经常会像，合这个分支会不会给我增加很多不要的文件，为什么合并了没有文件改变呢？等等这些疑问，所以这里一起来学习下吧。</p><h3 id="快进"><a href="#快进" class="headerlink" title="快进"></a>快进</h3><p>我之前遇到个这么一个问题，初始有个分支1，然后在分支1的基础上新增了分支2，分支删除了某些文件，并在此基础上新增分支3 。分支3修改了某些文件后想要回之前分支2删除的文件，就想通过<code>git pull</code>分支3获取这些文件。但是提示拉取成功，但是什么都没有改变。然后就想不通，这些不是差异吗？为什么没有呢？这就是我对git的合并有认知错误，我**<code>把合并想成了简单的复制粘贴，有不同文件或者代码就复制过来</code>**。其实，合并是根据指针来的，我上面这种情况是正常的，因为分支1在分支3的上游，git合并这两个分支时，不会做任何操作。跟这个类似的情况还有快进，我们一起来看看吧。</p><p>这里，我用<a href="https://learngitbranching.js.org/?locale=zh_CN&NODEMO=">Learn Git Branching</a>来演示一下，这里我把上面的分支1，2，3简化成两个分支。第一个分支main，假设上面有很多文件，我在提交2也就是c2的时候删了部分文件，之后创建并切换到dev分支，然后假设我们进行开发并提交一次到c3。</p><p><img src="https://cdn.jsdelivr.net/gh/pengpen1/blog-images/20231218101440.png"></p><p>这时候，我想把之前删的文件在弄到dev分支上，就输入<code>git merge main</code>，结果没有任何变化。因为dev分支的上流就是main分支，所以合并不会有任何变化。这里插一嘴，想恢复的话：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//dev分支上使用 git checkout main -- &lt;file1&gt; &lt;file2&gt; ...  </span><br><span class="line">//其中 &lt;file1&gt; &lt;file2&gt; ... 是你要恢复的文件路径列表。你可以列出所有被删除的文件的路径，用空格分隔。</span><br><span class="line"></span><br><span class="line">//这将从main分支中恢复指定的文件，并将它们添加到当前的dev分支,不会自动提交需要自己提交</span><br><span class="line">git checkout main -- file1.txt file2.txt</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>接着上面的话题，如果main分支合并到dev分支不会有任何变化，那dev分支合并到main分支呢？我们切换到main分支并输入<code>git merge dev</code>，会发现main分支的指针移动到了c3，其他没有任何变化，这种行为称为<strong>快速前进，也就是快进</strong>，当你试图合并两个分支时，如果顺着一个分支走下去能够到达另一个分支，那么 Git 在合并两者的时候，只会简单的将指针向前推进。</p><p><img src="https://cdn.jsdelivr.net/gh/pengpen1/blog-images/20231218104555.png"></p><h3 id="非快进"><a href="#非快进" class="headerlink" title="非快进"></a>非快进</h3><p>上面这是dev有提交，那假设main分支也有提交呢？</p><p><img src="https://cdn.jsdelivr.net/gh/pengpen1/blog-images/20231218105235.png"></p><p>我们把main分支合并到dev分支上：<code>git merge main</code>，我们会发现自动出现一个c6分支，且这个分支同时指向c4分支和c5分支，这就是代表合并成功了。合并过程中没有冲突产生，Git会尝试自动完成合并操作，并且在合并完成后会生成一个新的提交。</p><p><img src="https://cdn.jsdelivr.net/gh/pengpen1/blog-images/20231218105451.png"></p><p>那如果有冲突呢？GIT也会最大可能的进行合并，任何因包含合并冲突而有待解决的文件，都会以未合并状态标识出来，且不会产生合并提交，需要你手动解决冲突，再进行提交。</p><p><strong>## 参考链接</strong></p><ul><li><a href="https://blog.csdn.net/qq_42780289/article/details/97945300">Git：合并分支—-git merge命令应用的三种情景-CSDN博客</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>迭代器与async函数</title>
      <link href="/2023/12/14/js-%E8%BF%AD%E4%BB%A3%E5%99%A8%E4%B8%8Easync%E5%87%BD%E6%95%B0/"/>
      <url>/2023/12/14/js-%E8%BF%AD%E4%BB%A3%E5%99%A8%E4%B8%8Easync%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p><strong>概要：</strong> 在工作中我们经常使用Async&#x2F;Await 函数，我们也知道它是由Promise 和 Generator 来实现的，但是内部具体的原理我们少有涉猎，今天来一起学习下吧。</p><h3 id="Generator"><a href="#Generator" class="headerlink" title="Generator"></a>Generator</h3><p>这是<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Iterators_and_generators">MDN</a>上的示例，<strong>调用生成器函数会返回一个生成器对象，每次调用生成器对象的 next 方法会执行函数到下一次 yield 关键字停止执行，并且返回一个 { value: Value, done: boolean }的对象，如果已经迭代到序列中的最后一个值，则done为 <code>true</code>。</strong></p><ul><li>yield 关键字会停止函数执行并将 yield 后的值返回作为本次调用 next 函数的 value 进行返回。</li><li>同时，如果本次调用 g.next() 导致生成器函数执行完毕，那么此时 done 会变成 true 表示该函数执行完毕，反之则为 false 。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span>* <span class="title function_">generator</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">yield</span> <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">yield</span> <span class="number">2</span>;</span><br><span class="line">  <span class="keyword">yield</span> <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> gen = <span class="title function_">generator</span>(); <span class="comment">// &quot;Generator &#123; &#125;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(gen.<span class="title function_">next</span>().<span class="property">value</span>); <span class="comment">// 1 &#123; value: 1, done: false &#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(gen.<span class="title function_">next</span>().<span class="property">value</span>); <span class="comment">// 2</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(gen.<span class="title function_">next</span>().<span class="property">value</span>); <span class="comment">// 3</span></span><br></pre></td></tr></table></figure><p>区分可迭代协议（实现@@iterato属性，返回自身则只能迭代一次，返回新的迭代器则可以多次迭代），迭代器协议（实现了一个拥有以下语义（semantic）的 <strong>next()</strong> 方法，一个对象才能成为迭代器），迭代器（使用 <code>next()</code> 方法实现了<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Iteration_protocols#%E8%BF%AD%E4%BB%A3%E5%99%A8%E5%8D%8F%E8%AE%AE">迭代器协议</a>的任何一个对象），生成器函数（Generator 函数，使用 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/function*"><code>function*</code></a> 语法编写，调用返回生成器）。</p><p>下面是next传参和生成器函数return的用法，<strong>next 传递值进行调用时，传入的值会被当作上一次生成器函数暂停时 yield 关键字的返回值处理。return会终止当前生成器函数的执行，并将return的值作为本次调用 next 函数的 value 进行返回。</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span>* <span class="title function_">gen</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> a = <span class="keyword">yield</span> <span class="number">1</span>;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(a, <span class="string">&#x27;this is a&#x27;</span>);</span><br><span class="line">  <span class="keyword">const</span> b = <span class="keyword">yield</span> <span class="number">2</span>;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(b, <span class="string">&#x27;this is b&#x27;</span>);</span><br><span class="line">  <span class="keyword">const</span> c = <span class="keyword">yield</span> <span class="number">3</span>;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(c, <span class="string">&#x27;this is c&#x27;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&#x27;resultValue&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> g = <span class="title function_">gen</span>();</span><br><span class="line"></span><br><span class="line">g.<span class="title function_">next</span>(); <span class="comment">// &#123; value: 1, done: false &#125;</span></span><br><span class="line">g.<span class="title function_">next</span>(<span class="string">&#x27;param-a&#x27;</span>); <span class="comment">// &#123; value: 2, done: false &#125;</span></span><br><span class="line">g.<span class="title function_">next</span>(<span class="string">&#x27;param-b&#x27;</span>) <span class="comment">// &#123; value: 3, done: false &#125;</span></span><br><span class="line">g.<span class="title function_">next</span>() <span class="comment">// &#123; value: &#x27;resultValue&#x27;, done: true &#125;</span></span><br><span class="line">g.<span class="title function_">next</span>() <span class="comment">// &#123; value: undefined, done: true &#125;</span></span><br></pre></td></tr></table></figure><p><strong>阶段总结：</strong></p><ul><li>yield 关键字会停止函数执行并将 yield 后的值返回作为本次调用 next 函数的 value 进行返回。</li><li>return关键字会终止当前生成器函数的执行，并将return的值作为本次调用 next 函数的 value 进行返回。</li><li>next 传递值进行调用时，传入的值会被当作上一次生成器函数暂停时 yield 关键字的返回值处理，第一次不行，因为前面没有yield关键字，但是可以在生成器函数那设置参数作为第一次的传参。</li></ul><p>Babel l 在低版本浏览器下为我们实现的 Generator 生成器函数的 <strong>polyfill</strong> 实现，下面是转换前的代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span>* <span class="title function_">gen</span>(<span class="params">oneParam</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(oneParam, <span class="string">&quot;this is oneParam&quot;</span>);</span><br><span class="line">  <span class="keyword">const</span> a = <span class="keyword">yield</span> <span class="number">1</span>;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(a, <span class="string">&#x27;this is a&#x27;</span>);</span><br><span class="line">  <span class="keyword">const</span> b = <span class="keyword">yield</span> <span class="number">2</span>;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(b, <span class="string">&#x27;this is b&#x27;</span>);</span><br><span class="line">  <span class="keyword">const</span> c = <span class="keyword">yield</span> <span class="number">3</span>;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(c, <span class="string">&#x27;this is c&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> g = <span class="title function_">gen</span>(<span class="string">&quot;param-one&quot;</span>);</span><br><span class="line"></span><br><span class="line">g.<span class="title function_">next</span>(); <span class="comment">// &#123; value: 1, done: false &#125;</span></span><br><span class="line">g.<span class="title function_">next</span>(<span class="string">&#x27;param-a&#x27;</span>); <span class="comment">// &#123; value: 2, done: false &#125;</span></span><br><span class="line">g.<span class="title function_">next</span>(<span class="string">&#x27;param-b&#x27;</span>) <span class="comment">// &#123; value: 3, done: false &#125;</span></span><br><span class="line">g.<span class="title function_">next</span>(<span class="string">&#x27;param-c&#x27;</span>) <span class="comment">// &#123; value: undefined, done: true &#125;</span></span><br></pre></td></tr></table></figure><p>下面是regenerator-runtime简易版的实现和上面代码的polyfill实现，_marked是对于编译后的生成器函数作为继承使用的一个参数，并不影响函数的核心逻辑，所以我们暂时忽略它。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 下面是regenerator-runtime简易版的实现</span></span><br><span class="line"><span class="comment">// require(&quot;regenerator-runtime/runtime.js&quot;);</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> regeneratorRuntime = &#123;</span><br><span class="line">  <span class="comment">// 存在mark方法，接受传入的fn。原封不懂的返回fn</span></span><br><span class="line">  <span class="title function_">mark</span>(<span class="params">fn</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> fn;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">wrap</span>(<span class="params">fn</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> _context = &#123;</span><br><span class="line">      <span class="attr">next</span>: <span class="number">0</span>, <span class="comment">// 表示下一次执行生成器函数状态机switch中的下标</span></span><br><span class="line">      <span class="attr">sent</span>: <span class="string">&quot;&quot;</span>, <span class="comment">// 表示next调用时候传入的值 作为上一次yield返回值</span></span><br><span class="line">      <span class="attr">done</span>: <span class="literal">false</span>, <span class="comment">// 是否完成</span></span><br><span class="line">      <span class="comment">// 完成函数</span></span><br><span class="line">      <span class="title function_">stop</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">done</span> = <span class="literal">true</span>;</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="title function_">next</span>(<span class="params">param</span>) &#123;</span><br><span class="line">        <span class="comment">// 1. 修改上一次yield返回值为context.sent</span></span><br><span class="line">        _context.<span class="property">sent</span> = param;</span><br><span class="line">        <span class="comment">// 2.执行函数 获得本次返回值</span></span><br><span class="line">        <span class="keyword">const</span> value = <span class="title function_">fn</span>(_context);</span><br><span class="line">        <span class="comment">// 3. 返回</span></span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">          <span class="attr">done</span>: _context.<span class="property">done</span>,</span><br><span class="line">          value,</span><br><span class="line">        &#125;;</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> _marked = <span class="comment">/*#__PURE__*/</span> regeneratorRuntime.<span class="title function_">mark</span>(gen); <span class="comment">// /*#__PURE__*/用于告诉代码压缩工具或编译器，某个表达式是纯粹的，不会产生副作用</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">gen</span>(<span class="params">oneParam</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> a, b, c;</span><br><span class="line">  <span class="keyword">return</span> regeneratorRuntime.<span class="title function_">wrap</span>(<span class="keyword">function</span> <span class="title function_">gen$</span>(<span class="params">_context</span>) &#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">      <span class="keyword">switch</span> ((_context.<span class="property">prev</span> = _context.<span class="property">next</span>)) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(oneParam, <span class="string">&quot;this is oneParam&quot;</span>);</span><br><span class="line">          _context.<span class="property">next</span> = <span class="number">2</span>;</span><br><span class="line">          <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">          a = _context.<span class="property">sent</span>;</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(a, <span class="string">&quot;this is a&quot;</span>);</span><br><span class="line">          _context.<span class="property">next</span> = <span class="number">6</span>;</span><br><span class="line">          <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">          b = _context.<span class="property">sent</span>;</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(b, <span class="string">&quot;this is b&quot;</span>);</span><br><span class="line">          _context.<span class="property">next</span> = <span class="number">10</span>;</span><br><span class="line">          <span class="keyword">return</span> <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">case</span> <span class="number">10</span>:</span><br><span class="line">          c = _context.<span class="property">sent</span>;</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(c, <span class="string">&quot;this is c&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">case</span> <span class="number">12</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;end&quot;</span>:</span><br><span class="line">          <span class="comment">// 利用不写break和return造成的穿透执行效果实现终止</span></span><br><span class="line">          <span class="keyword">return</span> _context.<span class="title function_">stop</span>();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, _marked);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> g = <span class="title function_">gen</span>(<span class="string">&quot;param-one&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(g.<span class="title function_">next</span>());</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(g.<span class="title function_">next</span>(<span class="string">&quot;param-a&quot;</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(g.<span class="title function_">next</span>(<span class="string">&quot;param-b&quot;</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(g.<span class="title function_">next</span>(<span class="string">&quot;param-c&quot;</span>));</span><br></pre></td></tr></table></figure><p><strong>内部核心思想本质上就是通过 regeneratorRuntime.wrap 函数包裹一个状态机函数 fn 。wrap 函数内部维护一个 _context 对象，从而每次调用返回的生成器对象的 next 方法时，被包裹的状态机函数根据 _context 的对应属性匹配对应状态来完成不同的逻辑。</strong></p><h3 id="模拟Async函数"><a href="#模拟Async函数" class="headerlink" title="模拟Async函数"></a>模拟Async函数</h3><p>上面我们学习了生成器函数和迭代器相关的知识，现在我们来看一段代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">promise1</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">resolve</span>(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">promise2</span>(<span class="params">value</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">resolve</span>(<span class="string">&quot;value:&quot;</span> + value);</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span>* <span class="title function_">readFile</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> value = <span class="keyword">yield</span> <span class="title function_">promise1</span>();</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(value);</span><br><span class="line">  <span class="keyword">const</span> result = <span class="keyword">yield</span> <span class="title function_">promise2</span>(value);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">testAsync</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> value = <span class="keyword">await</span> <span class="title function_">promise1</span>();</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(value);</span><br><span class="line">  <span class="keyword">const</span> result = <span class="keyword">await</span> <span class="title function_">promise2</span>(value);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>是不是和async函数很像，async函数的特点就是返回值是一个promise，内部可以使用<code>await</code> 关键字实现异步行为。那我们试试用生成器函数模拟async函数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 思考如何用生成器函数实现async的功能，有结果在执行下一个，且返回的是promise</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">asyncReadFile</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> generator = <span class="title function_">readFile</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">const</span> nextPromise = generator.<span class="title function_">next</span>();</span><br><span class="line">        nextPromise.<span class="property">value</span>.<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>)=&gt;</span>&#123;</span><br><span class="line">            <span class="keyword">const</span> nextPromise = generator.<span class="title function_">next</span>(res);</span><br><span class="line">            nextPromise.<span class="property">value</span>.<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>)=&gt;</span>&#123;</span><br><span class="line">                generator.<span class="title function_">next</span>(res);</span><br><span class="line">                <span class="title function_">resolve</span>(res);</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">asyncReadFile</span>().<span class="title function_">then</span>(<span class="function"><span class="params">res</span>=&gt;</span><span class="variable language_">console</span>.<span class="title function_">log</span>(res));</span><br></pre></td></tr></table></figure><p>但是上面这种写法没有通用性，只适合上面这种情况，如果在增加几个await，又要嵌套几层then函数，且不支持非promise情况，如yield 88，虽然也可以实现，但是通用性不高。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">asyncReadFile</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> generator = <span class="title function_">readFile</span>();</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> nextPromise = generator.<span class="title function_">next</span>();</span><br><span class="line">    nextPromise.<span class="property">value</span>.<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// promise1的结果</span></span><br><span class="line">      <span class="keyword">const</span> nextObject = generator.<span class="title function_">next</span>(res); <span class="comment">//给value赋值</span></span><br><span class="line">      <span class="comment">// nextObject.value 是88</span></span><br><span class="line">      <span class="comment">// p</span></span><br><span class="line">     <span class="keyword">const</span> nextPromise = generator.<span class="title function_">next</span>(nextObject.<span class="property">value</span>);</span><br><span class="line"></span><br><span class="line">      nextPromise.<span class="property">value</span>.<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">        generator.<span class="title function_">next</span>(res);</span><br><span class="line">        <span class="title function_">resolve</span>(res);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>要实现通用性，首先想到的就是递归处理，利用done来判断是否结束递归，内部判断value是不是promsie，不是直接递归该值，是的话用then处理一下。next函数需要一个参数，因为使用 Generator 来处理异步问题时，通过 <code>const a = yield promise</code> 将 promise 的 resolve 值交给 a ，所以我们需要在每次 <code>then</code> 函数中将 res 传递给下一次的 next(res) 作为上次 yield 的返回值。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">co</span>(<span class="params">generator</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> iterator = <span class="title function_">generator</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">next</span> = (<span class="params">params</span>) =&gt; &#123;</span><br><span class="line">      <span class="keyword">const</span> &#123; value, done &#125; = iterator.<span class="title function_">next</span>(params);</span><br><span class="line">      <span class="keyword">if</span> (done) &#123;</span><br><span class="line">        <span class="title function_">resolve</span>(value);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 模拟await以及处理非promise的特殊情况</span></span><br><span class="line">        <span class="keyword">if</span> (value <span class="keyword">instanceof</span> <span class="title class_">Promise</span>) &#123;</span><br><span class="line">          value</span><br><span class="line">            .<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">              <span class="title function_">next</span>(res);</span><br><span class="line">            &#125;)</span><br><span class="line">            .<span class="title function_">catch</span>(<span class="function">(<span class="params">err</span>) =&gt;</span> <span class="title function_">reject</span>(err));</span><br><span class="line">          <span class="comment">// 异步rejected，不能用外面的try catch来处理，会报 ERR_UNHANDLED_REJECTIO</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="title function_">next</span>(value);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">next</span>();</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">co</span>(readFile)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(res))</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function">(<span class="params">err</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;111&quot;</span>, err));</span><br><span class="line"><span class="comment">// catch也能捕获程序运行错误</span></span><br></pre></td></tr></table></figure><p>除了用instanceof Promise来判断是否是promise外，还有个更巧妙的处理方法，利用Promise的静态方法包裹一下，这在不清楚一个值是否是 Promise时，最好用的处理方法。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Promise</span>.<span class="title function_">resolve</span>(value).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> <span class="title function_">next</span>(res));</span><br></pre></td></tr></table></figure><p>至此我们可以得出，<strong>Async 就是将 Generator 包裹了一层 co 函数，所以它被称为 Generator 和 Promise 的语法糖。</strong></p><h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><p>本篇文章讲述了 Generator 函数的特性以及在低版本浏览器上的polyfill实现，到最后的手写co函数，理解Async语法糖的核心原理。</p><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><p>Async是如何被JavaScript实现的 - WangHaoyu的文章 - 知乎<br><a href="https://zhuanlan.zhihu.com/p/473245486">https://zhuanlan.zhihu.com/p/473245486</a></p>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 迭代器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>最长连续序列</title>
      <link href="/2023/12/12/%E7%AE%97%E6%B3%95-%E6%9C%80%E9%95%BF%E8%BF%9E%E7%BB%AD%E5%BA%8F%E5%88%97/"/>
      <url>/2023/12/12/%E7%AE%97%E6%B3%95-%E6%9C%80%E9%95%BF%E8%BF%9E%E7%BB%AD%E5%BA%8F%E5%88%97/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p><strong>概要：</strong> 中等题，给定一个未排序的整数数组 <code>nums</code> ，找出数字连续的最长序列（不要求序列元素在原数组中连续）的长度。请你设计并实现时间复杂度为 <code>O(n)</code> 的算法解决此问题。</p><p><strong>示例：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [<span class="number">100</span>,<span class="number">4</span>,<span class="number">200</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">2</span>]</span><br><span class="line">输出：<span class="number">4</span></span><br><span class="line">解释：最长数字连续序列是 [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]。它的长度为 <span class="number">4</span>。</span><br><span class="line">输入：nums = [<span class="number">0</span>,<span class="number">3</span>,<span class="number">7</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">8</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">0</span>,<span class="number">1</span>]</span><br><span class="line">输出：<span class="number">9</span></span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li>0 &lt;&#x3D; nums.length &lt;&#x3D; 105</li><li>-109 &lt;&#x3D; nums[i] &lt;&#x3D; 109</li></ul><h3 id="心路历程"><a href="#心路历程" class="headerlink" title="心路历程"></a>心路历程</h3><p><strong>数组记录法（无法通过nlogn）</strong></p><p>题目要求O(n)则只能循环一次，我想的是先去重和排序，然后用一个变量记录最长的连续次数，一个数组装连续数字，然后循环比较最终得到最后的结果：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number[]</span>&#125; <span class="variable">nums</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> longestConsecutive = <span class="keyword">function</span> (<span class="params">nums</span>) &#123;</span><br><span class="line">  <span class="comment">// 装连续数字的记录数组</span></span><br><span class="line">  <span class="keyword">const</span> recordArray = [];</span><br><span class="line">  <span class="comment">// 去重加排序</span></span><br><span class="line">  <span class="keyword">const</span> numsArr = <span class="title class_">Array</span>.<span class="title function_">from</span>(<span class="keyword">new</span> <span class="title class_">Set</span>(nums)).<span class="title function_">sort</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a - b);</span><br><span class="line">  <span class="comment">// 记录最长的连续次数</span></span><br><span class="line">  <span class="keyword">let</span> longestStreak = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; numsArr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (recordArray.<span class="property">length</span> === <span class="number">0</span> || numsArr[i - <span class="number">1</span>] + <span class="number">1</span> === numsArr[i]) &#123;</span><br><span class="line">      <span class="comment">// 如果记录数组为0，说明是第一次或者是前面连续的中断了</span></span><br><span class="line">      recordArray.<span class="title function_">push</span>(numsArr[i]);</span><br><span class="line">      <span class="keyword">if</span> (longestStreak &lt; recordArray.<span class="property">length</span>) &#123;</span><br><span class="line">        <span class="comment">// 最长次数小于记录数组的长度，则覆盖掉</span></span><br><span class="line">        longestStreak = recordArray.<span class="property">length</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(i, recordArray, numsArr[i], numsArr);</span><br><span class="line">      <span class="keyword">if</span> (longestStreak &lt; recordArray.<span class="property">length</span>) &#123;</span><br><span class="line">        longestStreak = recordArray.<span class="property">length</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 中断则置空记录数组，且把当前的放进去</span></span><br><span class="line">      recordArray.<span class="property">length</span> = <span class="number">0</span>;</span><br><span class="line">      recordArray.<span class="title function_">push</span>(numsArr[i]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> longestStreak;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这个也可以用变量记录，不用数组记录</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title function_">longestConsecutive</span> = (<span class="params">nums</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (nums.<span class="property">length</span> === <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">  nums.<span class="title function_">sort</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a - b)</span><br><span class="line">  <span class="keyword">let</span> max = <span class="number">1</span></span><br><span class="line">  <span class="keyword">let</span> count = <span class="number">1</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; nums.<span class="property">length</span> - <span class="number">1</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">let</span> cur = i, next = i + <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> (nums[cur] === nums[next]) <span class="keyword">continue</span> <span class="comment">// 相同就跳过本次循环</span></span><br><span class="line">    <span class="keyword">if</span> (nums[cur] + <span class="number">1</span> === nums[next]) &#123; <span class="comment">// 发现连续项 count++</span></span><br><span class="line">      count++</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123; <span class="comment">// 否则，count重置1</span></span><br><span class="line">      count = <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">    max = <span class="title class_">Math</span>.<span class="title function_">max</span>(max, count)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> max</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>set查询</strong></p><p>我们可以利用set查询为0(1)进行缩短时间，找每个数的右边也就是++存在多少个，就可以得出最多连续数字是多少。但是，真的有必要所有数都循环查询吗？只有起始点才需要查询，所以我们需要判断一下是不是起始点。这个方案只要区分你要的是索引还是数字本身就比较简单。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> longestConsecutive = <span class="keyword">function</span> (<span class="params">nums</span>) &#123;</span><br><span class="line">  <span class="comment">// 利用set查询为O(1)</span></span><br><span class="line">  <span class="keyword">const</span> set = <span class="keyword">new</span> <span class="title class_">Set</span>(nums);</span><br><span class="line">  <span class="keyword">let</span> longestStreak = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; nums.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="comment">// 起始点才进入while循环,也就是左边有值的数</span></span><br><span class="line">    <span class="keyword">if</span> (!set.<span class="title function_">has</span>(nums[i] - <span class="number">1</span>)) &#123;</span><br><span class="line">      <span class="keyword">let</span> currentStreak = <span class="number">1</span>;</span><br><span class="line">      <span class="keyword">let</span> currentNum = nums[i];</span><br><span class="line">      <span class="comment">// 利用set查询右边有多少连续的</span></span><br><span class="line">      <span class="keyword">while</span> (set.<span class="title function_">has</span>(currentNum + <span class="number">1</span>)) &#123;</span><br><span class="line">        currentStreak++;</span><br><span class="line">        currentNum++;</span><br><span class="line">      &#125;</span><br><span class="line">      longestStreak = <span class="title class_">Math</span>.<span class="title function_">max</span>(longestStreak, currentStreak);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> longestStreak;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>map两端对接法</strong></p><p>每天都能学到骚操作，利用map存储数字，和数字连续的次数，不用更新所有数字的连续次数，只需更新两端的即可。每插入一个数字，就找这个的左右相邻数记录的连续次数，没有就默认连续次数为0，然后左连续次数+1+右连续次数就是目前的最长连续次数，然后更新当前的以及两端的记录，依次插入比较更新，最终得出最长连续次数。这里要注意，当前的还是要记录连续次数，不然相同的数字一进来，看到map上没有记录，然后在给左右两边更新一次就会重复。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> longestConsecutive = <span class="keyword">function</span> (<span class="params">nums</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> map = <span class="keyword">new</span> <span class="title class_">Map</span>();</span><br><span class="line">  <span class="keyword">let</span> longestStreak = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; nums.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="comment">// 跳过相同的</span></span><br><span class="line">    <span class="keyword">if</span> (map.<span class="title function_">has</span>(nums[i])) &#123;</span><br><span class="line">      <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 找左右记录的连续数字</span></span><br><span class="line">    <span class="keyword">const</span> left = map.<span class="title function_">get</span>(nums[i] - <span class="number">1</span>) || <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">const</span> right = map.<span class="title function_">get</span>(nums[i] + <span class="number">1</span>) || <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">const</span> currentStreak = left + right + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    longestStreak = <span class="title class_">Math</span>.<span class="title function_">max</span>(longestStreak, currentStreak);</span><br><span class="line"></span><br><span class="line">    map.<span class="title function_">set</span>(nums[i], currentStreak);</span><br><span class="line">    map.<span class="title function_">set</span>(nums[i] - left, currentStreak);</span><br><span class="line">    map.<span class="title function_">set</span>(nums[i] + right, currentStreak);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> longestStreak;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="最终代码"><a href="#最终代码" class="headerlink" title="最终代码"></a>最终代码</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> longestConsecutive = <span class="keyword">function</span> (<span class="params">nums</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> map = <span class="keyword">new</span> <span class="title class_">Map</span>();</span><br><span class="line">  <span class="keyword">let</span> longestStreak = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; nums.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="comment">// 跳过相同的</span></span><br><span class="line">    <span class="keyword">if</span> (map.<span class="title function_">has</span>(nums[i])) &#123;</span><br><span class="line">      <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 找左右记录的连续数字</span></span><br><span class="line">    <span class="keyword">const</span> left = map.<span class="title function_">get</span>(nums[i] - <span class="number">1</span>) || <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">const</span> right = map.<span class="title function_">get</span>(nums[i] + <span class="number">1</span>) || <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">const</span> currentStreak = left + right + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    longestStreak = <span class="title class_">Math</span>.<span class="title function_">max</span>(longestStreak, currentStreak);</span><br><span class="line"></span><br><span class="line">    map.<span class="title function_">set</span>(nums[i], currentStreak);</span><br><span class="line">    map.<span class="title function_">set</span>(nums[i] - left, currentStreak);</span><br><span class="line">    map.<span class="title function_">set</span>(nums[i] + right, currentStreak);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> longestStreak;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://leetcode.cn/problems/longest-consecutive-sequence/?envType=study-plan-v2&envId=top-100-liked">128. 最长连续序列 - 力扣（LeetCode）</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode热题100 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>字母异位词分组</title>
      <link href="/2023/12/11/%E7%AE%97%E6%B3%95-%E5%AD%97%E6%AF%8D%E5%BC%82%E4%BD%8D%E8%AF%8D%E5%88%86%E7%BB%84/"/>
      <url>/2023/12/11/%E7%AE%97%E6%B3%95-%E5%AD%97%E6%AF%8D%E5%BC%82%E4%BD%8D%E8%AF%8D%E5%88%86%E7%BB%84/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p><strong>概要：</strong> 中等题，给你一个字符串数组，请你将 <strong>字母异位词</strong> 组合在一起。可以按任意顺序返回结果列表。<strong>字母异位词</strong> 是由重新排列源单词的所有字母得到的一个新单词。</p><p><strong>示例：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">输入: strs = [<span class="string">&quot;eat&quot;</span>, <span class="string">&quot;tea&quot;</span>, <span class="string">&quot;tan&quot;</span>, <span class="string">&quot;ate&quot;</span>, <span class="string">&quot;nat&quot;</span>, <span class="string">&quot;bat&quot;</span>]</span><br><span class="line">输出: [[<span class="string">&quot;bat&quot;</span>],[<span class="string">&quot;nat&quot;</span>,<span class="string">&quot;tan&quot;</span>],[<span class="string">&quot;ate&quot;</span>,<span class="string">&quot;eat&quot;</span>,<span class="string">&quot;tea&quot;</span>]]</span><br><span class="line">输入: strs = [<span class="string">&quot;&quot;</span>]</span><br><span class="line">输出: [[<span class="string">&quot;&quot;</span>]]</span><br><span class="line">输入: strs = [<span class="string">&quot;a&quot;</span>]</span><br><span class="line">输出: [[<span class="string">&quot;a&quot;</span>]]</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li>1 &lt;&#x3D; strs.length &lt;&#x3D; 104</li><li>0 &lt;&#x3D; strs[i].length &lt;&#x3D; 100</li><li>strs[i] 仅包含小写字母</li></ul><h3 id="心路历程"><a href="#心路历程" class="headerlink" title="心路历程"></a>心路历程</h3><p>一开始，我接触这题直接想偏了，想的是，对strs进行遍历，拿到当前的字符串，然后转换成数组，然后遍历map的key，然后找key为当前字符串的异位词，找到则在这个key对应的数组后增加当前字符串，没有则用当前字符串为key创建个数组，也就是用map存储遍历过的字符串和对应的字母异位词数组，最后遍历map提取出结果。</p><p>我这思路是有问题的，且不说，判断好不好判断，光是使用循环就用了好多次了。</p><p>这到题其实可以简化为如何判断两个字符串是不是异位词，解决了这个，就简单多了。</p><p><strong>排序比较法</strong></p><p>用replace一个一个替换，在判断length？用双循环比对？转换数组在排序在比较？最后一个是最适合的，不用考虑排序规则是什么，只要都用同一个规则就行。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">string[]</span>&#125; <span class="variable">strs</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">string[][]</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> groupAnagrams = <span class="keyword">function</span> (<span class="params">strs</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> map = <span class="keyword">new</span> <span class="title class_">Map</span>();</span><br><span class="line">  <span class="keyword">const</span> result = [];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; strs.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">const</span> str = strs[i];</span><br><span class="line">    <span class="keyword">const</span> key = str.<span class="title function_">split</span>(<span class="string">&quot;&quot;</span>).<span class="title function_">sort</span>().<span class="title function_">join</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (!map.<span class="title function_">has</span>(key)) &#123;</span><br><span class="line">      map.<span class="title function_">set</span>(key, []);</span><br><span class="line">    &#125;</span><br><span class="line">    map.<span class="title function_">get</span>(key).<span class="title function_">push</span>(str);</span><br><span class="line">  &#125;</span><br><span class="line">  map.<span class="title function_">forEach</span>(<span class="function">(<span class="params">value, key</span>) =&gt;</span> &#123;</span><br><span class="line">    result.<span class="title function_">push</span>(value);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>上面这种解放就是利用排序来判断两个字符串是不是异位词。当然也可以不用 result数组，直接Array.from(map.values())也可以。</p><p><strong>质数相乘法</strong></p><p>网上看到的解题方案，不得不说真牛掰，思路就是先创建含有26位质数的数组，再用<strong>charCodeAt</strong>将一个一个字符转换成 UTF-16 码元值，而这个码元值减去97就得到了0~25的索引，再用这个索引取得对应的质数再累乘。利用一个数字不为质数的话，那可以<code>唯一</code>分解成有限个质数的乘积这一定理，取得一个代表这个字符的唯一数字，如果数字相等那就是异位词。</p><p>质数又称素数。指在一个大于1的自然数中，除了1和此整数自身外，没法被其他自然数整除的数。换句话说，只有两个正因数（1和自己）的自然数即为素数。比1大但不是素数的数称为合数。1和0既非素数也非合数。合数是由若干个质数相乘而得到的。所以，质数是合数的基础，没有质数就没有合数。这也说明了前面所提到的质数在数论中有着重要地位。历史上曾将1也包含在质数之内，但后来为了算术基本定理，最终1被数学家排除在质数之外，而从高等代数的角度来看，1是乘法单位元，也不能算在质数之内，并且，所有的合数都可由若干个质数相乘而得到。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> groupAnagrams = <span class="keyword">function</span> (<span class="params">strs</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> h = <span class="keyword">new</span> <span class="title class_">Map</span>(),</span><br><span class="line">    prime = [</span><br><span class="line">      <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">13</span>, <span class="number">17</span>, <span class="number">19</span>, <span class="number">23</span>, <span class="number">29</span>, <span class="number">31</span>, <span class="number">37</span>, <span class="number">41</span>, <span class="number">43</span>, <span class="number">47</span>, <span class="number">53</span>, <span class="number">59</span>, <span class="number">61</span>, <span class="number">67</span>,</span><br><span class="line">      <span class="number">71</span>, <span class="number">73</span>, <span class="number">79</span>, <span class="number">83</span>, <span class="number">89</span>, <span class="number">97</span>, <span class="number">101</span>,</span><br><span class="line">    ];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; strs.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">let</span> sum = <span class="number">1</span>; <span class="comment">// 初始化乘法单位元，空字符串的最终sum为1,&quot; &quot;最终为NaN（依然可以为key）</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; strs[i].<span class="property">length</span>; j++) &#123;</span><br><span class="line">      sum *= prime[strs[i].<span class="title function_">charCodeAt</span>(j) - <span class="number">97</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    h.<span class="title function_">has</span>(sum) ? h.<span class="title function_">get</span>(sum).<span class="title function_">push</span>(strs[i]) : h.<span class="title function_">set</span>(sum, [strs[i]]);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Array</span>.<span class="title function_">from</span>(h.<span class="title function_">values</span>());</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>标记暴力解放</strong></p><p>网上看到的，虽说用时最多，但是多看看，开拓视野，对自己没坏处。这个解放就是先搞出排序了字符串的数组，然后双循环拿异位词，并标记已经遍历过的字符串。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> groupAnagrams = <span class="keyword">function</span> (<span class="params">strs</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> len = strs.<span class="property">length</span>;</span><br><span class="line">  <span class="comment">// 排序一下数组中每个字符串的顺序</span></span><br><span class="line">  <span class="keyword">let</span> temp = [];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> str <span class="keyword">of</span> strs) &#123;</span><br><span class="line">    temp.<span class="title function_">push</span>(str.<span class="title function_">split</span>(<span class="string">&quot;&quot;</span>).<span class="title function_">sort</span>().<span class="title function_">join</span>(<span class="string">&quot;&quot;</span>));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 结果数组</span></span><br><span class="line">  <span class="keyword">let</span> ans = [];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">    <span class="comment">// 为&quot;0&quot;,说明已经遍历对比过了</span></span><br><span class="line">    <span class="keyword">if</span> (temp[i] === <span class="string">&quot;0&quot;</span>) &#123;</span><br><span class="line">      <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> cur = [];</span><br><span class="line">    <span class="comment">// 先把当前的扔进去</span></span><br><span class="line">    cur.<span class="title function_">push</span>(strs[i]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = i + <span class="number">1</span>; j &lt; len; j++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (temp[i] === temp[j] &amp;&amp; temp[i] != <span class="string">&quot;0&quot;</span>) &#123;</span><br><span class="line">        cur.<span class="title function_">push</span>(strs[j]);</span><br><span class="line">        <span class="comment">// 标识为已对比</span></span><br><span class="line">        temp[j] = <span class="string">&quot;0&quot;</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ans.<span class="title function_">push</span>(cur);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> ans;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="最终代码"><a href="#最终代码" class="headerlink" title="最终代码"></a>最终代码</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> groupAnagrams = <span class="keyword">function</span> (<span class="params">strs</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> h = <span class="keyword">new</span> <span class="title class_">Map</span>(),</span><br><span class="line">    prime = [</span><br><span class="line">      <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">13</span>, <span class="number">17</span>, <span class="number">19</span>, <span class="number">23</span>, <span class="number">29</span>, <span class="number">31</span>, <span class="number">37</span>, <span class="number">41</span>, <span class="number">43</span>, <span class="number">47</span>, <span class="number">53</span>, <span class="number">59</span>, <span class="number">61</span>, <span class="number">67</span>,</span><br><span class="line">      <span class="number">71</span>, <span class="number">73</span>, <span class="number">79</span>, <span class="number">83</span>, <span class="number">89</span>, <span class="number">97</span>, <span class="number">101</span>,</span><br><span class="line">    ];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; strs.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">let</span> sum = <span class="number">1</span>; <span class="comment">// 初始化乘法单位元，空字符串的最终sum为1,&quot; &quot;最终为NaN（依然可以为key）</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; strs[i].<span class="property">length</span>; j++) &#123;</span><br><span class="line">      sum *= prime[strs[i].<span class="title function_">charCodeAt</span>(j) - <span class="number">97</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    h.<span class="title function_">has</span>(sum) ? h.<span class="title function_">get</span>(sum).<span class="title function_">push</span>(strs[i]) : h.<span class="title function_">set</span>(sum, [strs[i]]);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Array</span>.<span class="title function_">from</span>(h.<span class="title function_">values</span>());</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li>[字母异位词分组](<a href="https://leetcode.cn/problems/group-anagrams/description/?envType=study-plan-v2&envId=top-100-liked">49. 字母异位词分组 - 力扣（LeetCode）</a>)</li></ul>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode热题100 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>两数之和</title>
      <link href="/2023/12/10/%E7%AE%97%E6%B3%95-%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C/"/>
      <url>/2023/12/10/%E7%AE%97%E6%B3%95-%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p><strong>概要：</strong> 简单题，给定一个整数数组 nums 和一个整数目标值 target，请你在该数组中找出 和为目标值 target  的那 两个 整数，并返回它们的数组下标。<br>你可以假设每种输入只会对应一个答案。但是，数组中同一个元素在答案里不能重复出现。<br>你可以按任意顺序返回答案。</p><p><strong>示例：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [<span class="number">2</span>,<span class="number">7</span>,<span class="number">11</span>,<span class="number">15</span>], target = <span class="number">9</span></span><br><span class="line">输出：[<span class="number">0</span>,<span class="number">1</span>]</span><br><span class="line">解释：因为 nums[<span class="number">0</span>] + nums[<span class="number">1</span>] == <span class="number">9</span> ，返回 [<span class="number">0</span>, <span class="number">1</span>] 。</span><br><span class="line">输入：nums = [<span class="number">3</span>,<span class="number">2</span>,<span class="number">4</span>], target = <span class="number">6</span></span><br><span class="line">输出：[<span class="number">1</span>,<span class="number">2</span>]</span><br><span class="line">输入：nums = [<span class="number">3</span>,<span class="number">3</span>], target = <span class="number">6</span></span><br><span class="line">输出：[<span class="number">0</span>,<span class="number">1</span>]</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li>2 &lt;&#x3D; nums.length &lt;&#x3D; 104</li><li>-109 &lt;&#x3D; nums[i] &lt;&#x3D; 109</li><li>只会存在一个有效答案</li></ul><h3 id="心路历程"><a href="#心路历程" class="headerlink" title="心路历程"></a>心路历程</h3><p><strong>暴力解法</strong></p><p>看到题目，第一反应是暴力破解，两层循环，时间复杂度O(n^2)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number[]</span>&#125; <span class="variable">nums</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">target</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number[]</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> twoSum = <span class="keyword">function</span> (<span class="params">nums, target</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> result = [];</span><br><span class="line">  nums.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item, index</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (index !== nums.<span class="property">length</span> - <span class="number">1</span>) &#123;</span><br><span class="line">      nums.<span class="title function_">forEach</span>(<span class="function">(<span class="params">data, key</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (data + item === target) &#123;</span><br><span class="line">          result.<span class="title function_">push</span>(index, key);</span><br><span class="line">          <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>聪明的朋友已经看出来，我上面错了好几处地方了：</p><p>1.第二层循环应该从第一层的下一个开始，不然可能出现结果都是一个下标的可能</p><p>2.result.push(index, key)不该直接push key的，因为第二层不是从nums的第一个开始的</p><p>3.在forEach里return是没用的，因为已经在另一个函数体了，最外层的twoSum会始终返回undefined</p><p>改正一下上面的代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> twoSum = <span class="keyword">function</span> (<span class="params">nums, target</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> result = [];</span><br><span class="line">  nums.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item, index</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (index != nums.<span class="property">length</span> - <span class="number">1</span>) &#123;</span><br><span class="line">      nums.<span class="title function_">slice</span>(index + <span class="number">1</span>).<span class="title function_">forEach</span>(<span class="function">(<span class="params">data, key</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (item + data === target) &#123;</span><br><span class="line">          result.<span class="title function_">push</span>(index, index + key + <span class="number">1</span>);</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>map记录索引</strong></p><p>刷题，不是一味追求数量，多看看不同的解法，开拓视野，一生二，二生三，三生万物。我们尝试用map来降低一下时间复杂度。</p><p>用map，那么就可以把数字和索引联系在一起，可以快速根据数字找到对应的索引。</p><p>这时候有同学说那我们可以先循环一手数组，生成map，然后在遍历map，用target - currentItem得到差值，在用差值到map里去找对应索引，找到就返回出去：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> twoSum = <span class="keyword">function</span> (<span class="params">nums, target</span>) &#123;</span><br><span class="line">  <span class="comment">// 记录item和对应下标</span></span><br><span class="line">  <span class="keyword">const</span> indexMap = &#123;&#125;;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; nums.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">const</span> currentItem = nums[i];</span><br><span class="line">    indexMap[currentItem] = i;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> indexMap) &#123;</span><br><span class="line">    <span class="keyword">const</span> difference = target - key;</span><br><span class="line">    <span class="keyword">if</span> (indexMap[difference] != <span class="literal">undefined</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> [indexMap[difference], indexMap[key]];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>大部分用例都可以通过，但是遇到重复数字的就焉了，如[3,3]，最终会返回[1,1]。眼尖的同学说，是以为后来的3把第一个3给顶替掉了，那我们第二次遍历nums，从前到后！但是要加上 indexMap[difference] !&#x3D;&#x3D; i 的判断，防止一个值重复相加刚好等于target的情况。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> twoSum = <span class="keyword">function</span> (<span class="params">nums, target</span>) &#123;</span><br><span class="line">  <span class="comment">// 记录item和对应下标</span></span><br><span class="line">  <span class="keyword">const</span> indexMap = &#123;&#125;;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; nums.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">const</span> currentItem = nums[i];</span><br><span class="line">    indexMap[currentItem] = i;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; nums.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">const</span> currentItem = nums[i];</span><br><span class="line">    <span class="keyword">const</span> difference = target - currentItem;</span><br><span class="line">    <span class="keyword">if</span> (indexMap[difference] != <span class="literal">undefined</span> &amp;&amp; indexMap[difference] !== i) &#123;</span><br><span class="line">      <span class="keyword">return</span> [i, indexMap[difference]];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>map记录之前索引</strong></p><p>嘿，你他娘的真是天才！确实可行。那我们在想想有没有不这么麻烦，循环一次就行，嘿，还真有，只需改进一下上面这个同学的代码，循环时就计算差值，然后在map中找对应索引，没有就放入map，有就返回。这样只循环一次还不用担心重复的情况。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> twoSum = <span class="keyword">function</span> (<span class="params">nums, target</span>) &#123;</span><br><span class="line">  <span class="comment">// 记录之前出现过的item和对应下标</span></span><br><span class="line">  <span class="keyword">const</span> preIndexMap = &#123;&#125;;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; nums.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">const</span> currentItem = nums[i];</span><br><span class="line">    <span class="keyword">const</span> difference = target - currentItem;</span><br><span class="line">    <span class="keyword">const</span> differenceIndex = preIndexMap[difference];</span><br><span class="line">    <span class="keyword">if</span> (differenceIndex != <span class="literal">undefined</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> [differenceIndex, i];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 如果差值下标不存在则将当前item和下标存储到map</span></span><br><span class="line">      preIndexMap[currentItem] = i;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="最终代码"><a href="#最终代码" class="headerlink" title="最终代码"></a>最终代码</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> twoSum = <span class="keyword">function</span> (<span class="params">nums, target</span>) &#123;</span><br><span class="line">  <span class="comment">// 记录之前出现过的item和对应下标</span></span><br><span class="line">  <span class="keyword">const</span> preIndexMap = &#123;&#125;;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; nums.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">const</span> currentItem = nums[i];</span><br><span class="line">    <span class="keyword">const</span> difference = target - currentItem;</span><br><span class="line">    <span class="keyword">const</span> differenceIndex = preIndexMap[difference];</span><br><span class="line">    <span class="keyword">if</span> (differenceIndex != <span class="literal">undefined</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> [differenceIndex, i];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 如果差值下标不存在则将当前item和下标存储到map</span></span><br><span class="line">      preIndexMap[currentItem] = i;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://leetcode.cn/problems/two-sum/description/?envType=study-plan-v2&envId=top-100-liked">两数之和</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode热题100 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>策略模式优化if-else</title>
      <link href="/2023/11/29/js-%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F%E4%BC%98%E5%8C%96if-else/"/>
      <url>/2023/11/29/js-%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F%E4%BC%98%E5%8C%96if-else/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p><strong>概要：</strong> 在工作中我们经常使用if-else语句，但是如果分支比较多，用if-else就不是那么美观，所以在此介绍几种好的优化方案。</p><h3 id="if-else"><a href="#if-else" class="headerlink" title="if-else"></a>if-else</h3><p>以计算商品价格为例，要求是根据商的折扣倍率计算出最终价格，没有折扣倍率的商品则返回原价，如”A”类商品的折扣倍率为0.1，则最终价格为price - price * 0.1。下面是用if-else的写法，也是我们大部分同学都会采用的方案：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">calculatePrice</span>(<span class="params">product, price</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> discount = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (product === <span class="string">&quot;A&quot;</span>) &#123;</span><br><span class="line">    discount = price * <span class="number">0.1</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (product === <span class="string">&quot;B&quot;</span>) &#123;</span><br><span class="line">    discount = price * <span class="number">0.2</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (product === <span class="string">&quot;C&quot;</span>) &#123;</span><br><span class="line">    discount = price * <span class="number">0.15</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> price - discount;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="switch"><a href="#switch" class="headerlink" title="switch"></a>switch</h3><p>switch的优点是比if-else更清晰美观，但是如果要增加或修改已有的商品折扣率，会修改原始的计算函数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// switch</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">calculatePrice2</span>(<span class="params">product, price</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> discount = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">switch</span> (product) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;A&quot;</span>:</span><br><span class="line">      discount = price * <span class="number">0.1</span>;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;B&quot;</span>:</span><br><span class="line">      discount = price * <span class="number">0.2</span>;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;C&quot;</span>:</span><br><span class="line">      discount = price * <span class="number">0.15</span>;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="attr">default</span>:</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> price - discount;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="map"><a href="#map" class="headerlink" title="map"></a>map</h3><p>利用map来存储商品折扣率，需要修改或增加时只需更改map即可，具有较高的可维护性和可扩展性。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// map</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">MAGNIFICATION</span> = &#123;</span><br><span class="line">  <span class="attr">A</span>: <span class="number">0.1</span>,</span><br><span class="line">  <span class="attr">B</span>: <span class="number">0.2</span>,</span><br><span class="line">  <span class="attr">C</span>: <span class="number">0.15</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">calculatePrice3</span>(<span class="params">product, price</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> magnification = <span class="variable constant_">MAGNIFICATION</span>[product] || <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">return</span> price - price * magnification;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="策略模式"><a href="#策略模式" class="headerlink" title="策略模式"></a>策略模式</h3><p>和map方案类似，但是比map更灵活，map局限于折扣率这一个变量。而策略模式提升到了每种商品类型的折扣逻辑，具有较高的灵活性和可扩展性。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 策略模式</span></span><br><span class="line"><span class="keyword">const</span> discountStrategies = &#123;</span><br><span class="line">  <span class="attr">A</span>: <span class="function">(<span class="params">price</span>) =&gt;</span> price * <span class="number">0.1</span>,</span><br><span class="line">  <span class="attr">B</span>: <span class="function">(<span class="params">price</span>) =&gt;</span> price * <span class="number">0.2</span>,</span><br><span class="line">  <span class="attr">C</span>: <span class="function">(<span class="params">price</span>) =&gt;</span> price * <span class="number">0.15</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">calculatePrice4</span>(<span class="params">product, price</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> discountStrategy = discountStrategies[product] || (<span class="function">(<span class="params">price</span>) =&gt;</span> <span class="number">0</span>);</span><br><span class="line">  <span class="keyword">return</span> price - <span class="title function_">discountStrategy</span>(price);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>知识图谱</title>
      <link href="/2023/11/17/%E6%80%BB%E7%BB%93-%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1/"/>
      <url>/2023/11/17/%E6%80%BB%E7%BB%93-%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p><strong>概要：</strong> 在工作中我们经常感觉自己的知识是杂乱无章的，没有结构，没有体系，是碎片的，比如今天学习了如何配置nginx，结果几周不用，又忘了，下次再学的时候又得重新配置一遍，我们需要建立一个知识体系，把零散的知识点串联起来，形成一个完整的知识体系，方便我们随时随地查阅，方便我们学习自己不会的知识。</p><h3 id="知识图谱"><a href="#知识图谱" class="headerlink" title="知识图谱"></a>知识图谱</h3><p><a href="https://tsejx.github.io/javascript-guidebook//">JavaScript Guidebook</a>：JavaScript 知识图谱 – ECMAScript | DOM | BOM | HTML5 | 计算机网络 | 设计模式<br><a href="https://tsejx.github.io/react-guidebook//">React Guidebook</a>：React 知识图谱 – 基本概念 | 进阶用法 | 框架生态 | 前沿技术 | 源码核心<br><a href="https://tsejx.github.io/webpack-guidebook/">Webpack Guidebook</a>：Webpack 知识图谱 – 模块化 | 基础概念 | 工作原理 | 实战应用<br><a href="https://tsejx.github.io/devops-guidebook/">DevOps Guidebook</a>：DevOps 知识图谱 – Linux | Nginx | 数据库 | 部署 | DevOps<br><a href="https://tsejx.github.io/vue-guidebook/">Vue Guidebook</a>：Vue 知识图谱 – 基本概念 | 响应式原理 | 编译原理 | 框架生态<br><a href="https://tsejx.github.io/css-guidebook/">CSS Guidebook</a>：CSS 知识图谱 – 特性 | 属性 | 布局 | 响应式 | 动画<br><a href="https://tsejx.github.io/node-guidebook/">Node Guidebook</a>：Node.js 知识图谱 – 模块 | 异步编程 | 进程 | I&#x2F;O | 服务端应用<br><a href="https://tsejx.github.io/typescript-guidebook/">TypeScript Guidebook</a>：TypeScript 知识图谱 – 静态类型检查 | 语法基础 | 配置使用 | 编译原理<br><a href="https://tsejx.github.io/cross-platform-guidebook/">Cross Platform Guidebook</a>：跨平台开发知识图谱 – HybridApp、ReactNative、小程序、Flutter、Electron<br><a href="https://tsejx.github.io/data-structure-and-algorithms-guidebook/">Data Structure and Algorithms Guidebook</a>：数据结构与算法知识图谱 – 数据结构 | 算法 | 编程实现<br><a href="https://tsejx.github.io/visualization-guidebook/">Visualizaition Guidebook</a>：前端图像学知识图谱 – Canvas | SVG | WebGL<br><a href="https://tsejx.github.io/database-guidebook/">Database Guidebook</a>：MySQL、MongoDB</p><h3 id="刷题进阶"><a href="#刷题进阶" class="headerlink" title="刷题进阶"></a>刷题进阶</h3><p><a href="https://www.freecodecamp.org/chinese/">freecodecamp</a>：简单题，适合入门学习<br><a href="https://leetcode.cn/">leetcode</a>：金典刷题网站</p><h3 id="面试宝典"><a href="#面试宝典" class="headerlink" title="面试宝典"></a>面试宝典</h3><p><a href="https://fe.ecool.fun/topic-list">前端面试宝典</a>：1145个面试题，涵盖范围全<br><a href="https://fe.ecool.fun/topic-list">面试官系列</a>：包含各种大厂常用的面试题<br><a href="http://www.xiaoshuaipeng.com/interview/">前端之家</a>：种类挺齐全的</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://juejin.cn/post/7244505316234985528">如何让自己的前端知识更全面</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 知识图谱 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2023年错误总结</title>
      <link href="/2023/11/15/%E6%80%BB%E7%BB%93-2023%E5%B9%B4%E9%94%99%E8%AF%AF%E6%80%BB%E7%BB%93/"/>
      <url>/2023/11/15/%E6%80%BB%E7%BB%93-2023%E5%B9%B4%E9%94%99%E8%AF%AF%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p><strong>概要：</strong>2023马上结束了，这一年我对编写业务代码更加熟练，对3D方向、canvas可视化、ts方向的研究有所收获和进展，同时也犯了很多错，在此记录一下影响项目健壮性的错误。</p><h3 id="错误1"><a href="#错误1" class="headerlink" title="错误1"></a><strong>错误1</strong></h3><p>详情，列表或者其他数据的请求接口一旦报错，那页面直接空白。这个也不算错，只能说不是很优雅</p><p><strong>错误流程详解：</strong></p><p>1.一个请求在 HTTP 响应状态码不在 2xx 范围内时会触发Axios 的响应拦截器中的<strong>错误拦截</strong>（包括网络错误、状态码错误、请求超时），在错误拦截中我们会进行消息提示或者token刷新等操作，然后把错误包裹在Promise.reject()中，并传递下去</p><p>2.在使用axios进行请求时，我们没有使用.catch()进行错误处理，而是直接返回给的页面，如果页面中没有try-catch进行捕获错误那么会触发全局的 <code>unhandledrejection</code> 事件，错误信息将被打印到控制台。</p><p><strong>解决方案：</strong></p><p>1.提前写好数据模型，在请求外面用try-catch处理，出现错误不会导致页面奔溃，而是使用数据模型来顶替</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> res = &#123;</span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">data</span>: &#123; <span class="attr">records</span>: [&#123;&#125;] &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  res = <span class="keyword">await</span> <span class="title function_">getChangeList</span>(formData);</span><br><span class="line">&#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(e);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.<code>await-to-js</code>库将异步操作的结果分配到<code>err</code>和<code>res</code>两个变量上</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> to <span class="keyword">from</span> <span class="string">&#x27;await-to-js&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">fetchData</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [err, data] = <span class="keyword">await</span> <span class="title function_">to</span>(<span class="title function_">fetchDataFromAPI</span>());</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span> (err) &#123;</span><br><span class="line">    <span class="comment">// 处理错误情况，例如显示错误消息</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;Error:&#x27;</span>, err);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 处理成功情况，使用 data</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Data:&#x27;</span>, data);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 内部原理</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">to</span>(<span class="params">promise</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> promise</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function">(<span class="params">data</span>) =&gt;</span> [<span class="literal">null</span>, data]) <span class="comment">// 如果成功，返回 [null, 数据]</span></span><br><span class="line">    .<span class="title function_">catch</span>(<span class="function">(<span class="params">error</span>) =&gt;</span> [error, <span class="literal">undefined</span>]); <span class="comment">// 如果失败，返回 [错误, undefined]</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="错误2"><a href="#错误2" class="headerlink" title="错误2"></a><strong>错误2</strong></h3><p>接口中如果出现复杂数据类型为null的情况下，而页面又对该数据进行了展示或者处理，则会导致页面直接空白，如常见的array.map，以及数据嵌套较深时data.info.name</p><p><strong>解决方案：</strong></p><p>1.使用结构赋值并默认赋值，使用参数默认值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; logList = [] &#125; = detail;</span><br><span class="line"><span class="keyword">const</span> srcIp = logList[<span class="number">0</span>]?.<span class="property">srcIp</span> || <span class="string">&#x27;--&#x27;</span>;</span><br></pre></td></tr></table></figure><p>2.使用三元运算符对数据进行兼容</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">detail.<span class="property">logList</span>[<span class="number">0</span>] ? detail.<span class="property">logList</span>[<span class="number">0</span>].<span class="property">srcIp</span> : <span class="string">&quot;--&quot;</span></span><br></pre></td></tr></table></figure><p>3.使用可选链?.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> srcIp = detail.<span class="property">logList</span>?.[<span class="number">0</span>]?.<span class="property">srcIp</span> || <span class="string">&#x27;--&#x27;</span>;</span><br></pre></td></tr></table></figure><h3 id="错误3"><a href="#错误3" class="headerlink" title="错误3"></a><strong>错误3</strong></h3><p>兼容性数据处理的位置不够明显和便于维护，如一个复杂添加表单，需要支持二种甚至更多类型的添加，但是他们公用的form-item字段又不同。</p><p><strong>解决方案：</strong></p><p>1.在confirm中调用添加接口之前，对字段就行转换或者删除。在编辑接口.then后面对数据进行处理。</p><h3 id="错误4"><a href="#错误4" class="headerlink" title="错误4"></a><strong>错误4</strong></h3><p>代码有时候会冗余，比如使用过多的switch，请求函数多等问题。</p><p><strong>解决方案：</strong></p><p>1.对于不复杂的场景可以使用map或者数组搭配includes替换switch。</p><p>2.请求函数可以提取相同的部分做成工厂函数利用模板字符串拼接正确的路径。</p><h3 id="错误5"><a href="#错误5" class="headerlink" title="错误5"></a><strong>错误5</strong></h3><p>对于页面的架构有问题，像公用的添加弹窗，主页面和浮层页中都会用到，我是在浮层页又起了一个dialog，然后把service引进来公用，逻辑上是没问题的，但是由于service要用到dialog的ref，且会用响应式对象进行存储该ref，这会导致对ref进行解包，从而导致改变了引用，以至于添加效验出问题。</p><p><strong>解决方案：</strong></p><p>1.在写代码之前多想想，像dialog和浮层页，应该放在主页面那一层，其他层应该emit事件，或者有主server编写事件再传给子页面。</p><p>2.用普通变量存储ref，避免被reactive解包。</p><h3 id="错误6"><a href="#错误6" class="headerlink" title="错误6"></a><strong>错误6</strong></h3><p>在很多添加编辑的场景，没有做loading或者防抖或者阀门，导致用户可能点击多次，导致数据出问题</p><p><strong>解决方案：</strong></p><p>1.增加loading动画，这里我建议用阀门。</p><h3 id="寄语"><a href="#寄语" class="headerlink" title="寄语"></a><strong>寄语</strong></h3><p>千万不要混。你一个月五千，一年6万，20岁混到30岁，10年就混了60来万，存款只估计不到20%。<br>混一天和努力一天看不到任何差别，但是两三个月以后你会看到气场分别，三五年会看到人生道路不同。<br>别在该努力的年纪选择安逸时光，别到时候家里人需要你的时候你一无所有。</p>]]></content>
      
      
      <categories>
          
          <category> 总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>陕西移动数据安全管控平台</title>
      <link href="/2023/11/02/%E9%A1%B9%E7%9B%AE-%E9%99%95%E8%A5%BF%E7%A7%BB%E5%8A%A8%E6%95%B0%E6%8D%AE%E5%AE%89%E5%85%A8%E7%AE%A1%E6%8E%A7%E5%B9%B3%E5%8F%B0/"/>
      <url>/2023/11/02/%E9%A1%B9%E7%9B%AE-%E9%99%95%E8%A5%BF%E7%A7%BB%E5%8A%A8%E6%95%B0%E6%8D%AE%E5%AE%89%E5%85%A8%E7%AE%A1%E6%8E%A7%E5%B9%B3%E5%8F%B0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p><strong>概要：</strong>时间如白驹过隙，在公司做的第一个大型项目已经迎来了第8次迭代，这里记录一下项目中的技术点，以及一些总结。</p><h3 id="项目介绍"><a href="#项目介绍" class="headerlink" title="项目介绍"></a>项目介绍</h3><p>项目描述:<br>为陕西移动定制开发的大型B端项目，300+页面，开发周期6个月，核心功能包括资产扫描、场景监测、安全处置。</p><p>项目难点：<br>1.有些模块极其复杂，多级弹窗加联动表单，一个添加弹窗可以衍生出编辑、备案、变更等用途</p><p>2.项目中多个报告支持导出成静态页面</p><p>3.项目中使用的UI库，除了基于element-ui二次开发的组件库外，还进行了定制化开发，如浮层页，滚动组件，以及团队合作开发的canvas动画库</p><p>项目亮点：</p><p>1.项目架构优秀，采用的很细的文件分级，由一个主service为核心入口，在集成基于单例模式的useDialogService，useDrawerService，以及其他Hook如useSearchService，usePageTableService构成</p><p>2.为了支持报告导出成静态页面，基于.env.local编写了本地打包脚本</p><p>3.项目含有三个大屏以其其他可视化内容，所以使用了自己团队开发的canvas动画库，以及封装了定制化的UI组件</p><h3 id="项目展示"><a href="#项目展示" class="headerlink" title="项目展示"></a>项目展示</h3><p>注：使用的测试数据</p><p><img src="https://cdn.jsdelivr.net/gh/pengpen1/blog-images/20231102160400.png"></p><p><img src="https://cdn.jsdelivr.net/gh/pengpen1/blog-images/20231102162408.png"></p><p><img src="https://cdn.jsdelivr.net/gh/pengpen1/blog-images/20231102161139.png"></p>]]></content>
      
      
      <categories>
          
          <category> 项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> B端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一次性搞懂css中的clamp函数，max函数，min函数，vmax，vmin</title>
      <link href="/2023/09/07/css-%E4%B8%80%E6%AC%A1%E6%80%A7%E6%90%9E%E6%87%82css%E4%B8%AD%E7%9A%84clamp%E5%87%BD%E6%95%B0%EF%BC%8Cmax%E5%87%BD%E6%95%B0%EF%BC%8Cmin%E5%87%BD%E6%95%B0%EF%BC%8Cvmax%EF%BC%8Cvmin/"/>
      <url>/2023/09/07/css-%E4%B8%80%E6%AC%A1%E6%80%A7%E6%90%9E%E6%87%82css%E4%B8%AD%E7%9A%84clamp%E5%87%BD%E6%95%B0%EF%BC%8Cmax%E5%87%BD%E6%95%B0%EF%BC%8Cmin%E5%87%BD%E6%95%B0%EF%BC%8Cvmax%EF%BC%8Cvmin/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p><strong>概要：</strong>本篇文章我们将学习css中的clamp函数，max函数，min函数，vmax，vmin。</p><h2 id="clamp函数"><a href="#clamp函数" class="headerlink" title="clamp函数"></a>clamp函数</h2><p>2020年4月开始支持这些函数，我们来看MDN上对clamp函数的描述：是将一个值限制在一个上限和下限之间，当这个值超过最大或最小范围时，会在这两个值中选一个使用，它接收三个参数：最小值，首选值，最大值。表达式可以是数学函数 (参看 calc )、字面量或其它计算为有效的参数类型表达式，如 attr()，或嵌套的 min 和 max 。表达式中的每一个值都可以用不同的单位。</p><h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">font-size</span>: <span class="built_in">clamp</span>(<span class="number">1rem</span>, <span class="number">2.5vw</span>, <span class="number">2rem</span>);</span><br></pre></td></tr></table></figure><p>上述案例设置随窗口大小改变的字体大小，但是无论窗口怎么改变，字体大小不会小于设置的最小值，也不会超过设置的最大值。</p><h3 id="和百分比，媒体查询区别"><a href="#和百分比，媒体查询区别" class="headerlink" title="和百分比，媒体查询区别"></a><strong>和百分比，媒体查询区别</strong></h3><p>媒体查询形成流体尺寸，百分比没法最大值和最小值</p><p>clamp函数既能形成流体尺寸，也能有最大值最小值</p><h2 id="min和max"><a href="#min和max" class="headerlink" title="min和max"></a>min和max</h2><p><strong>min()</strong> CSS 方法允许你从逗号分隔符表达式中选择一个最小值作为 CSS 的属性值。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">width</span>: <span class="built_in">min</span>(<span class="number">10vw</span>, <span class="number">4em</span>, <span class="number">80px</span>);</span><br></pre></td></tr></table></figure><p>在上面的例子中，宽度最多是 80px。如果视口的宽度小于 800px，或者一个 em 的宽度小于 20px，则会更窄。换句话说，最大宽度是 80px。同理<strong>max()</strong> 这个 CSS 函数让你可以从一个逗号分隔的表达式列表中选择最大（正方向）的值作为属性的值 。</p><h2 id="vmax和vmin"><a href="#vmax和vmin" class="headerlink" title="vmax和vmin"></a><strong>vmax和vmin</strong></h2><p>vmax，vmin是相对长度单位**,**vmin视口高度 vw和宽度 <code>vh</code> 两者之间的最小值。vmax视口高度 <code>vw</code> 和宽度 <code>vh</code> 两者之间的最大值。用途还是多，如手机屏幕翻转，每次都用vw或vh中的最小值，这样就算屏幕翻转也能最大效果的呈现画面，可以参考哔站手机版。</p>]]></content>
      
      
      <categories>
          
          <category> css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>扩展声明vue全局属性</title>
      <link href="/2023/09/06/ts-%E6%89%A9%E5%B1%95%E5%A3%B0%E6%98%8Evue%E5%85%A8%E5%B1%80%E5%B1%9E%E6%80%A7/"/>
      <url>/2023/09/06/ts-%E6%89%A9%E5%B1%95%E5%A3%B0%E6%98%8Evue%E5%85%A8%E5%B1%80%E5%B1%9E%E6%80%A7/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p><strong>概要：</strong>我们在使用vue3开发项目时，会发现很多地方都会用到格式化utc时间，所以我想加个全局属性方便自己使用，但是ts类型检测不通过，而本篇文章就是探讨这个问题的实现方案。</p><h2 id="使用全局属性"><a href="#使用全局属性" class="headerlink" title="使用全局属性"></a>使用全局属性</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">registerProperties</span>(<span class="params">app: App</span>) &#123;</span><br><span class="line">  app.<span class="property">config</span>.<span class="property">globalProperties</span>.<span class="property">$filters</span> = &#123;</span><br><span class="line">    <span class="title function_">formatDate</span>(<span class="params">value: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="title function_">formatUtcString</span>(value)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用只需要：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; $filters.formatDate(utcString) &#125;&#125;</span><br></pre></td></tr></table></figure><p>注册好$filters这个全局属性后，项目是可以正常运行，但是ts检测一直报错，说类型上不存在$filters这属性。于是我就看文档，搜解决办法。</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>我们需要扩展一下vue中的模块，而vue正好暴露了一个帮助我们拓展模块ComponentCustomProperties。我们需要在src下创建.ts 或 .d.ts文件，然后在里面扩展类型ComponentCustomProperties，ts会合并其中的声明，就好像是在原始文件中声明一样。这里我是在src目录下创建的vue.d.ts文件。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 扩展全局属性类型</span></span><br><span class="line"><span class="keyword">declare</span> <span class="variable language_">module</span> <span class="string">&#x27;vue&#x27;</span> &#123;</span><br><span class="line">  <span class="keyword">interface</span> <span class="title class_">ComponentCustomProperties</span> &#123;</span><br><span class="line">    <span class="attr">$filters</span>: &#123;</span><br><span class="line">      <span class="attr">formatDate</span>: <span class="function">(<span class="params">value: <span class="built_in">string</span></span>) =&gt;</span> nay</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> &#123;&#125;</span><br></pre></td></tr></table></figure><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>声明完后，我们就可以在template中随意用$filters这个全局属性了，还会有代码提示！</p>]]></content>
      
      
      <categories>
          
          <category> ts </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ts </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>子元素突破父元素padding的限制</title>
      <link href="/2023/09/03/css-%E5%AD%90%E5%85%83%E7%B4%A0%E7%AA%81%E7%A0%B4%E7%88%B6%E5%85%83%E7%B4%A0padding%E7%9A%84%E9%99%90%E5%88%B6/"/>
      <url>/2023/09/03/css-%E5%AD%90%E5%85%83%E7%B4%A0%E7%AA%81%E7%A0%B4%E7%88%B6%E5%85%83%E7%B4%A0padding%E7%9A%84%E9%99%90%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p><strong>概要：</strong>我们在用UI库或者维护项目的时候，可能会遇到别人用div包裹了一层，并设置了padding，但是我们又想要让子元素突破padding的限制，让子元素和父元素一个宽度，本篇文章就是探讨这个问题的实现方案。<br><strong>展示：</strong></p><p><img src="https://raw.githubusercontent.com/pengpen1/blog-images/main/20230908173722.png"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;warp&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;header&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p> 大家有没有思路呀，首先来排除几个错误答案，设置display：inline-block，设置box-sizing: content-box。都是不能突破padding的。下面说一下我常用的两个解决方案。</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><h3 id="绝对定位"><a href="#绝对定位" class="headerlink" title="绝对定位"></a>绝对定位</h3><p>方案1是用绝对定位，让子元素脱离文档流。缺点就是下面已有的布局会被打乱。（header就是我们要突破padding的目标元素）</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.warp</span> &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="built_in">rgb</span>(<span class="number">213</span>, <span class="number">213</span>, <span class="number">213</span>);</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">800px</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">50px</span> auto;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="selector-class">.header</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">80px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="built_in">rgb</span>(<span class="number">162</span>, <span class="number">226</span>, <span class="number">237</span>);</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.content</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">250px</span>;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">  <span class="attribute">box-sizing</span>: content-box;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="built_in">rgb</span>(<span class="number">204</span>, <span class="number">233</span>, <span class="number">193</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/pengpen1/blog-images/20230908174514.png"></p><h3 id="解决方案2"><a href="#解决方案2" class="headerlink" title="解决方案2"></a>解决方案2</h3><p>第二个方案是利用margin-left配合calc函数实现，利用margin-left突破左边padding限制，利用calc计算出父元素宽度+2倍padding值。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.warp</span> &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="built_in">rgb</span>(<span class="number">213</span>, <span class="number">213</span>, <span class="number">213</span>);</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">800px</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">50px</span> auto;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.header</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="built_in">calc</span>(<span class="number">100%</span> + <span class="number">40px</span>);</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">80px</span>;</span><br><span class="line">  <span class="attribute">margin-left</span>: -<span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="built_in">rgb</span>(<span class="number">162</span>, <span class="number">226</span>, <span class="number">237</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.content</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">250px</span>;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">  <span class="attribute">box-sizing</span>: content-box;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="built_in">rgb</span>(<span class="number">204</span>, <span class="number">233</span>, <span class="number">193</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/pengpen1/blog-images/20230908174402.png"></p><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>利用这两个方案，我们就能让子元素突破padding的限制啦！</p>]]></content>
      
      
      <categories>
          
          <category> css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>集成说说插件</title>
      <link href="/2023/09/02/%E5%85%B6%E4%BB%96-%E9%9B%86%E6%88%90%E8%AF%B4%E8%AF%B4%E6%8F%92%E4%BB%B6/"/>
      <url>/2023/09/02/%E5%85%B6%E4%BB%96-%E9%9B%86%E6%88%90%E8%AF%B4%E8%AF%B4%E6%8F%92%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p><strong>概要：</strong>在这篇记录中，我们将集成hexo-butterfly-artitalk插件，为网站添加说说功能。</p><p><strong>效果展示：</strong></p><p><img src="https://cdn.jsdelivr.net/gh/pengpen1/blog-images/20230908110247.png"></p><h2 id="Artitalk-js"><a href="#Artitalk-js" class="headerlink" title="Artitalk.js"></a>Artitalk.js</h2><p><a href="https://artitalk.js.org/">Artitalk.js</a>是一个基于 LeanCloud 实现的可实时发布说说&#x2F;微语的 js库。</p><h2 id="LeanCloud"><a href="#LeanCloud" class="headerlink" title="LeanCloud"></a>LeanCloud</h2><p><a href="https://www.leancloud.cn/">LeanCloud</a>是一个一站式云端服务。</p><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><h3 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h3><p>因为hexo-theme-butterfly也就是我所使用的主题已经集成了Artitalk.js，所以只需按照插件，在进行配置即可为网站添加说说功能。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-butterfly-artitalk</span><br></pre></td></tr></table></figure><h3 id="添加配置"><a href="#添加配置" class="headerlink" title="添加配置"></a>添加配置</h3><p>在Hexo的配置文件或者主題的配置文件中添加</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Artitalk</span></span><br><span class="line"><span class="comment"># see https://artitalk.js.org/</span></span><br><span class="line"><span class="attr">artitalk:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">appId:</span></span><br><span class="line">  <span class="attr">appKey:</span></span><br><span class="line">  <span class="attr">path:</span></span><br><span class="line">  <span class="attr">js:</span></span><br><span class="line">  <span class="attr">option:</span></span><br><span class="line">  <span class="attr">front_matter:</span></span><br></pre></td></tr></table></figure><table><thead><tr><th>参数</th><th>解释</th></tr></thead><tbody><tr><td>appId</td><td>【必须】LeanCloud 创建应用中的 AppID</td></tr><tr><td>appKey</td><td>【必须】LeanCloud 创建应用中的 appKey</td></tr><tr><td>path</td><td>【可选】说说页面的路径，默认<code>artitalk</code>，生成的页面为 artitalk&#x2F;index.html</td></tr><tr><td>js</td><td>【可选】更换 Artitalk 的 js CDN（默认为 <code>https://cdn.jsdelivr.net/npm/artitalk</code>）</td></tr><tr><td>option</td><td>【可选】Artitalk 需要的额外配置</td></tr><tr><td>front_matter</td><td>【可选】Artitalk 页面的 front_matter 配置</td></tr></tbody></table><h3 id="创建LeanCloud-应用"><a href="#创建LeanCloud-应用" class="headerlink" title="创建LeanCloud 应用"></a>创建LeanCloud 应用</h3><ol><li><p>前往 <a href="https://leancloud.app/">LeanCloud 国际版</a>，注册账号。</p></li><li><p>注册完成之后根据 LeanCloud 的提示绑定手机号和邮箱。</p></li><li><p>绑定完成之后点击<code>创建应用</code>，应用名称随意，接着在<code>结构化数据</code>中创建 <code>class</code>，命名为 <code>shuoshuo</code>，权限先使用默认的。</p></li><li><p>在你新建的应用中找到<code>内建账号</code>下的<code>用户管理</code>。点击<code>添加用户</code>，输入想用的用户名及密码。</p></li><li><p>回到<code>结构化数据</code>中，点击 <code>class</code> 下的 <code>shuoshuo</code>。找到权限，在 <code>Class 访问权限</code>中将 <code>add_fields</code> 以及 <code>create</code> 权限设置为指定用户，输入你刚才输入的用户名会自动匹配。为了安全起见，将 <code>delete</code> 和 <code>update</code> 也设置为跟它们一样的权限。</p><p><img src="https://cdn.jsdelivr.net/gh/pengpen1/blog-images/20230908111902.png"></p></li><li><p>然后新建一个名为<code>atComment</code>的class，权限什么的使用默认的即可。</p></li><li><p>点击 <code>class</code> 下的 <code>_User</code> 添加列，列名称为 <code>img</code>，默认值填上你这个账号想要用的发布说说的头像url，这一项不进行配置，说说头像会显示为默认头像 —— Artitalk 的 logo。</p><p><img src="https://cdn.jsdelivr.net/gh/pengpen1/blog-images/20230908112211.png"></p></li><li><p>在最菜单栏中找到设置-&gt; 应用 凭证，记下来 <code>AppID</code> 和 <code>AppKey</code> ，一会会用。</p></li><li><p>最后将 <code>_User</code> 中的权限全部调为指定用户，或者数据创建者，为了保证不被篡改用户数据以达到强制发布说说。</p></li></ol><h3 id="使用artitalk"><a href="#使用artitalk" class="headerlink" title="使用artitalk"></a>使用artitalk</h3><p>在你对应的目录下创建index.md，如果是默认配置，也就是在&#x2F;artitalk目录下创建，然后填充一下内容，记得将appId和appKey改成自己的哦！</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 说说</span><br><span class="line">type: artitalk</span><br><span class="line">noDate: &#x27;true&#x27;</span><br><span class="line"><span class="section">comments: &#x27;false&#x27;</span></span><br><span class="line"><span class="section">---</span></span><br><span class="line"></span><br><span class="line">&lt;!-- 引用 artitalk --&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/artitalk&quot;</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;!-- 存放说说的容器 --&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;artitalk_main&quot;</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span></span><br><span class="line">new Artitalk(&#123;</span><br><span class="line"><span class="code">    appId: &#x27;vpj0ElXQAUwMBLjqlyTnhWyj-MdYXbMMI&#x27;, // Your LeanCloud appId</span></span><br><span class="line"><span class="code">    appKey: &#x27;uh9RSiLwHKZSbuWOeJsPEGOU&#x27; // Your LeanCloud appKey</span></span><br><span class="line"><span class="code">&#125;)</span></span><br><span class="line"><span class="code">&lt;/script&gt;</span></span><br></pre></td></tr></table></figure><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>这样你就可以获取一个免费的说说页面啦！要注意30天没有API请求的话，你创建的应用会被停用哦，不过再次激活即可恢复，快去发布第一个说说吧！</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://github.com/jerryc127/butterfly-plugins/blob/main/hexo-butterfly-artitalk/README.md">给 hexo-theme-butterfly 添加artitalk说说</a></li><li><a href="https://artitalk.js.org/">artitalk使用文档</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 插件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PicGo+gitHub+jsdelivr实现加速图床</title>
      <link href="/2023/09/01/%E5%85%B6%E4%BB%96-picGo+gitHub+jsdelivr%E5%AE%9E%E7%8E%B0%E5%8A%A0%E9%80%9F%E5%9B%BE%E5%BA%8A/"/>
      <url>/2023/09/01/%E5%85%B6%E4%BB%96-picGo+gitHub+jsdelivr%E5%AE%9E%E7%8E%B0%E5%8A%A0%E9%80%9F%E5%9B%BE%E5%BA%8A/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p><strong>概要：</strong>在这篇记录中，我们将探讨如何利用PicGo+gitHub+jsdelivr实现加速图床。</p><h2 id="PicGo"><a href="#PicGo" class="headerlink" title="PicGo"></a>PicGo</h2><p><a href="https://molunerfinn.com/PicGo/">PicGo</a>是一个开源的图片上传与管理工具。</p><h2 id="jsdelivr"><a href="#jsdelivr" class="headerlink" title="jsdelivr"></a>jsdelivr</h2><p>jsdelivr是免费、快速且可靠的开源CDN（Content Delivery Network，即内容分发网络。其目的是通过在现有的Internet中增加一层新的网络架构，将网站的内容发布到最接近用户的网络“边缘”，使用户可以就近取得所需的内容，提高用户访问网站的响应速度）。使用也极其简单，直接修改链接皆可。</p><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><h3 id="创建仓库"><a href="#创建仓库" class="headerlink" title="创建仓库"></a>创建仓库</h3><p>在gitHub上创建一个公共仓库，用于存放图片。</p><p><img src="https://cdn.jsdelivr.net/gh/pengpen1/blog-images/20230907202830.png"></p><h3 id="获取访问token"><a href="#获取访问token" class="headerlink" title="获取访问token"></a>获取访问token</h3><p>在Settings &gt; Developer settings &gt;Personal access tokens&gt;Tokens中创建一个访问token。用途随意，过期时间看着办，第一个控制仓库的权限给它选上，其他默认皆可。注意这里创建完毕后要立马复制token。</p><p><img src="https://cdn.jsdelivr.net/gh/pengpen1/blog-images/20230907203052.png"></p><p><img src="https://cdn.jsdelivr.net/gh/pengpen1/blog-images/20230907203346.png"></p><h3 id="下载PicGo"><a href="#下载PicGo" class="headerlink" title="下载PicGo"></a>下载PicGo</h3><p><a href="https://molunerfinn.com/PicGo/">picGo</a>，widows选-x64.exe结尾的，ios选-64.dmg结尾的。</p><p><img src="https://cdn.jsdelivr.net/gh/pengpen1/blog-images/20230907204038.png"></p><h3 id="设置GitHUb图床"><a href="#设置GitHUb图床" class="headerlink" title="设置GitHUb图床"></a>设置GitHUb图床</h3><p>打开PicGo，在图床设置中选择GitHub，更具提示填写相应配置。在设定自定义域名这，我们需要把jsdelivr使用上：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">https</span>:<span class="comment">//cdn.jsdelivr.net/gh/用户名/仓库名</span></span><br><span class="line"></span><br><span class="line">例如：<span class="attr">https</span>:<span class="comment">//cdn.jsdelivr.net/gh/pengpen1/blog-images</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/pengpen1/blog-images/20230907204416.png"></p><h2 id="疑问"><a href="#疑问" class="headerlink" title="疑问"></a>疑问</h2><p><strong>1.上传失败，提示检查配置项以及网络，随后提示上传失败{}，改怎么解决？</strong></p><p>有小伙伴问我这个是怎么回事，这里统一说一下，遇到这种情况，一般都是Token过期导致的。要确定的话，只需在设置那，看一下日志：</p><p><img src="https://cdn.jsdelivr.net/gh/pengpen1/blog-images/20240912162303.png"></p><p>401就代表无权访问，也就是Token过期了，重新去Settings &gt; Developer settings &gt;Personal access tokens&gt;Tokens中创建一个访问token即可。</p><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>这样你就可以获取一个免费的加速图床啦！快去上传区上传第一张图片吧！</p>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图床 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo框架、GitHub Pages与自动化部署</title>
      <link href="/2023/08/29/%E5%85%B6%E4%BB%96-hexo%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2/"/>
      <url>/2023/08/29/%E5%85%B6%E4%BB%96-hexo%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p><strong>概要：</strong>在这篇记录中，我们将探讨<a href="https://github.com/hexojs/hexo">Hexo框架</a>、GitHub Pages以及如何使用GitHub Actions实现自动化部署的原理与流程。</p><h2 id="Hexo框架"><a href="#Hexo框架" class="headerlink" title="Hexo框架"></a>Hexo框架</h2><p>Hexo是一个快速、简单且强大的静态博客框架，它允许您使用Markdown等标记语言编写博客内容，然后将其自动转换为静态HTML页面。</p><h2 id="GitHub-Pages"><a href="#GitHub-Pages" class="headerlink" title="GitHub Pages"></a>GitHub Pages</h2><p>GitHub Pages是GitHub提供的免费静态网站托管服务。它允许GitHub用户将静态网站部署到GitHub的服务器上，并通过特定的GitHub Pages网址进行访问。GitHub Pages支持自定义域名、HTTPS、Jekyll等功能，使其成为托管个人博客和项目文档的理想选择。</p><h2 id="GitHub-Actions"><a href="#GitHub-Actions" class="headerlink" title="GitHub Actions"></a>GitHub Actions</h2><p>GitHub Actions是GitHub提供的自动化CI&#x2F;CD工具，它可以响应GitHub仓库中的事件并执行自定义的工作流程。我们可以使用GitHub Actions来实现自动化部署。</p><h2 id="自动化部署流程与原理"><a href="#自动化部署流程与原理" class="headerlink" title="自动化部署流程与原理"></a>自动化部署流程与原理</h2><p>自动化部署是一种将Hexo博客自动构建和部署到GitHub Pages的方式，这可以大大简化发布流程并确保博客内容的实时更新。</p><h3 id="部署流程"><a href="#部署流程" class="headerlink" title="部署流程"></a>部署流程</h3><ol><li><p><strong>触发条件</strong>：配置GitHub Actions工作流程，以响应特定事件，例如代码推送到<code>master</code>分支。</p></li><li><p><strong>工作流程配置</strong>：在工作流程的YAML文件中定义构建和部署步骤。这包括设置Node.js环境、安装Hexo依赖、构建博客、部署到GitHub Pages等。</p></li><li><p><strong>自动执行</strong>：当触发条件满足时，GitHub Actions会自动执行工作流程。</p></li><li><p><strong>构建</strong>：工作流程会自动执行Hexo项目的构建命令，生成静态HTML文件。</p></li><li><p><strong>部署</strong>：使用GitHub Actions中的Action，将构建后的静态文件发布到GitHub Pages。这通常需要提供GitHub Token以获得必要的权限。</p></li><li><p><strong>结果</strong>：GitHub Actions会将执行结果报告给您，包括部署是否成功以及任何错误信息。</p></li></ol><p>通过这种方式，您可以自动化Hexo博客的构建和部署，使博客内容始终保持最新状态，无需手动干预。</p><h3 id="部署示例"><a href="#部署示例" class="headerlink" title="部署示例"></a>部署示例</h3><p>在存库中建立 .github&#x2F;workflows&#x2F;pages.yml 文件，内容如下</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">Pages</span> <span class="comment"># 部署文件名称</span></span><br><span class="line"></span><br><span class="line"><span class="attr">on:</span> <span class="comment"># 触发条件，在这个例子中，工作流程会在代码推送（`push`事件）到`master`分支时触发</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">master</span> <span class="comment"># default branch</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">pages:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">permissions:</span></span><br><span class="line">      <span class="attr">contents:</span> <span class="string">write</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span> <span class="comment"># 这个步骤使用另一个官方Action来设置Node.js环境</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Use</span> <span class="string">Node.js</span> <span class="string">v16.13.0.x</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/setup-node@v2</span> <span class="comment"># GitHub Actions提供的官方Action，将代码仓库检出到工作环境中</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">node-version:</span> <span class="string">&quot;v16.13.0&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Cache</span> <span class="string">NPM</span> <span class="string">dependencies</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/cache@v2</span> <span class="comment"># 这个步骤用于缓存npm依赖项，以提高构建速度</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">path:</span> <span class="string">node_modules</span></span><br><span class="line">          <span class="attr">key:</span> <span class="string">$&#123;&#123;</span> <span class="string">runner.OS</span> <span class="string">&#125;&#125;-npm-cache</span></span><br><span class="line">          <span class="attr">restore-keys:</span> <span class="string">|</span></span><br><span class="line"><span class="string">            $&#123;&#123; runner.OS &#125;&#125;-npm-cache</span></span><br><span class="line"><span class="string"></span>      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Install</span> <span class="string">Dependencies</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">npm</span> <span class="string">install</span> <span class="comment"># 运行步骤，用于安装Hexo项目的npm依赖项</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Build</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">npm</span> <span class="string">run</span> <span class="string">build</span> <span class="comment"># 这个步骤运行Hexo项目的构建命令</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Deploy</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">peaceiris/actions-gh-pages@v3</span> <span class="comment"># 第三方action，用于将Hexo博客的生成文件发布到GitHub Pages。它需要一个GitHub Token</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">github_token:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.GITHUB_TOKEN</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">publish_dir:</span> <span class="string">./public</span></span><br></pre></td></tr></table></figure><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>Hexo框架、GitHub Pages和自动化部署工具（如GitHub Actions）的结合为博客作者提供了一个强大而方便的方式来创建、管理和发布博客内容。这些工具使博客的维护变得更加高效，让作者可以更专注于创作内容而不是繁琐的部署过程。</p>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 自动化部署 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
